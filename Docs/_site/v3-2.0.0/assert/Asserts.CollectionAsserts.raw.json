{
  "uid": "Asserts.CollectionAsserts",
  "isEii": false,
  "isExtensionMethod": false,
  "parent": {
    "uid": "Asserts",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Asserts.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      }
    ],
    "level": 0
  },
  "children": [
    {
      "uid": "Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "AllAsync<T>(IEnumerable<T>, Func<T, int, Task>)"
        },
        {
          "lang": "vb",
          "value": "AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.AllAsync<T>(IEnumerable<T>, Func<T, int, Task>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.AllAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, int, System.Threading.Tasks.Task>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.AllAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Integer, System.Threading.Tasks.Task))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})\" text=\"AllAsync&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, int, Task&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})\" text=\"AllAsync&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, int, Task&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, int, Task> action)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function AllAsync(Of T)(collection As IEnumerable(Of T), action As Func(Of T, Integer, Task)) As Task"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection</p>\n"
          },
          {
            "id": "action",
            "type": {
              "uid": "System.Func{{T},System.Int32,System.Threading.Tasks.Task}",
              "definition": "System.Func`3",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T, int, Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, Integer, Task)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T, int, Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, Integer, Task)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T, int, System.Threading.Tasks.Task>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T, Integer, System.Threading.Tasks.Task)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>&lt;T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">int</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>(Of T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">Integer</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The action to test each item against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.Task",
            "name": [
              {
                "lang": "csharp",
                "value": "Task"
              },
              {
                "lang": "vb",
                "value": "Task"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Task"
              },
              {
                "lang": "vb",
                "value": "Task"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.Task"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.Task"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Threading.Tasks.Task\" text=\"Task\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Threading.Tasks.Task\" text=\"Task\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "AllAsync",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 113,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.AllAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "AllAsync"
          },
          {
            "lang": "vb",
            "value": "AllAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.AllAsync"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.AllAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.AllAsync"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.AllAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync*\" text=\"AllAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync*\" text=\"AllAsync\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.AllException",
            "name": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.AllException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.AllException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection contains at least one non-matching element</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that all items in the collection pass when executed against\naction. The item index is provided to the action, in addition to the item.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "AllAsync<T>(IEnumerable<T>, Func<T, Task>)"
        },
        {
          "lang": "vb",
          "value": "AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.AllAsync<T>(IEnumerable<T>, Func<T, Task>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.AllAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.AllAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})\" text=\"AllAsync&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, Task&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})\" text=\"AllAsync&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, Task&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, Task> action)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function AllAsync(Of T)(collection As IEnumerable(Of T), action As Func(Of T, Task)) As Task"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection</p>\n"
          },
          {
            "id": "action",
            "type": {
              "uid": "System.Func{{T},System.Threading.Tasks.Task}",
              "definition": "System.Func`2",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T, Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, Task)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T, Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, Task)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T, System.Threading.Tasks.Task>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T, System.Threading.Tasks.Task)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-2\">Func</a>&lt;T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-2\">Func</a>(Of T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The action to test each item against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.Task",
            "name": [
              {
                "lang": "csharp",
                "value": "Task"
              },
              {
                "lang": "vb",
                "value": "Task"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Task"
              },
              {
                "lang": "vb",
                "value": "Task"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.Task"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.Task"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Threading.Tasks.Task\" text=\"Task\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Threading.Tasks.Task\" text=\"Task\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "AllAsync",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 95,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.AllAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "AllAsync"
          },
          {
            "lang": "vb",
            "value": "AllAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.AllAsync"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.AllAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.AllAsync"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.AllAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync*\" text=\"AllAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.AllAsync*\" text=\"AllAsync\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.AllException",
            "name": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.AllException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.AllException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection contains at least one non-matching element</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that all items in the collection pass when executed against\naction.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "All<T>(IEnumerable<T>, Action<T, int>)"
        },
        {
          "lang": "vb",
          "value": "All(Of T)(IEnumerable(Of T), Action(Of T, Integer))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.All<T>(IEnumerable<T>, Action<T, int>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.All(Of T)(IEnumerable(Of T), Action(Of T, Integer))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.All<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, int>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.All(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, Integer))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})\" text=\"All&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T, int&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})\" text=\"All&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T, int&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void All<T>(IEnumerable<T> collection, Action<T, int> action)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub All(Of T)(collection As IEnumerable(Of T), action As Action(Of T, Integer))"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection</p>\n"
          },
          {
            "id": "action",
            "type": {
              "uid": "System.Action{{T},System.Int32}",
              "definition": "System.Action`2",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action<T, int>"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T, Integer)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action<T, int>"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T, Integer)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action<T, int>"
                },
                {
                  "lang": "vb",
                  "value": "System.Action(Of T, Integer)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-2\">Action</a>&lt;T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">int</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-2\">Action</a>(Of T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">Integer</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The action to test each item against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ]
      },
      "source": {
        "id": "All",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 59,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.All*",
        "name": [
          {
            "lang": "csharp",
            "value": "All"
          },
          {
            "lang": "vb",
            "value": "All"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.All"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.All"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.All"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.All"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.All*\" text=\"All\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.All*\" text=\"All\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.AllException",
            "name": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.AllException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.AllException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection contains at least one non-matching element</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that all items in the collection pass when executed against\naction. The item index is provided to the action, in addition to the item.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "All<T>(IEnumerable<T>, Action<T>)"
        },
        {
          "lang": "vb",
          "value": "All(Of T)(IEnumerable(Of T), Action(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.All<T>(IEnumerable<T>, Action<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.All(Of T)(IEnumerable(Of T), Action(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.All<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.All(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\" text=\"All&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\" text=\"All&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void All<T>(IEnumerable<T> collection, Action<T> action)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub All(Of T)(collection As IEnumerable(Of T), action As Action(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection</p>\n"
          },
          {
            "id": "action",
            "type": {
              "uid": "System.Action{{T}}",
              "definition": "System.Action`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action<T>"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action<T>"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Action(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-1\">Action</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-1\">Action</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The action to test each item against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ]
      },
      "source": {
        "id": "All",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 41,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.All*",
        "name": [
          {
            "lang": "csharp",
            "value": "All"
          },
          {
            "lang": "vb",
            "value": "All"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.All"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.All"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.All"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.All"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.All*\" text=\"All\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.All*\" text=\"All\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.AllException",
            "name": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "AllException"
              },
              {
                "lang": "vb",
                "value": "AllException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.AllException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.AllException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.AllException\" text=\"AllException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection contains at least one non-matching element</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that all items in the collection pass when executed against\naction.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "CollectionAsync<T>(IEnumerable<T>, params Func<T, Task>[])"
        },
        {
          "lang": "vb",
          "value": "CollectionAsync(Of T)(IEnumerable(Of T), ParamArray Func(Of T, Task)())"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.CollectionAsync<T>(IEnumerable<T>, params Func<T, Task>[])"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.CollectionAsync(Of T)(IEnumerable(Of T), ParamArray Func(Of T, Task)())"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.CollectionAsync<T>(System.Collections.Generic.IEnumerable<T>, params System.Func<T, System.Threading.Tasks.Task>[])"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.CollectionAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray System.Func(Of T, System.Threading.Tasks.Task)())"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])\" text=\"CollectionAsync&lt;T&gt;(IEnumerable&lt;T&gt;, params Func&lt;T, Task&gt;[])\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])\" text=\"CollectionAsync&lt;T&gt;(IEnumerable&lt;T&gt;, params Func&lt;T, Task&gt;[])\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Task CollectionAsync<T>(IEnumerable<T> collection, params Func<T, Task>[] elementInspectors)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function CollectionAsync(Of T)(collection As IEnumerable(Of T), ParamArray elementInspectors As Func(Of T, Task)()) As Task"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          },
          {
            "id": "elementInspectors",
            "type": {
              "uid": "System.Func{{T},System.Threading.Tasks.Task}[]",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T, Task>[]"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, Task)()"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T, Task>[]"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, Task)()"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T, System.Threading.Tasks.Task>[]"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T, System.Threading.Tasks.Task)()"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-2\">Func</a>&lt;T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>&gt;[]"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-2\">Func</a>(Of T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>)()"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The element inspectors, which inspect each element in turn. The\ntotal number of element inspectors must exactly match the number of elements in the collection.</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.Task",
            "name": [
              {
                "lang": "csharp",
                "value": "Task"
              },
              {
                "lang": "vb",
                "value": "Task"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Task"
              },
              {
                "lang": "vb",
                "value": "Task"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.Task"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.Task"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Threading.Tasks.Task\" text=\"Task\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Threading.Tasks.Task\" text=\"Task\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "CollectionAsync",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 189,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.CollectionAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "CollectionAsync"
          },
          {
            "lang": "vb",
            "value": "CollectionAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.CollectionAsync"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.CollectionAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.CollectionAsync"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.CollectionAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.CollectionAsync*\" text=\"CollectionAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.CollectionAsync*\" text=\"CollectionAsync\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection contains exactly a given number of elements, which meet\nthe criteria provided by the element inspectors.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Collection<T>(IEnumerable<T>, params Action<T>[])"
        },
        {
          "lang": "vb",
          "value": "Collection(Of T)(IEnumerable(Of T), ParamArray Action(Of T)())"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Collection<T>(IEnumerable<T>, params Action<T>[])"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Collection(Of T)(IEnumerable(Of T), ParamArray Action(Of T)())"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Collection<T>(System.Collections.Generic.IEnumerable<T>, params System.Action<T>[])"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Collection(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray System.Action(Of T)())"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])\" text=\"Collection&lt;T&gt;(IEnumerable&lt;T&gt;, params Action&lt;T&gt;[])\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])\" text=\"Collection&lt;T&gt;(IEnumerable&lt;T&gt;, params Action&lt;T&gt;[])\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Collection<T>(IEnumerable<T> collection, params Action<T>[] elementInspectors)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Collection(Of T)(collection As IEnumerable(Of T), ParamArray elementInspectors As Action(Of T)())"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          },
          {
            "id": "elementInspectors",
            "type": {
              "uid": "System.Action{{T}}[]",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action<T>[]"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T)()"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action<T>[]"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T)()"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action<T>[]"
                },
                {
                  "lang": "vb",
                  "value": "System.Action(Of T)()"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-1\">Action</a>&lt;T&gt;[]"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-1\">Action</a>(Of T)()"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The element inspectors, which inspect each element in turn. The\ntotal number of element inspectors must exactly match the number of elements in the collection.</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ]
      },
      "source": {
        "id": "Collection",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 149,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Collection*",
        "name": [
          {
            "lang": "csharp",
            "value": "Collection"
          },
          {
            "lang": "vb",
            "value": "Collection"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Collection"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Collection"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Collection"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Collection"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Collection*\" text=\"Collection\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Collection*\" text=\"Collection\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection contains exactly a given number of elements, which meet\nthe criteria provided by the element inspectors.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains<T>(IEnumerable<T>, Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "Contains(Of T)(IEnumerable(Of T), Predicate(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Contains<T>(IEnumerable<T>, Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Contains(Of T)(IEnumerable(Of T), Predicate(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Contains<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Contains(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\" text=\"Contains&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\" text=\"Contains&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains<T>(IEnumerable<T> collection, Predicate<T> filter)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(Of T)(collection As IEnumerable(Of T), filter As Predicate(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          },
          {
            "id": "filter",
            "type": {
              "uid": "System.Predicate{{T}}",
              "definition": "System.Predicate`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "Predicate(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "Predicate(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Predicate(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.predicate-1\">Predicate</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.predicate-1\">Predicate</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The filter used to find the item you're ensuring the collection contains</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 281,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the object is not present in the collection</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection contains a given object.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains<T>(T, IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "Contains(Of T)(T, IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Contains<T>(T, IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Contains(Of T)(T, IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Contains<T>(T, System.Collections.Generic.IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Contains(Of T)(T, System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})\" text=\"Contains&lt;T&gt;(T, IEnumerable&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})\" text=\"Contains&lt;T&gt;(T, IEnumerable&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains<T>(T expected, IEnumerable<T> collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(Of T)(expected As T, collection As IEnumerable(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The object expected to be in the collection</p>\n"
          },
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 228,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the object is not present in the collection</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection contains a given object.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains<T>(T, IEnumerable<T>, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Contains(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Contains<T>(T, IEnumerable<T>, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Contains(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Contains<T>(T, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Contains(Of T)(T, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"Contains&lt;T&gt;(T, IEnumerable&lt;T&gt;, IEqualityComparer&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"Contains&lt;T&gt;(T, IEnumerable&lt;T&gt;, IEqualityComparer&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(Of T)(expected As T, collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The object expected to be in the collection</p>\n"
          },
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Collections.Generic.IEqualityComparer{{T}}",
              "definition": "System.Collections.Generic.IEqualityComparer`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEqualityComparer(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to equate objects in the collection with the expected object</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be verified</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 261,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the object is not present in the collection</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection contains a given object, using an equality comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Distinct<T>(IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "Distinct(Of T)(IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Distinct<T>(IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Distinct(Of T)(IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Distinct<T>(System.Collections.Generic.IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0})\" text=\"Distinct&lt;T&gt;(IEnumerable&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0})\" text=\"Distinct&lt;T&gt;(IEnumerable&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Distinct<T>(IEnumerable<T> collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Distinct(Of T)(collection As IEnumerable(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Distinct",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 304,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Distinct*",
        "name": [
          {
            "lang": "csharp",
            "value": "Distinct"
          },
          {
            "lang": "vb",
            "value": "Distinct"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Distinct"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Distinct"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Distinct"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Distinct"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct*\" text=\"Distinct\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct*\" text=\"Distinct\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DistinctException",
            "name": [
              {
                "lang": "csharp",
                "value": "DistinctException"
              },
              {
                "lang": "vb",
                "value": "DistinctException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DistinctException"
              },
              {
                "lang": "vb",
                "value": "DistinctException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DistinctException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DistinctException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DistinctException\" text=\"DistinctException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DistinctException\" text=\"DistinctException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when an object is present inside the collection more than once</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection contains each object only once.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Distinct<T>(IEnumerable<T>, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Distinct(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Distinct<T>(IEnumerable<T>, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Distinct(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Distinct<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"Distinct&lt;T&gt;(IEnumerable&lt;T&gt;, IEqualityComparer&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"Distinct&lt;T&gt;(IEnumerable&lt;T&gt;, IEqualityComparer&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Distinct<T>(IEnumerable<T> collection, IEqualityComparer<T> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Distinct(Of T)(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Collections.Generic.IEqualityComparer{{T}}",
              "definition": "System.Collections.Generic.IEqualityComparer`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEqualityComparer(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to equate objects in the collection with the expected object</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Distinct",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 314,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Distinct*",
        "name": [
          {
            "lang": "csharp",
            "value": "Distinct"
          },
          {
            "lang": "vb",
            "value": "Distinct"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Distinct"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Distinct"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Distinct"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Distinct"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct*\" text=\"Distinct\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Distinct*\" text=\"Distinct\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DistinctException",
            "name": [
              {
                "lang": "csharp",
                "value": "DistinctException"
              },
              {
                "lang": "vb",
                "value": "DistinctException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DistinctException"
              },
              {
                "lang": "vb",
                "value": "DistinctException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DistinctException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DistinctException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DistinctException\" text=\"DistinctException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DistinctException\" text=\"DistinctException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when an object is present inside the collection more than once</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection contains each object only once.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain<T>(IEnumerable<T>, Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Of T)(IEnumerable(Of T), Predicate(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.DoesNotContain<T>(IEnumerable<T>, Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.DoesNotContain(Of T)(IEnumerable(Of T), Predicate(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.DoesNotContain<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.DoesNotContain(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\" text=\"DoesNotContain&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\" text=\"DoesNotContain&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain<T>(IEnumerable<T> collection, Predicate<T> filter)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(Of T)(collection As IEnumerable(Of T), filter As Predicate(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          },
          {
            "id": "filter",
            "type": {
              "uid": "System.Predicate{{T}}",
              "definition": "System.Predicate`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "Predicate(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "Predicate(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Predicate(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.predicate-1\">Predicate</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.predicate-1\">Predicate</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The filter used to find the item you're ensuring the collection does not contain</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 409,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the object is present inside the collection</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection does not contain a given object.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain<T>(T, IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Of T)(T, IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.DoesNotContain<T>(T, IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.DoesNotContain(Of T)(T, IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.DoesNotContain<T>(T, System.Collections.Generic.IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.DoesNotContain(Of T)(T, System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})\" text=\"DoesNotContain&lt;T&gt;(T, IEnumerable&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})\" text=\"DoesNotContain&lt;T&gt;(T, IEnumerable&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain<T>(T expected, IEnumerable<T> collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(Of T)(expected As T, collection As IEnumerable(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The object that is expected not to be in the collection</p>\n"
          },
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 338,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the object is present inside the collection</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection does not contain a given object.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain<T>(T, IEnumerable<T>, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.DoesNotContain<T>(T, IEnumerable<T>, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.DoesNotContain(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.DoesNotContain<T>(T, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.DoesNotContain(Of T)(T, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"DoesNotContain&lt;T&gt;(T, IEnumerable&lt;T&gt;, IEqualityComparer&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"DoesNotContain&lt;T&gt;(T, IEnumerable&lt;T&gt;, IEqualityComparer&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(Of T)(expected As T, collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The object that is expected not to be in the collection</p>\n"
          },
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Collections.Generic.IEqualityComparer{{T}}",
              "definition": "System.Collections.Generic.IEqualityComparer`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEqualityComparer(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to equate objects in the collection with the expected object</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the object to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 371,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the object is present inside the collection</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection does not contain a given object, using an equality comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Empty(IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "Empty(IEnumerable)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Empty(IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Empty(IEnumerable)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)\" text=\"Empty(IEnumerable)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)\" text=\"Empty(IEnumerable)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Empty(IEnumerable collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Empty(collection As IEnumerable)"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.IEnumerable",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.IEnumerable"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Empty",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 444,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Empty*",
        "name": [
          {
            "lang": "csharp",
            "value": "Empty"
          },
          {
            "lang": "vb",
            "value": "Empty"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Empty"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Empty"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Empty"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Empty"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Empty*\" text=\"Empty\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Empty*\" text=\"Empty\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "System.ArgumentNullException",
            "name": [
              {
                "lang": "csharp",
                "value": "ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "ArgumentNullException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "ArgumentNullException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "System.ArgumentNullException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.ArgumentNullException\" text=\"ArgumentNullException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.ArgumentNullException\" text=\"ArgumentNullException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection is null</p>\n"
        },
        {
          "type": {
            "uid": "Xunit.Sdk.EmptyException",
            "name": [
              {
                "lang": "csharp",
                "value": "EmptyException"
              },
              {
                "lang": "vb",
                "value": "EmptyException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EmptyException"
              },
              {
                "lang": "vb",
                "value": "EmptyException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EmptyException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EmptyException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EmptyException\" text=\"EmptyException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EmptyException\" text=\"EmptyException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection is not empty</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection is empty.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal<T>(IEnumerable<T>?, IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Equal<T>(IEnumerable<T>?, IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" text=\"Equal&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" text=\"Equal&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 463,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the objects are not equal</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two sequences are equivalent, using a default comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"Equal&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, IEqualityComparer&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"Equal&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, IEqualityComparer&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As IEqualityComparer(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Collections.Generic.IEqualityComparer{{T}}",
              "definition": "System.Collections.Generic.IEqualityComparer`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEqualityComparer(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to compare the two objects</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 481,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the objects are not equal</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two sequences are equivalent, using a custom equatable comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Equal<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})\" text=\"Equal&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, Func&lt;T, T, bool&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})\" text=\"Equal&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, Func&lt;T, T, bool&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As Func(Of T, T, Boolean))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Func{{T},{T},System.Boolean}",
              "definition": "System.Func`3",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T, T, Boolean)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>&lt;T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">bool</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>(Of T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">Boolean</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The function to compare two items for equality</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 500,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two collections are equal, using a comparer function against\nitems in the two collections.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEmpty(IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "NotEmpty(IEnumerable)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.NotEmpty(IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.NotEmpty(IEnumerable)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)\" text=\"NotEmpty(IEnumerable)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)\" text=\"NotEmpty(IEnumerable)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEmpty(IEnumerable collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEmpty(collection As IEnumerable)"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.IEnumerable",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.IEnumerable"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEmpty",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 517,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.NotEmpty*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEmpty"
          },
          {
            "lang": "vb",
            "value": "NotEmpty"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.NotEmpty"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.NotEmpty"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.NotEmpty"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.NotEmpty"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEmpty*\" text=\"NotEmpty\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEmpty*\" text=\"NotEmpty\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "System.ArgumentNullException",
            "name": [
              {
                "lang": "csharp",
                "value": "ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "ArgumentNullException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "ArgumentNullException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "System.ArgumentNullException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.ArgumentNullException\" text=\"ArgumentNullException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.ArgumentNullException\" text=\"ArgumentNullException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when a null collection is passed</p>\n"
        },
        {
          "type": {
            "uid": "Xunit.Sdk.NotEmptyException",
            "name": [
              {
                "lang": "csharp",
                "value": "NotEmptyException"
              },
              {
                "lang": "vb",
                "value": "NotEmptyException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "NotEmptyException"
              },
              {
                "lang": "vb",
                "value": "NotEmptyException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.NotEmptyException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.NotEmptyException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.NotEmptyException\" text=\"NotEmptyException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.NotEmptyException\" text=\"NotEmptyException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection is empty</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a collection is not empty.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" text=\"NotEqual&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\" text=\"NotEqual&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The expected object</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The actual object</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 540,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.NotEqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "NotEqualException"
              },
              {
                "lang": "vb",
                "value": "NotEqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "NotEqualException"
              },
              {
                "lang": "vb",
                "value": "NotEqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.NotEqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.NotEqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.NotEqualException\" text=\"NotEqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.NotEqualException\" text=\"NotEqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the objects are equal</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two sequences are not equivalent, using a default comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"NotEqual&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, IEqualityComparer&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\" text=\"NotEqual&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, IEqualityComparer&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As IEqualityComparer(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The expected object</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The actual object</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Collections.Generic.IEqualityComparer{{T}}",
              "definition": "System.Collections.Generic.IEqualityComparer`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEqualityComparer(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to compare the two objects</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 558,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.NotEqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "NotEqualException"
              },
              {
                "lang": "vb",
                "value": "NotEqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "NotEqualException"
              },
              {
                "lang": "vb",
                "value": "NotEqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.NotEqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.NotEqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.NotEqualException\" text=\"NotEqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.NotEqualException\" text=\"NotEqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the objects are equal</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two sequences are not equivalent, using a custom equality comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})\" text=\"NotEqual&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, Func&lt;T, T, bool&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})\" text=\"NotEqual&lt;T&gt;(IEnumerable&lt;T&gt;?, IEnumerable&lt;T&gt;?, Func&lt;T, T, bool&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As Func(Of T, T, Boolean))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Func{{T},{T},System.Boolean}",
              "definition": "System.Func`3",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T, T, Boolean)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>&lt;T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">bool</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>(Of T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">Boolean</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The function to compare two items for equality</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 577,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two collections are not equal, using a comparer function against\nitems in the two collections.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Single(IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "Single(IEnumerable)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Single(IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Single(IEnumerable)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)\" text=\"Single(IEnumerable)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)\" text=\"Single(IEnumerable)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static object? Single(IEnumerable collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function [Single](collection As IEnumerable) As Object"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.IEnumerable",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.IEnumerable"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection.</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Object",
            "name": [
              {
                "lang": "csharp",
                "value": "object"
              },
              {
                "lang": "vb",
                "value": "Object"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "object"
              },
              {
                "lang": "vb",
                "value": "Object"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "object"
              },
              {
                "lang": "vb",
                "value": "Object"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Object\" text=\"object\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Object\" text=\"object\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The single item in the collection.</p>\n"
        }
      },
      "source": {
        "id": "Single",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 597,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Single*",
        "name": [
          {
            "lang": "csharp",
            "value": "Single"
          },
          {
            "lang": "vb",
            "value": "Single"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Single"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Single"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.SingleException",
            "name": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.SingleException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.SingleException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection does not contain\nexactly one element.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the given collection contains only a single\nelement of the given type.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Single(System.Collections.IEnumerable,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Single(IEnumerable, object?)"
        },
        {
          "lang": "vb",
          "value": "Single(IEnumerable, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Single(IEnumerable, object?)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Single(IEnumerable, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Single(System.Collections.IEnumerable, object?)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Single(System.Collections.IEnumerable, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single(System.Collections.IEnumerable,System.Object)\" text=\"Single(IEnumerable, object?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single(System.Collections.IEnumerable,System.Object)\" text=\"Single(IEnumerable, object?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Single(IEnumerable collection, object? expected)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub [Single](collection As IEnumerable, expected As Object)"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.IEnumerable",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.IEnumerable"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.IEnumerable"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Collections.IEnumerable\" text=\"IEnumerable\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection.</p>\n"
          },
          {
            "id": "expected",
            "type": {
              "uid": "System.Object",
              "name": [
                {
                  "lang": "csharp",
                  "value": "object"
                },
                {
                  "lang": "vb",
                  "value": "Object"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "object"
                },
                {
                  "lang": "vb",
                  "value": "Object"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "object"
                },
                {
                  "lang": "vb",
                  "value": "Object"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Object\" text=\"object\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Object\" text=\"object\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The value to find in the collection.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Single",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 617,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Single*",
        "name": [
          {
            "lang": "csharp",
            "value": "Single"
          },
          {
            "lang": "vb",
            "value": "Single"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Single"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Single"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.SingleException",
            "name": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.SingleException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.SingleException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection does not contain\nexactly one element.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the given collection contains only a single\nelement of the given value. The collection may or may not\ncontain other values.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Single<T>(IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "Single(Of T)(IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Single<T>(IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Single(Of T)(IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Single<T>(System.Collections.Generic.IEnumerable<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Single(Of T)(System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0})\" text=\"Single&lt;T&gt;(IEnumerable&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0})\" text=\"Single&lt;T&gt;(IEnumerable&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T Single<T>(IEnumerable<T> collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function [Single](Of T)(collection As IEnumerable(Of T)) As T"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection.</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection type.</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The single item in the collection.</p>\n"
        }
      },
      "source": {
        "id": "Single",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 639,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Single*",
        "name": [
          {
            "lang": "csharp",
            "value": "Single"
          },
          {
            "lang": "vb",
            "value": "Single"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Single"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Single"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.SingleException",
            "name": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.SingleException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.SingleException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the collection does not contain\nexactly one element.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the given collection contains only a single\nelement of the given type.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.CollectionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Single<T>(IEnumerable<T>, Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "Single(Of T)(IEnumerable(Of T), Predicate(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "CollectionAsserts.Single<T>(IEnumerable<T>, Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "CollectionAsserts.Single(Of T)(IEnumerable(Of T), Predicate(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.CollectionAsserts.Single<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.CollectionAsserts.Single(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\" text=\"Single&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\" text=\"Single&lt;T&gt;(IEnumerable&lt;T&gt;, Predicate&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T Single<T>(IEnumerable<T> collection, Predicate<T> predicate)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function [Single](Of T)(collection As IEnumerable(Of T), predicate As Predicate(Of T)) As T"
          }
        ],
        "parameters": [
          {
            "id": "collection",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection.</p>\n"
          },
          {
            "id": "predicate",
            "type": {
              "uid": "System.Predicate{{T}}",
              "definition": "System.Predicate`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "Predicate(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "Predicate(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Predicate<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Predicate(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.predicate-1\">Predicate</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.predicate-1\">Predicate</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The item matching predicate.</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The collection type.</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">The single item in the filtered collection.</p>\n"
        }
      },
      "source": {
        "id": "Single",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
        "startLine": 658,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.CollectionAsserts.Single*",
        "name": [
          {
            "lang": "csharp",
            "value": "Single"
          },
          {
            "lang": "vb",
            "value": "Single"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "CollectionAsserts.Single"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.CollectionAsserts.Single"
          },
          {
            "lang": "vb",
            "value": "Asserts.CollectionAsserts.Single"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.CollectionAsserts.Single*\" text=\"Single\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.SingleException",
            "name": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "SingleException"
              },
              {
                "lang": "vb",
                "value": "SingleException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.SingleException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.SingleException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.SingleException\" text=\"SingleException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the filtered collection does\nnot contain exactly one element.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.CollectionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the given collection contains only a single\nelement of the given type which matches the given predicate. The\ncollection may or may not contain other values which do not\nmatch the given predicate.</p>\n",
      "platform": null
    }
  ],
  "langs": [
    "csharp",
    "vb"
  ],
  "name": [
    {
      "lang": "csharp",
      "value": "CollectionAsserts"
    },
    {
      "lang": "vb",
      "value": "CollectionAsserts"
    }
  ],
  "nameWithType": [
    {
      "lang": "csharp",
      "value": "CollectionAsserts"
    },
    {
      "lang": "vb",
      "value": "CollectionAsserts"
    }
  ],
  "fullName": [
    {
      "lang": "csharp",
      "value": "Asserts.CollectionAsserts"
    },
    {
      "lang": "vb",
      "value": "Asserts.CollectionAsserts"
    }
  ],
  "type": "class",
  "source": {
    "id": "CollectionAsserts",
    "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\CollectionAsserts.cs",
    "startLine": 29,
    "endLine": 0
  },
  "assemblies": [
    "xunit.v3.assert"
  ],
  "namespace": {
    "uid": "Asserts",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Asserts.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      }
    ],
    "level": 0
  },
  "syntax": {
    "content": [
      {
        "lang": "csharp",
        "value": "public class CollectionAsserts"
      },
      {
        "lang": "vb",
        "value": "Public Class CollectionAsserts"
      }
    ]
  },
  "inheritance": [
    {
      "uid": "System.Object",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object",
      "name": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        }
      ],
      "level": 0,
      "index": 0
    }
  ],
  "level": 1,
  "inheritedMembers": [
    {
      "uid": "System.Object.Equals(System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetHashCode",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gethashcode",
      "name": [
        {
          "lang": "csharp",
          "value": "GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "GetHashCode()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetType",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gettype",
      "name": [
        {
          "lang": "csharp",
          "value": "GetType()"
        },
        {
          "lang": "vb",
          "value": "GetType()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.MemberwiseClone",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone",
      "name": [
        {
          "lang": "csharp",
          "value": "MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "MemberwiseClone()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ReferenceEquals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.referenceequals",
      "name": [
        {
          "lang": "csharp",
          "value": "ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "ReferenceEquals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ToString",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.tostring",
      "name": [
        {
          "lang": "csharp",
          "value": "ToString()"
        },
        {
          "lang": "vb",
          "value": "ToString()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        }
      ],
      "level": 0
    }
  ],
  "_appName": "xunit-proto",
  "_appTitle": "xunit-proto",
  "_enableSearch": true,
  "pdf": false,
  "_systemKeys": [
    "uid",
    "isEii",
    "isExtensionMethod",
    "parent",
    "children",
    "href",
    "langs",
    "name",
    "nameWithType",
    "fullName",
    "type",
    "source",
    "documentation",
    "assemblies",
    "namespace",
    "summary",
    "remarks",
    "example",
    "syntax",
    "overridden",
    "overload",
    "exceptions",
    "seealso",
    "see",
    "inheritance",
    "derivedClasses",
    "level",
    "implements",
    "inheritedMembers",
    "extensionMethods",
    "conceptual",
    "platform",
    "attributes",
    "additionalNotes"
  ],
  "_key": "v3-2.0.0/assert/Asserts.CollectionAsserts.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../toc.html",
  "_path": "v3-2.0.0/assert/Asserts.CollectionAsserts.html",
  "_rel": "../../",
  "_tocKey": "~/v3-2.0.0/assert/toc.yml",
  "_tocPath": "v3-2.0.0/assert/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}