{
  "uid": "Xunit.Sdk.DoesNotContainException",
  "isEii": false,
  "isExtensionMethod": false,
  "parent": {
    "uid": "Xunit.Sdk",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit.Sdk"
      },
      {
        "lang": "vb",
        "value": "Xunit.Sdk"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit.Sdk"
      },
      {
        "lang": "vb",
        "value": "Xunit.Sdk"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit.Sdk"
      },
      {
        "lang": "vb",
        "value": "Xunit.Sdk"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Sdk.html\">Sdk</a>"
      },
      {
        "lang": "vb",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Sdk.html\">Sdk</a>"
      }
    ],
    "level": 0
  },
  "children": [
    {
      "uid": "Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched(System.Int32,System.Nullable{System.Int32},System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.DoesNotContainException",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForCollectionFilterMatched(int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "ForCollectionFilterMatched(Integer, Integer?, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "DoesNotContainException.ForCollectionFilterMatched(int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContainException.ForCollectionFilterMatched(Integer, Integer?, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched(int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched(Integer, Integer?, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched(System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForCollectionFilterMatched(int, int?, string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched(System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForCollectionFilterMatched(int, int?, string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static DoesNotContainException ForCollectionFilterMatched(int indexFailurePoint, int? failurePointerIndent, string collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ForCollectionFilterMatched(indexFailurePoint As Integer, failurePointerIndent As Integer?, collection As String) As DoesNotContainException"
          }
        ],
        "parameters": [
          {
            "id": "indexFailurePoint",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The item index for where the item was found</p>\n"
          },
          {
            "id": "failurePointerIndent",
            "type": {
              "uid": "System.Nullable{System.Int32}",
              "definition": "System.Nullable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">int</a>?"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">Integer</a>?"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The number of spaces needed to indent the failure pointer</p>\n"
          },
          {
            "id": "collection",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The collection</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "ForCollectionFilterMatched",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
        "startLine": 35,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit.Sdk",
      "example": [],
      "overload": {
        "uid": "Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForCollectionFilterMatched"
          },
          {
            "lang": "vb",
            "value": "ForCollectionFilterMatched"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "DoesNotContainException.ForCollectionFilterMatched"
          },
          {
            "lang": "vb",
            "value": "DoesNotContainException.ForCollectionFilterMatched"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched"
          },
          {
            "lang": "vb",
            "value": "Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched*\" text=\"ForCollectionFilterMatched\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionFilterMatched*\" text=\"ForCollectionFilterMatched\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Creates a new instance of the <xref href=\"Xunit.Sdk.DoesNotContainException\" data-throw-if-not-resolved=\"false\"></xref> class to be thrown\nwhen the requested filter matches an item in the collection.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Sdk.DoesNotContainException.ForCollectionItemFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.DoesNotContainException",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForCollectionItemFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "ForCollectionItemFound(String, Integer, Integer?, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "DoesNotContainException.ForCollectionItemFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContainException.ForCollectionItemFound(String, Integer, Integer?, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.DoesNotContainException.ForCollectionItemFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.DoesNotContainException.ForCollectionItemFound(String, Integer, Integer?, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionItemFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForCollectionItemFound(string, int, int?, string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionItemFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForCollectionItemFound(string, int, int?, string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static DoesNotContainException ForCollectionItemFound(string item, int indexFailurePoint, int? failurePointerIndent, string collection)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ForCollectionItemFound(item As String, indexFailurePoint As Integer, failurePointerIndent As Integer?, collection As String) As DoesNotContainException"
          }
        ],
        "parameters": [
          {
            "id": "item",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The item that was found in the collection</p>\n"
          },
          {
            "id": "indexFailurePoint",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The item index for where the item was found</p>\n"
          },
          {
            "id": "failurePointerIndent",
            "type": {
              "uid": "System.Nullable{System.Int32}",
              "definition": "System.Nullable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">int</a>?"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">Integer</a>?"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The number of spaces needed to indent the failure pointer</p>\n"
          },
          {
            "id": "collection",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The collection</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "ForCollectionItemFound",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
        "startLine": 60,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit.Sdk",
      "example": [],
      "overload": {
        "uid": "Xunit.Sdk.DoesNotContainException.ForCollectionItemFound*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForCollectionItemFound"
          },
          {
            "lang": "vb",
            "value": "ForCollectionItemFound"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "DoesNotContainException.ForCollectionItemFound"
          },
          {
            "lang": "vb",
            "value": "DoesNotContainException.ForCollectionItemFound"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Sdk.DoesNotContainException.ForCollectionItemFound"
          },
          {
            "lang": "vb",
            "value": "Xunit.Sdk.DoesNotContainException.ForCollectionItemFound"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionItemFound*\" text=\"ForCollectionItemFound\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForCollectionItemFound*\" text=\"ForCollectionItemFound\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Creates a new instance of the <xref href=\"Xunit.Sdk.DoesNotContainException\" data-throw-if-not-resolved=\"false\"></xref> class to be thrown\nwhen the requested item was found in the collection.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Sdk.DoesNotContainException.ForKeyFound(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.DoesNotContainException",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForKeyFound(string, string)"
        },
        {
          "lang": "vb",
          "value": "ForKeyFound(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "DoesNotContainException.ForKeyFound(string, string)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContainException.ForKeyFound(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.DoesNotContainException.ForKeyFound(string, string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.DoesNotContainException.ForKeyFound(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForKeyFound(System.String,System.String)\" text=\"ForKeyFound(string, string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForKeyFound(System.String,System.String)\" text=\"ForKeyFound(string, string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static DoesNotContainException ForKeyFound(string expectedKey, string keys)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ForKeyFound(expectedKey As String, keys As String) As DoesNotContainException"
          }
        ],
        "parameters": [
          {
            "id": "expectedKey",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The expected key value</p>\n"
          },
          {
            "id": "keys",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The dictionary keys</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "ForKeyFound",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
        "startLine": 85,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit.Sdk",
      "example": [],
      "overload": {
        "uid": "Xunit.Sdk.DoesNotContainException.ForKeyFound*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForKeyFound"
          },
          {
            "lang": "vb",
            "value": "ForKeyFound"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "DoesNotContainException.ForKeyFound"
          },
          {
            "lang": "vb",
            "value": "DoesNotContainException.ForKeyFound"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Sdk.DoesNotContainException.ForKeyFound"
          },
          {
            "lang": "vb",
            "value": "Xunit.Sdk.DoesNotContainException.ForKeyFound"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForKeyFound*\" text=\"ForKeyFound\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForKeyFound*\" text=\"ForKeyFound\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Creates a new instance of the <xref href=\"Xunit.Sdk.DoesNotContainException\" data-throw-if-not-resolved=\"false\"></xref> class to be thrown\nwhen the requested key was found in the dictionary.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Sdk.DoesNotContainException.ForSetItemFound(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.DoesNotContainException",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForSetItemFound(string, string)"
        },
        {
          "lang": "vb",
          "value": "ForSetItemFound(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "DoesNotContainException.ForSetItemFound(string, string)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContainException.ForSetItemFound(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.DoesNotContainException.ForSetItemFound(string, string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.DoesNotContainException.ForSetItemFound(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSetItemFound(System.String,System.String)\" text=\"ForSetItemFound(string, string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSetItemFound(System.String,System.String)\" text=\"ForSetItemFound(string, string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static DoesNotContainException ForSetItemFound(string item, string set)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ForSetItemFound(item As String, [set] As String) As DoesNotContainException"
          }
        ],
        "parameters": [
          {
            "id": "item",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The item that was found in the collection</p>\n"
          },
          {
            "id": "set",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The set</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "ForSetItemFound",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
        "startLine": 105,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit.Sdk",
      "example": [],
      "overload": {
        "uid": "Xunit.Sdk.DoesNotContainException.ForSetItemFound*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForSetItemFound"
          },
          {
            "lang": "vb",
            "value": "ForSetItemFound"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "DoesNotContainException.ForSetItemFound"
          },
          {
            "lang": "vb",
            "value": "DoesNotContainException.ForSetItemFound"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Sdk.DoesNotContainException.ForSetItemFound"
          },
          {
            "lang": "vb",
            "value": "Xunit.Sdk.DoesNotContainException.ForSetItemFound"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSetItemFound*\" text=\"ForSetItemFound\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSetItemFound*\" text=\"ForSetItemFound\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Creates a new instance of the <xref href=\"Xunit.Sdk.DoesNotContainException\" data-throw-if-not-resolved=\"false\"></xref> class to be thrown\nwhen the requested item was found in the set.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Sdk.DoesNotContainException.ForSubMemoryFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.DoesNotContainException",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForSubMemoryFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "ForSubMemoryFound(String, Integer, Integer?, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "DoesNotContainException.ForSubMemoryFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContainException.ForSubMemoryFound(String, Integer, Integer?, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.DoesNotContainException.ForSubMemoryFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.DoesNotContainException.ForSubMemoryFound(String, Integer, Integer?, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubMemoryFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForSubMemoryFound(string, int, int?, string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubMemoryFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForSubMemoryFound(string, int, int?, string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static DoesNotContainException ForSubMemoryFound(string expectedSubMemory, int indexFailurePoint, int? failurePointerIndent, string memory)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ForSubMemoryFound(expectedSubMemory As String, indexFailurePoint As Integer, failurePointerIndent As Integer?, memory As String) As DoesNotContainException"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubMemory",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The expected sub-memory</p>\n"
          },
          {
            "id": "indexFailurePoint",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The item index for where the item was found</p>\n"
          },
          {
            "id": "failurePointerIndent",
            "type": {
              "uid": "System.Nullable{System.Int32}",
              "definition": "System.Nullable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">int</a>?"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">Integer</a>?"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The number of spaces needed to indent the failure pointer</p>\n"
          },
          {
            "id": "memory",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The memory</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "ForSubMemoryFound",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
        "startLine": 127,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit.Sdk",
      "example": [],
      "overload": {
        "uid": "Xunit.Sdk.DoesNotContainException.ForSubMemoryFound*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForSubMemoryFound"
          },
          {
            "lang": "vb",
            "value": "ForSubMemoryFound"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "DoesNotContainException.ForSubMemoryFound"
          },
          {
            "lang": "vb",
            "value": "DoesNotContainException.ForSubMemoryFound"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Sdk.DoesNotContainException.ForSubMemoryFound"
          },
          {
            "lang": "vb",
            "value": "Xunit.Sdk.DoesNotContainException.ForSubMemoryFound"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubMemoryFound*\" text=\"ForSubMemoryFound\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubMemoryFound*\" text=\"ForSubMemoryFound\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Creates a new instance of the <xref href=\"Xunit.Sdk.DoesNotContainException\" data-throw-if-not-resolved=\"false\"></xref> class to be thrown\nwhen the requested sub-memory was found in the memory.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Sdk.DoesNotContainException.ForSubSpanFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.DoesNotContainException",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForSubSpanFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "ForSubSpanFound(String, Integer, Integer?, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "DoesNotContainException.ForSubSpanFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContainException.ForSubSpanFound(String, Integer, Integer?, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.DoesNotContainException.ForSubSpanFound(string, int, int?, string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.DoesNotContainException.ForSubSpanFound(String, Integer, Integer?, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubSpanFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForSubSpanFound(string, int, int?, string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubSpanFound(System.String,System.Int32,System.Nullable{System.Int32},System.String)\" text=\"ForSubSpanFound(string, int, int?, string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static DoesNotContainException ForSubSpanFound(string expectedSubSpan, int indexFailurePoint, int? failurePointerIndent, string span)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ForSubSpanFound(expectedSubSpan As String, indexFailurePoint As Integer, failurePointerIndent As Integer?, span As String) As DoesNotContainException"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubSpan",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The expected sub-span</p>\n"
          },
          {
            "id": "indexFailurePoint",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The item index for where the item was found</p>\n"
          },
          {
            "id": "failurePointerIndent",
            "type": {
              "uid": "System.Nullable{System.Int32}",
              "definition": "System.Nullable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int?"
                },
                {
                  "lang": "vb",
                  "value": "Integer?"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">int</a>?"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.int32\">Integer</a>?"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The number of spaces needed to indent the failure pointer</p>\n"
          },
          {
            "id": "span",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The span</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "ForSubSpanFound",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
        "startLine": 154,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit.Sdk",
      "example": [],
      "overload": {
        "uid": "Xunit.Sdk.DoesNotContainException.ForSubSpanFound*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForSubSpanFound"
          },
          {
            "lang": "vb",
            "value": "ForSubSpanFound"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "DoesNotContainException.ForSubSpanFound"
          },
          {
            "lang": "vb",
            "value": "DoesNotContainException.ForSubSpanFound"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Sdk.DoesNotContainException.ForSubSpanFound"
          },
          {
            "lang": "vb",
            "value": "Xunit.Sdk.DoesNotContainException.ForSubSpanFound"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubSpanFound*\" text=\"ForSubSpanFound\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubSpanFound*\" text=\"ForSubSpanFound\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Creates a new instance of the <xref href=\"Xunit.Sdk.DoesNotContainException\" data-throw-if-not-resolved=\"false\"></xref> class to be thrown\nwhen the requested sub-span was found in the span.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Sdk.DoesNotContainException.ForSubStringFound(System.String,System.Int32,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.DoesNotContainException",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForSubStringFound(string, int, string)"
        },
        {
          "lang": "vb",
          "value": "ForSubStringFound(String, Integer, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "DoesNotContainException.ForSubStringFound(string, int, string)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContainException.ForSubStringFound(String, Integer, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.DoesNotContainException.ForSubStringFound(string, int, string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.DoesNotContainException.ForSubStringFound(String, Integer, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubStringFound(System.String,System.Int32,System.String)\" text=\"ForSubStringFound(string, int, string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubStringFound(System.String,System.Int32,System.String)\" text=\"ForSubStringFound(string, int, string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static DoesNotContainException ForSubStringFound(string expectedSubString, int indexFailurePoint, string @string)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ForSubStringFound(expectedSubString As String, indexFailurePoint As Integer, [string] As String) As DoesNotContainException"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The expected sub-string</p>\n"
          },
          {
            "id": "indexFailurePoint",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The item index for where the item was found</p>\n"
          },
          {
            "id": "string",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">The string</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "id": "ForSubStringFound",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
        "startLine": 180,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit.Sdk",
      "example": [],
      "overload": {
        "uid": "Xunit.Sdk.DoesNotContainException.ForSubStringFound*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForSubStringFound"
          },
          {
            "lang": "vb",
            "value": "ForSubStringFound"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "DoesNotContainException.ForSubStringFound"
          },
          {
            "lang": "vb",
            "value": "DoesNotContainException.ForSubStringFound"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Sdk.DoesNotContainException.ForSubStringFound"
          },
          {
            "lang": "vb",
            "value": "Xunit.Sdk.DoesNotContainException.ForSubStringFound"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubStringFound*\" text=\"ForSubStringFound\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException.ForSubStringFound*\" text=\"ForSubStringFound\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Creates a new instance of the <xref href=\"Xunit.Sdk.DoesNotContainException\" data-throw-if-not-resolved=\"false\"></xref> class to be thrown\nwhen the requested sub-string was found in the string.</p>\n",
      "platform": null
    }
  ],
  "langs": [
    "csharp",
    "vb"
  ],
  "name": [
    {
      "lang": "csharp",
      "value": "DoesNotContainException"
    },
    {
      "lang": "vb",
      "value": "DoesNotContainException"
    }
  ],
  "nameWithType": [
    {
      "lang": "csharp",
      "value": "DoesNotContainException"
    },
    {
      "lang": "vb",
      "value": "DoesNotContainException"
    }
  ],
  "fullName": [
    {
      "lang": "csharp",
      "value": "Xunit.Sdk.DoesNotContainException"
    },
    {
      "lang": "vb",
      "value": "Xunit.Sdk.DoesNotContainException"
    }
  ],
  "type": "class",
  "source": {
    "id": "DoesNotContainException",
    "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\Sdk\\Exceptions\\DoesNotContainException.cs",
    "startLine": 20,
    "endLine": 0
  },
  "assemblies": [
    "xunit.v3.assert"
  ],
  "namespace": {
    "uid": "Xunit.Sdk",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit.Sdk"
      },
      {
        "lang": "vb",
        "value": "Xunit.Sdk"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit.Sdk"
      },
      {
        "lang": "vb",
        "value": "Xunit.Sdk"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit.Sdk"
      },
      {
        "lang": "vb",
        "value": "Xunit.Sdk"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Sdk.html\">Sdk</a>"
      },
      {
        "lang": "vb",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Sdk.html\">Sdk</a>"
      }
    ],
    "level": 0
  },
  "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml\" sourcestartlinenumber=\"1\">Exception thrown when Assert.DoesNotContain fails.</p>\n",
  "example": [],
  "syntax": {
    "content": [
      {
        "lang": "csharp",
        "value": "public class DoesNotContainException : XunitException, ISerializable, IAssertionException"
      },
      {
        "lang": "vb",
        "value": "Public Class DoesNotContainException Inherits XunitException Implements ISerializable, IAssertionException"
      }
    ]
  },
  "inheritance": [
    {
      "uid": "System.Object",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object",
      "name": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        }
      ],
      "level": 0,
      "index": 0
    },
    {
      "uid": "System.Exception",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception",
      "name": [
        {
          "lang": "csharp",
          "value": "Exception"
        },
        {
          "lang": "vb",
          "value": "Exception"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception"
        },
        {
          "lang": "vb",
          "value": "Exception"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception"
        },
        {
          "lang": "vb",
          "value": "System.Exception"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
        }
      ],
      "level": 0,
      "index": 1
    },
    {
      "uid": "Xunit.Sdk.XunitException",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk",
      "href": "Xunit.Sdk.XunitException.html",
      "name": [
        {
          "lang": "csharp",
          "value": "XunitException"
        },
        {
          "lang": "vb",
          "value": "XunitException"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "XunitException"
        },
        {
          "lang": "vb",
          "value": "XunitException"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.XunitException"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.XunitException"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.XunitException\" text=\"XunitException\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.XunitException\" text=\"XunitException\"/>"
        }
      ],
      "level": 0,
      "index": 2
    }
  ],
  "level": 3,
  "implements": [
    {
      "uid": "System.Runtime.Serialization.ISerializable",
      "name": [
        {
          "lang": "csharp",
          "value": "ISerializable"
        },
        {
          "lang": "vb",
          "value": "ISerializable"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ISerializable"
        },
        {
          "lang": "vb",
          "value": "ISerializable"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Runtime.Serialization.ISerializable"
        },
        {
          "lang": "vb",
          "value": "System.Runtime.Serialization.ISerializable"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Runtime.Serialization.ISerializable\" text=\"ISerializable\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Runtime.Serialization.ISerializable\" text=\"ISerializable\"/>"
        }
      ]
    },
    {
      "uid": "Xunit.Sdk.IAssertionException",
      "name": [
        {
          "lang": "csharp",
          "value": "IAssertionException"
        },
        {
          "lang": "vb",
          "value": "IAssertionException"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "IAssertionException"
        },
        {
          "lang": "vb",
          "value": "IAssertionException"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.IAssertionException"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.IAssertionException"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Sdk.IAssertionException\" text=\"IAssertionException\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Sdk.IAssertionException\" text=\"IAssertionException\"/>"
        }
      ]
    }
  ],
  "inheritedMembers": [
    {
      "uid": "Xunit.Sdk.XunitException.ToString",
      "isExtensionMethod": false,
      "parent": "Xunit.Sdk.XunitException",
      "href": "Xunit.Sdk.XunitException.html#Xunit_Sdk_XunitException_ToString",
      "name": [
        {
          "lang": "csharp",
          "value": "ToString()"
        },
        {
          "lang": "vb",
          "value": "ToString()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "XunitException.ToString()"
        },
        {
          "lang": "vb",
          "value": "XunitException.ToString()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Sdk.XunitException.ToString()"
        },
        {
          "lang": "vb",
          "value": "Xunit.Sdk.XunitException.ToString()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"Xunit.Sdk.XunitException.html#Xunit_Sdk_XunitException_ToString\">ToString</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"Xunit.Sdk.XunitException.html#Xunit_Sdk_XunitException_ToString\">ToString</a>()"
        }
      ],
      "level": 0,
      "summary": null,
      "type": "method",
      "platform": null,
      "isEii": false
    },
    {
      "uid": "System.Exception.GetBaseException",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception",
      "name": [
        {
          "lang": "csharp",
          "value": "GetBaseException()"
        },
        {
          "lang": "vb",
          "value": "GetBaseException()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.GetBaseException()"
        },
        {
          "lang": "vb",
          "value": "Exception.GetBaseException()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.GetBaseException()"
        },
        {
          "lang": "vb",
          "value": "System.Exception.GetBaseException()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception\">GetBaseException</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception\">GetBaseException</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata",
      "name": [
        {
          "lang": "csharp",
          "value": "GetObjectData(SerializationInfo, StreamingContext)"
        },
        {
          "lang": "vb",
          "value": "GetObjectData(SerializationInfo, StreamingContext)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.GetObjectData(SerializationInfo, StreamingContext)"
        },
        {
          "lang": "vb",
          "value": "Exception.GetObjectData(SerializationInfo, StreamingContext)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
        },
        {
          "lang": "vb",
          "value": "System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata\">GetObjectData</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo\">SerializationInfo</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext\">StreamingContext</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata\">GetObjectData</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo\">SerializationInfo</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext\">StreamingContext</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.GetType",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.gettype",
      "name": [
        {
          "lang": "csharp",
          "value": "GetType()"
        },
        {
          "lang": "vb",
          "value": "GetType()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.GetType()"
        },
        {
          "lang": "vb",
          "value": "Exception.GetType()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.GetType()"
        },
        {
          "lang": "vb",
          "value": "System.Exception.GetType()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception.gettype\">GetType</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception.gettype\">GetType</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.Data",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.data",
      "name": [
        {
          "lang": "csharp",
          "value": "Data"
        },
        {
          "lang": "vb",
          "value": "Data"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.Data"
        },
        {
          "lang": "vb",
          "value": "Exception.Data"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.Data"
        },
        {
          "lang": "vb",
          "value": "System.Exception.Data"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.Data\" text=\"Data\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.Data\" text=\"Data\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.HelpLink",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.helplink",
      "name": [
        {
          "lang": "csharp",
          "value": "HelpLink"
        },
        {
          "lang": "vb",
          "value": "HelpLink"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.HelpLink"
        },
        {
          "lang": "vb",
          "value": "Exception.HelpLink"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.HelpLink"
        },
        {
          "lang": "vb",
          "value": "System.Exception.HelpLink"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.HelpLink\" text=\"HelpLink\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.HelpLink\" text=\"HelpLink\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.HResult",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.hresult",
      "name": [
        {
          "lang": "csharp",
          "value": "HResult"
        },
        {
          "lang": "vb",
          "value": "HResult"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.HResult"
        },
        {
          "lang": "vb",
          "value": "Exception.HResult"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.HResult"
        },
        {
          "lang": "vb",
          "value": "System.Exception.HResult"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.HResult\" text=\"HResult\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.HResult\" text=\"HResult\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.InnerException",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.innerexception",
      "name": [
        {
          "lang": "csharp",
          "value": "InnerException"
        },
        {
          "lang": "vb",
          "value": "InnerException"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.InnerException"
        },
        {
          "lang": "vb",
          "value": "Exception.InnerException"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.InnerException"
        },
        {
          "lang": "vb",
          "value": "System.Exception.InnerException"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.InnerException\" text=\"InnerException\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.InnerException\" text=\"InnerException\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.Message",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.message",
      "name": [
        {
          "lang": "csharp",
          "value": "Message"
        },
        {
          "lang": "vb",
          "value": "Message"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.Message"
        },
        {
          "lang": "vb",
          "value": "Exception.Message"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.Message"
        },
        {
          "lang": "vb",
          "value": "System.Exception.Message"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.Message\" text=\"Message\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.Message\" text=\"Message\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.Source",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.source",
      "name": [
        {
          "lang": "csharp",
          "value": "Source"
        },
        {
          "lang": "vb",
          "value": "Source"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.Source"
        },
        {
          "lang": "vb",
          "value": "Exception.Source"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.Source"
        },
        {
          "lang": "vb",
          "value": "System.Exception.Source"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.Source\" text=\"Source\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.Source\" text=\"Source\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.StackTrace",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.stacktrace",
      "name": [
        {
          "lang": "csharp",
          "value": "StackTrace"
        },
        {
          "lang": "vb",
          "value": "StackTrace"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.StackTrace"
        },
        {
          "lang": "vb",
          "value": "Exception.StackTrace"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.StackTrace"
        },
        {
          "lang": "vb",
          "value": "System.Exception.StackTrace"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.StackTrace\" text=\"StackTrace\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.StackTrace\" text=\"StackTrace\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.TargetSite",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.targetsite",
      "name": [
        {
          "lang": "csharp",
          "value": "TargetSite"
        },
        {
          "lang": "vb",
          "value": "TargetSite"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.TargetSite"
        },
        {
          "lang": "vb",
          "value": "Exception.TargetSite"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.TargetSite"
        },
        {
          "lang": "vb",
          "value": "System.Exception.TargetSite"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.TargetSite\" text=\"TargetSite\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.TargetSite\" text=\"TargetSite\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Exception.SerializeObjectState",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Exception",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.exception.serializeobjectstate",
      "name": [
        {
          "lang": "csharp",
          "value": "SerializeObjectState"
        },
        {
          "lang": "vb",
          "value": "SerializeObjectState"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "Exception.SerializeObjectState"
        },
        {
          "lang": "vb",
          "value": "Exception.SerializeObjectState"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.Exception.SerializeObjectState"
        },
        {
          "lang": "vb",
          "value": "System.Exception.SerializeObjectState"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Exception.SerializeObjectState\" text=\"SerializeObjectState\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Exception.SerializeObjectState\" text=\"SerializeObjectState\"/>"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetHashCode",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gethashcode",
      "name": [
        {
          "lang": "csharp",
          "value": "GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "GetHashCode()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.MemberwiseClone",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone",
      "name": [
        {
          "lang": "csharp",
          "value": "MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "MemberwiseClone()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ReferenceEquals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.referenceequals",
      "name": [
        {
          "lang": "csharp",
          "value": "ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "ReferenceEquals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    }
  ],
  "_appName": "xunit-proto",
  "_appTitle": "xunit-proto",
  "_enableSearch": true,
  "pdf": false,
  "_systemKeys": [
    "uid",
    "isEii",
    "isExtensionMethod",
    "parent",
    "children",
    "href",
    "langs",
    "name",
    "nameWithType",
    "fullName",
    "type",
    "source",
    "documentation",
    "assemblies",
    "namespace",
    "summary",
    "remarks",
    "example",
    "syntax",
    "overridden",
    "overload",
    "exceptions",
    "seealso",
    "see",
    "inheritance",
    "derivedClasses",
    "level",
    "implements",
    "inheritedMembers",
    "extensionMethods",
    "conceptual",
    "platform",
    "attributes",
    "additionalNotes"
  ],
  "_key": "v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../toc.html",
  "_path": "v3-2.0.0/assert/Xunit.Sdk.DoesNotContainException.html",
  "_rel": "../../",
  "_tocKey": "~/v3-2.0.0/assert/toc.yml",
  "_tocPath": "v3-2.0.0/assert/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}