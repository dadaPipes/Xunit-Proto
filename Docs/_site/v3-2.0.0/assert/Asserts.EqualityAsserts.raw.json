{
  "uid": "Asserts.EqualityAsserts",
  "isEii": false,
  "isExtensionMethod": false,
  "parent": {
    "uid": "Asserts",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Asserts.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      }
    ],
    "level": 0
  },
  "children": [
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.DateTime,System.DateTime)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(DateTime, DateTime)"
        },
        {
          "lang": "vb",
          "value": "Equal(Date, Date)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(DateTime, DateTime)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Date, Date)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(System.DateTime, System.DateTime)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Date, Date)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTime,System.DateTime)\" text=\"Equal(DateTime, DateTime)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTime,System.DateTime)\" text=\"Equal(DateTime, DateTime)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(DateTime expected, DateTime actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Date, actual As Date)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.DateTime",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.DateTime",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 470,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> values are equal.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.DateTime,System.DateTime,System.TimeSpan)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(DateTime, DateTime, TimeSpan)"
        },
        {
          "lang": "vb",
          "value": "Equal(Date, Date, TimeSpan)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(DateTime, DateTime, TimeSpan)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Date, Date, TimeSpan)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(System.DateTime, System.DateTime, System.TimeSpan)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Date, Date, System.TimeSpan)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTime,System.DateTime,System.TimeSpan)\" text=\"Equal(DateTime, DateTime, TimeSpan)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTime,System.DateTime,System.TimeSpan)\" text=\"Equal(DateTime, DateTime, TimeSpan)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(DateTime expected, DateTime actual, TimeSpan precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Date, actual As Date, precision As TimeSpan)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.DateTime",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.DateTime",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTime"
                },
                {
                  "lang": "vb",
                  "value": "Date"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTime\" text=\"DateTime\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.TimeSpan",
              "name": [
                {
                  "lang": "csharp",
                  "value": "TimeSpan"
                },
                {
                  "lang": "vb",
                  "value": "TimeSpan"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "TimeSpan"
                },
                {
                  "lang": "vb",
                  "value": "TimeSpan"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.TimeSpan"
                },
                {
                  "lang": "vb",
                  "value": "System.TimeSpan"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.TimeSpan\" text=\"TimeSpan\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.TimeSpan\" text=\"TimeSpan\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The allowed difference in time where the two dates are considered equal</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 482,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the precision\ngiven by <code class=\"paramref\">precision</code>.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.DateTimeOffset,System.DateTimeOffset)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(DateTimeOffset, DateTimeOffset)"
        },
        {
          "lang": "vb",
          "value": "Equal(DateTimeOffset, DateTimeOffset)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(DateTimeOffset, DateTimeOffset)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(DateTimeOffset, DateTimeOffset)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(System.DateTimeOffset, System.DateTimeOffset)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(System.DateTimeOffset, System.DateTimeOffset)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTimeOffset,System.DateTimeOffset)\" text=\"Equal(DateTimeOffset, DateTimeOffset)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTimeOffset,System.DateTimeOffset)\" text=\"Equal(DateTimeOffset, DateTimeOffset)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(DateTimeOffset expected, DateTimeOffset actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As DateTimeOffset, actual As DateTimeOffset)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.DateTimeOffset",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "System.DateTimeOffset"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.DateTimeOffset",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "System.DateTimeOffset"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 504,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> values are equal.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(DateTimeOffset, DateTimeOffset, TimeSpan)"
        },
        {
          "lang": "vb",
          "value": "Equal(DateTimeOffset, DateTimeOffset, TimeSpan)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(DateTimeOffset, DateTimeOffset, TimeSpan)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(DateTimeOffset, DateTimeOffset, TimeSpan)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(System.DateTimeOffset, System.DateTimeOffset, System.TimeSpan)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(System.DateTimeOffset, System.DateTimeOffset, System.TimeSpan)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)\" text=\"Equal(DateTimeOffset, DateTimeOffset, TimeSpan)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)\" text=\"Equal(DateTimeOffset, DateTimeOffset, TimeSpan)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(DateTimeOffset expected, DateTimeOffset actual, TimeSpan precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As DateTimeOffset, actual As DateTimeOffset, precision As TimeSpan)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.DateTimeOffset",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "System.DateTimeOffset"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.DateTimeOffset",
              "name": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "DateTimeOffset"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.DateTimeOffset"
                },
                {
                  "lang": "vb",
                  "value": "System.DateTimeOffset"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.DateTimeOffset\" text=\"DateTimeOffset\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.TimeSpan",
              "name": [
                {
                  "lang": "csharp",
                  "value": "TimeSpan"
                },
                {
                  "lang": "vb",
                  "value": "TimeSpan"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "TimeSpan"
                },
                {
                  "lang": "vb",
                  "value": "TimeSpan"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.TimeSpan"
                },
                {
                  "lang": "vb",
                  "value": "System.TimeSpan"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.TimeSpan\" text=\"TimeSpan\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.TimeSpan\" text=\"TimeSpan\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The allowed difference in time where the two dates are considered equal</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 516,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the precision\ngiven by <code class=\"paramref\">precision</code>.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.Decimal,System.Decimal,System.Int32)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(decimal, decimal, int)"
        },
        {
          "lang": "vb",
          "value": "Equal(Decimal, Decimal, Integer)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(decimal, decimal, int)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Decimal, Decimal, Integer)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(decimal, decimal, int)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Decimal, Decimal, Integer)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Decimal,System.Decimal,System.Int32)\" text=\"Equal(decimal, decimal, int)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Decimal,System.Decimal,System.Int32)\" text=\"Equal(decimal, decimal, int)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(decimal expected, decimal actual, int precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Decimal, actual As Decimal, precision As Integer)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Decimal",
              "name": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Decimal",
              "name": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-28)</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 450,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>. The values are rounded before comparison.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Double)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(double, double, double)"
        },
        {
          "lang": "vb",
          "value": "Equal(Double, Double, Double)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(double, double, double)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Double, Double, Double)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(double, double, double)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Double, Double, Double)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Double)\" text=\"Equal(double, double, double)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Double)\" text=\"Equal(double, double, double)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(double expected, double actual, double tolerance)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Double, actual As Double, tolerance As Double)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "tolerance",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The allowed difference between values</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 355,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the tolerance given by\n<code class=\"paramref\">tolerance</code> (positive or negative).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Int32)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(double, double, int)"
        },
        {
          "lang": "vb",
          "value": "Equal(Double, Double, Integer)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(double, double, int)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Double, Double, Integer)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(double, double, int)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Double, Double, Integer)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Int32)\" text=\"Equal(double, double, int)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Int32)\" text=\"Equal(double, double, int)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(double expected, double actual, int precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Double, actual As Double, precision As Integer)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 306,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>. The values are rounded before comparison.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Int32,System.MidpointRounding)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(double, double, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "Equal(Double, Double, Integer, MidpointRounding)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(double, double, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Double, Double, Integer, MidpointRounding)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(double, double, int, System.MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Double, Double, Integer, System.MidpointRounding)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Int32,System.MidpointRounding)\" text=\"Equal(double, double, int, MidpointRounding)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Double,System.Double,System.Int32,System.MidpointRounding)\" text=\"Equal(double, double, int, MidpointRounding)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(double expected, double actual, int precision, MidpointRounding rounding)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Double, actual As Double, precision As Integer, rounding As MidpointRounding)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          },
          {
            "id": "rounding",
            "type": {
              "uid": "System.MidpointRounding",
              "name": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "System.MidpointRounding"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Rounding method to use to process a number that is midway between two numbers</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 331,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>. The values are rounded before comparison.\nThe rounding method to use is given by <code class=\"paramref\">rounding</code></p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Int32)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(float, float, int)"
        },
        {
          "lang": "vb",
          "value": "Equal(Single, Single, Integer)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(float, float, int)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Single, Single, Integer)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(float, float, int)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Single, Single, Integer)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Int32)\" text=\"Equal(float, float, int)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Int32)\" text=\"Equal(float, float, int)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(float expected, float actual, int precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Single, actual As Single, precision As Integer)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 378,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>. The values are rounded before comparison.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Int32,System.MidpointRounding)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(float, float, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "Equal(Single, Single, Integer, MidpointRounding)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(float, float, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Single, Single, Integer, MidpointRounding)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(float, float, int, System.MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Single, Single, Integer, System.MidpointRounding)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Int32,System.MidpointRounding)\" text=\"Equal(float, float, int, MidpointRounding)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Int32,System.MidpointRounding)\" text=\"Equal(float, float, int, MidpointRounding)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(float expected, float actual, int precision, MidpointRounding rounding)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Single, actual As Single, precision As Integer, rounding As MidpointRounding)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          },
          {
            "id": "rounding",
            "type": {
              "uid": "System.MidpointRounding",
              "name": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "System.MidpointRounding"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Rounding method to use to process a number that is midway between two numbers</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 403,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>. The values are rounded before comparison.\nThe rounding method to use is given by <code class=\"paramref\">rounding</code></p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Single)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(float, float, float)"
        },
        {
          "lang": "vb",
          "value": "Equal(Single, Single, Single)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal(float, float, float)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Single, Single, Single)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal(float, float, float)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Single, Single, Single)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Single)\" text=\"Equal(float, float, float)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal(System.Single,System.Single,System.Single)\" text=\"Equal(float, float, float)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(float expected, float actual, float tolerance)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Single, actual As Single, tolerance As Single)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "tolerance",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The allowed difference between values</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 427,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are equal, within the tolerance given by\n<code class=\"paramref\">tolerance</code> (positive or negative).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal``1(``0,``0)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "Equal(Of T)(T, T)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Of T)(T, T)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Of T)(T, T)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0,``0)\" text=\"Equal&lt;T&gt;(T, T)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0,``0)\" text=\"Equal&lt;T&gt;(T, T)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal<T>(T expected, T actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(Of T)(expected As T, actual As T)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 75,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are equal, using a default comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal<T>(T, T, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Of T)(T, T, IEqualityComparer(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal<T>(T, T, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Of T)(T, T, IEqualityComparer(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal<T>(T, T, System.Collections.Generic.IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Of T)(T, T, System.Collections.Generic.IEqualityComparer(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})\" text=\"Equal&lt;T&gt;(T, T, IEqualityComparer&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})\" text=\"Equal&lt;T&gt;(T, T, IEqualityComparer&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal<T>(T expected, T actual, IEqualityComparer<T> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(Of T)(expected As T, actual As T, comparer As IEqualityComparer(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Collections.Generic.IEqualityComparer{{T}}",
              "definition": "System.Collections.Generic.IEqualityComparer`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEqualityComparer(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to compare the two objects</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 110,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are equal, using a custom equatable comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal``1(``0,``0,System.Func{``0,``0,System.Boolean})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal<T>(T, T, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Of T)(T, T, Func(Of T, T, Boolean))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal<T>(T, T, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Of T)(T, T, Func(Of T, T, Boolean))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal<T>(T, T, System.Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Of T)(T, T, System.Func(Of T, T, Boolean))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0,``0,System.Func{``0,``0,System.Boolean})\" text=\"Equal&lt;T&gt;(T, T, Func&lt;T, T, bool&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0,``0,System.Func{``0,``0,System.Boolean})\" text=\"Equal&lt;T&gt;(T, T, Func&lt;T, T, bool&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal<T>(T expected, T actual, Func<T, T, bool> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(Of T)(expected As T, actual As T, comparer As Func(Of T, T, Boolean))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Func{{T},{T},System.Boolean}",
              "definition": "System.Func`3",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T, T, Boolean)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>&lt;T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">bool</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>(Of T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">Boolean</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to compare the two objects</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 92,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are equal, using a custom comparer function.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.Equal``1(``0[],``0[])",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal<T>(T[], T[])"
        },
        {
          "lang": "vb",
          "value": "Equal(Of T)(T(), T())"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.Equal<T>(T[], T[])"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.Equal(Of T)(T(), T())"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.Equal<T>(T[], T[])"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.Equal(Of T)(T(), T())"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0[],``0[])\" text=\"Equal&lt;T&gt;(T[], T[])\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.Equal``1(``0[],``0[])\" text=\"Equal&lt;T&gt;(T[], T[])\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal<T>(T[] expected, T[] actual) where T : unmanaged, IEquatable<T>"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(Of T As {Structure, IEquatable(Of T)})(expected As T(), actual As T())"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}[]",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}[]",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of items whose arrays are to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 49,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">If <xref href=\"System.MemoryExtensions.SequenceEqual%60%601(System.Span%7b%60%600%7d%2cSystem.ReadOnlySpan%7b%60%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> fails, a call\nto Assert.Equal&lt;T&gt;(T, T) is made, to provide a more meaningful error message.</p>\n",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two arrays of un-managed type T are equal, using Span&lt;T&gt;.SequenceEqual.\nThis can be significantly faster than generic enumerables, when the collections are actually\nequal, because the system can optimize packed-memory comparisons for value type arrays.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual(System.Decimal,System.Decimal,System.Int32)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual(decimal, decimal, int)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Decimal, Decimal, Integer)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual(decimal, decimal, int)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Decimal, Decimal, Integer)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual(decimal, decimal, int)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Decimal, Decimal, Integer)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Decimal,System.Decimal,System.Int32)\" text=\"NotEqual(decimal, decimal, int)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Decimal,System.Decimal,System.Int32)\" text=\"NotEqual(decimal, decimal, int)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual(decimal expected, decimal actual, int precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(expected As Decimal, actual As Decimal, precision As Integer)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Decimal",
              "name": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Decimal",
              "name": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "decimal"
                },
                {
                  "lang": "vb",
                  "value": "Decimal"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Decimal\" text=\"decimal\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-28)</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 925,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> values are not equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Double)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual(double, double, double)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Double, Double, Double)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual(double, double, double)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Double, Double, Double)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual(double, double, double)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Double, Double, Double)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Double)\" text=\"NotEqual(double, double, double)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Double)\" text=\"NotEqual(double, double, double)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual(double expected, double actual, double tolerance)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(expected As Double, actual As Double, tolerance As Double)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "tolerance",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The allowed difference between values</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 830,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values are not equal, within the tolerance given by\n<code class=\"paramref\">tolerance</code> (positive or negative).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Int32)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual(double, double, int)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Double, Double, Integer)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual(double, double, int)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Double, Double, Integer)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual(double, double, int)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Double, Double, Integer)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Int32)\" text=\"NotEqual(double, double, int)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Int32)\" text=\"NotEqual(double, double, int)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual(double expected, double actual, int precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(expected As Double, actual As Double, precision As Integer)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 781,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values are not equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Int32,System.MidpointRounding)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual(double, double, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Double, Double, Integer, MidpointRounding)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual(double, double, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Double, Double, Integer, MidpointRounding)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual(double, double, int, System.MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Double, Double, Integer, System.MidpointRounding)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Int32,System.MidpointRounding)\" text=\"NotEqual(double, double, int, MidpointRounding)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Double,System.Double,System.Int32,System.MidpointRounding)\" text=\"NotEqual(double, double, int, MidpointRounding)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual(double expected, double actual, int precision, MidpointRounding rounding)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(expected As Double, actual As Double, precision As Integer, rounding As MidpointRounding)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Double",
              "name": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "double"
                },
                {
                  "lang": "vb",
                  "value": "Double"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Double\" text=\"double\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          },
          {
            "id": "rounding",
            "type": {
              "uid": "System.MidpointRounding",
              "name": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "System.MidpointRounding"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Rounding method to use to process a number that is midway between two numbers</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 806,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values are not equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>. The values are rounded before comparison.\nThe rounding method to use is given by <code class=\"paramref\">rounding</code></p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Int32)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual(float, float, int)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Single, Single, Integer)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual(float, float, int)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Single, Single, Integer)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual(float, float, int)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Single, Single, Integer)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Int32)\" text=\"NotEqual(float, float, int)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Int32)\" text=\"NotEqual(float, float, int)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual(float expected, float actual, int precision)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(expected As Single, actual As Single, precision As Integer)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 853,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are not equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Int32,System.MidpointRounding)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual(float, float, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Single, Single, Integer, MidpointRounding)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual(float, float, int, MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Single, Single, Integer, MidpointRounding)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual(float, float, int, System.MidpointRounding)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Single, Single, Integer, System.MidpointRounding)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Int32,System.MidpointRounding)\" text=\"NotEqual(float, float, int, MidpointRounding)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Int32,System.MidpointRounding)\" text=\"NotEqual(float, float, int, MidpointRounding)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual(float expected, float actual, int precision, MidpointRounding rounding)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(expected As Single, actual As Single, precision As Integer, rounding As MidpointRounding)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "precision",
            "type": {
              "uid": "System.Int32",
              "name": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "int"
                },
                {
                  "lang": "vb",
                  "value": "Integer"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Int32\" text=\"int\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The number of decimal places (valid values: 0-15)</p>\n"
          },
          {
            "id": "rounding",
            "type": {
              "uid": "System.MidpointRounding",
              "name": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "MidpointRounding"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.MidpointRounding"
                },
                {
                  "lang": "vb",
                  "value": "System.MidpointRounding"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.MidpointRounding\" text=\"MidpointRounding\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Rounding method to use to process a number that is midway between two numbers</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 878,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are not equal, within the number of decimal\nplaces given by <code class=\"paramref\">precision</code>. The values are rounded before comparison.\nThe rounding method to use is given by <code class=\"paramref\">rounding</code></p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Single)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual(float, float, float)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Single, Single, Single)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual(float, float, float)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Single, Single, Single)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual(float, float, float)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Single, Single, Single)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Single)\" text=\"NotEqual(float, float, float)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual(System.Single,System.Single,System.Single)\" text=\"NotEqual(float, float, float)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual(float expected, float actual, float tolerance)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(expected As Single, actual As Single, tolerance As Single)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          },
          {
            "id": "tolerance",
            "type": {
              "uid": "System.Single",
              "name": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "float"
                },
                {
                  "lang": "vb",
                  "value": "Single"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Single\" text=\"float\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The allowed difference between values</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 902,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are not equal, within the tolerance given by\n<code class=\"paramref\">tolerance</code> (positive or negative).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual``1(``0,``0)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Of T)(T, T)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Of T)(T, T)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Of T)(T, T)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0,``0)\" text=\"NotEqual&lt;T&gt;(T, T)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0,``0)\" text=\"NotEqual&lt;T&gt;(T, T)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual<T>(T expected, T actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(Of T)(expected As T, actual As T)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected object</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The actual object</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 565,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are not equal, using a default comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual<T>(T, T, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Of T)(T, T, IEqualityComparer(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual<T>(T, T, IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Of T)(T, T, IEqualityComparer(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual<T>(T, T, System.Collections.Generic.IEqualityComparer<T>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Of T)(T, T, System.Collections.Generic.IEqualityComparer(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})\" text=\"NotEqual&lt;T&gt;(T, T, IEqualityComparer&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})\" text=\"NotEqual&lt;T&gt;(T, T, IEqualityComparer&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual<T>(T expected, T actual, IEqualityComparer<T> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(Of T)(expected As T, actual As T, comparer As IEqualityComparer(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected object</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The actual object</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Collections.Generic.IEqualityComparer{{T}}",
              "definition": "System.Collections.Generic.IEqualityComparer`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEqualityComparer(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEqualityComparer<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEqualityComparer(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1\">IEqualityComparer</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to examine the objects</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 600,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are not equal, using a custom equality comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual``1(``0,``0,System.Func{``0,``0,System.Boolean})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual<T>(T, T, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Of T)(T, T, Func(Of T, T, Boolean))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual<T>(T, T, Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Of T)(T, T, Func(Of T, T, Boolean))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual<T>(T, T, System.Func<T, T, bool>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Of T)(T, T, System.Func(Of T, T, Boolean))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0,``0,System.Func{``0,``0,System.Boolean})\" text=\"NotEqual&lt;T&gt;(T, T, Func&lt;T, T, bool&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0,``0,System.Func{``0,``0,System.Boolean})\" text=\"NotEqual&lt;T&gt;(T, T, Func&lt;T, T, bool&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual<T>(T expected, T actual, Func<T, T, bool> comparer)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(Of T)(expected As T, actual As T, comparer As Func(Of T, T, Boolean))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected object</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The actual object</p>\n"
          },
          {
            "id": "comparer",
            "type": {
              "uid": "System.Func{{T},{T},System.Boolean}",
              "definition": "System.Func`3",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T, T, Boolean)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T, T, bool>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T, T, Boolean)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>&lt;T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">bool</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-3\">Func</a>(Of T, T, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.boolean\">Boolean</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The comparer used to examine the objects</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 582,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are not equal, using a custom equality comparer function.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotEqual``1(``0[],``0[])",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotEqual<T>(T[], T[])"
        },
        {
          "lang": "vb",
          "value": "NotEqual(Of T)(T(), T())"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotEqual<T>(T[], T[])"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotEqual(Of T)(T(), T())"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotEqual<T>(T[], T[])"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotEqual(Of T)(T(), T())"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0[],``0[])\" text=\"NotEqual&lt;T&gt;(T[], T[])\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual``1(``0[],``0[])\" text=\"NotEqual&lt;T&gt;(T[], T[])\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotEqual<T>(T[] expected, T[] actual) where T : unmanaged, IEquatable<T>"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotEqual(Of T As {Structure, IEquatable(Of T)})(expected As T(), actual As T())"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}[]",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}[]",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "T[]"
                },
                {
                  "lang": "vb",
                  "value": "T()"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of items whose arrays are to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 539,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotEqual"
          },
          {
            "lang": "vb",
            "value": "NotEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotEqual*\" text=\"NotEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two arrays of un-managed type T are not equal, using Span&lt;T&gt;.SequenceEqual.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.NotStrictEqual``1(``0,``0)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "NotStrictEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "NotStrictEqual(Of T)(T, T)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.NotStrictEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.NotStrictEqual(Of T)(T, T)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.NotStrictEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.NotStrictEqual(Of T)(T, T)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotStrictEqual``1(``0,``0)\" text=\"NotStrictEqual&lt;T&gt;(T, T)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.NotStrictEqual``1(``0,``0)\" text=\"NotStrictEqual&lt;T&gt;(T, T)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void NotStrictEqual<T>(T expected, T actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub NotStrictEqual(Of T)(expected As T, actual As T)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected object</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The actual object</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "NotStrictEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 946,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.NotStrictEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "NotStrictEqual"
          },
          {
            "lang": "vb",
            "value": "NotStrictEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.NotStrictEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.NotStrictEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.NotStrictEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.NotStrictEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotStrictEqual*\" text=\"NotStrictEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.NotStrictEqual*\" text=\"NotStrictEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are strictly not equal, using the type's default comparer.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.EqualityAsserts.StrictEqual``1(``0,``0)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.EqualityAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StrictEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "StrictEqual(Of T)(T, T)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EqualityAsserts.StrictEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "EqualityAsserts.StrictEqual(Of T)(T, T)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.EqualityAsserts.StrictEqual<T>(T, T)"
        },
        {
          "lang": "vb",
          "value": "Asserts.EqualityAsserts.StrictEqual(Of T)(T, T)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.EqualityAsserts.StrictEqual``1(``0,``0)\" text=\"StrictEqual&lt;T&gt;(T, T)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.EqualityAsserts.StrictEqual``1(``0,``0)\" text=\"StrictEqual&lt;T&gt;(T, T)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StrictEqual<T>(T expected, T actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StrictEqual(Of T)(expected As T, actual As T)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The expected value</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The value to be compared against</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">The type of the objects to be compared</p>\n"
          }
        ]
      },
      "source": {
        "id": "StrictEqual",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
        "startLine": 970,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.EqualityAsserts.StrictEqual*",
        "name": [
          {
            "lang": "csharp",
            "value": "StrictEqual"
          },
          {
            "lang": "vb",
            "value": "StrictEqual"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EqualityAsserts.StrictEqual"
          },
          {
            "lang": "vb",
            "value": "EqualityAsserts.StrictEqual"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.EqualityAsserts.StrictEqual"
          },
          {
            "lang": "vb",
            "value": "Asserts.EqualityAsserts.StrictEqual"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.EqualityAsserts.StrictEqual*\" text=\"StrictEqual\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.EqualityAsserts.StrictEqual*\" text=\"StrictEqual\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.EqualityAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two objects are strictly equal, using the type's default comparer.</p>\n",
      "platform": null
    }
  ],
  "langs": [
    "csharp",
    "vb"
  ],
  "name": [
    {
      "lang": "csharp",
      "value": "EqualityAsserts"
    },
    {
      "lang": "vb",
      "value": "EqualityAsserts"
    }
  ],
  "nameWithType": [
    {
      "lang": "csharp",
      "value": "EqualityAsserts"
    },
    {
      "lang": "vb",
      "value": "EqualityAsserts"
    }
  ],
  "fullName": [
    {
      "lang": "csharp",
      "value": "Asserts.EqualityAsserts"
    },
    {
      "lang": "vb",
      "value": "Asserts.EqualityAsserts"
    }
  ],
  "type": "class",
  "source": {
    "id": "EqualityAsserts",
    "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\EqualityAsserts.cs",
    "startLine": 29,
    "endLine": 0
  },
  "assemblies": [
    "xunit.v3.assert"
  ],
  "namespace": {
    "uid": "Asserts",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Asserts.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      }
    ],
    "level": 0
  },
  "syntax": {
    "content": [
      {
        "lang": "csharp",
        "value": "public class EqualityAsserts"
      },
      {
        "lang": "vb",
        "value": "Public Class EqualityAsserts"
      }
    ]
  },
  "inheritance": [
    {
      "uid": "System.Object",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object",
      "name": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        }
      ],
      "level": 0,
      "index": 0
    }
  ],
  "level": 1,
  "inheritedMembers": [
    {
      "uid": "System.Object.Equals(System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetHashCode",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gethashcode",
      "name": [
        {
          "lang": "csharp",
          "value": "GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "GetHashCode()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetType",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gettype",
      "name": [
        {
          "lang": "csharp",
          "value": "GetType()"
        },
        {
          "lang": "vb",
          "value": "GetType()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.MemberwiseClone",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone",
      "name": [
        {
          "lang": "csharp",
          "value": "MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "MemberwiseClone()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ReferenceEquals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.referenceequals",
      "name": [
        {
          "lang": "csharp",
          "value": "ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "ReferenceEquals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ToString",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.tostring",
      "name": [
        {
          "lang": "csharp",
          "value": "ToString()"
        },
        {
          "lang": "vb",
          "value": "ToString()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        }
      ],
      "level": 0
    }
  ],
  "_appName": "xunit-proto",
  "_appTitle": "xunit-proto",
  "_enableSearch": true,
  "pdf": false,
  "_systemKeys": [
    "uid",
    "isEii",
    "isExtensionMethod",
    "parent",
    "children",
    "href",
    "langs",
    "name",
    "nameWithType",
    "fullName",
    "type",
    "source",
    "documentation",
    "assemblies",
    "namespace",
    "summary",
    "remarks",
    "example",
    "syntax",
    "overridden",
    "overload",
    "exceptions",
    "seealso",
    "see",
    "inheritance",
    "derivedClasses",
    "level",
    "implements",
    "inheritedMembers",
    "extensionMethods",
    "conceptual",
    "platform",
    "attributes",
    "additionalNotes"
  ],
  "_key": "v3-2.0.0/assert/Asserts.EqualityAsserts.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../toc.html",
  "_path": "v3-2.0.0/assert/Asserts.EqualityAsserts.html",
  "_rel": "../../",
  "_tocKey": "~/v3-2.0.0/assert/toc.yml",
  "_tocPath": "v3-2.0.0/assert/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}