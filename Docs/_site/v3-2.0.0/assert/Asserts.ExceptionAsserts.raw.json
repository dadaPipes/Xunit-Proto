{
  "uid": "Asserts.ExceptionAsserts",
  "isEii": false,
  "isExtensionMethod": false,
  "parent": {
    "uid": "Asserts",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Asserts.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      }
    ],
    "level": 0
  },
  "children": [
    {
      "uid": "Asserts.ExceptionAsserts.Throws(System.Type,System.Action)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Throws(Type, Action)"
        },
        {
          "lang": "vb",
          "value": "Throws(Type, Action)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.Throws(Type, Action)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.Throws(Type, Action)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.Throws(System.Type, System.Action)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.Throws(System.Type, System.Action)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws(System.Type,System.Action)\" text=\"Throws(Type, Action)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws(System.Type,System.Action)\" text=\"Throws(Type, Action)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Exception Throws(Type exceptionType, Action testCode)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function Throws(exceptionType As Type, testCode As Action) As Exception"
          }
        ],
        "parameters": [
          {
            "id": "exceptionType",
            "type": {
              "uid": "System.Type",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Type"
                },
                {
                  "lang": "vb",
                  "value": "Type"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Type"
                },
                {
                  "lang": "vb",
                  "value": "Type"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Type"
                },
                {
                  "lang": "vb",
                  "value": "System.Type"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Type\" text=\"Type\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Type\" text=\"Type\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          },
          {
            "id": "testCode",
            "type": {
              "uid": "System.Action",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action"
                },
                {
                  "lang": "vb",
                  "value": "System.Action"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Exception",
            "name": [
              {
                "lang": "csharp",
                "value": "Exception"
              },
              {
                "lang": "vb",
                "value": "Exception"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Exception"
              },
              {
                "lang": "vb",
                "value": "Exception"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Exception"
              },
              {
                "lang": "vb",
                "value": "System.Exception"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "Throws",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 49,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.Throws*",
        "name": [
          {
            "lang": "csharp",
            "value": "Throws"
          },
          {
            "lang": "vb",
            "value": "Throws"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.Throws"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.Throws"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.Throws(System.Type,System.Func{System.Object})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Throws(Type, Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "Throws(Type, Func(Of Object))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.Throws(Type, Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.Throws(Type, Func(Of Object))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.Throws(System.Type, System.Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.Throws(System.Type, System.Func(Of Object))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws(System.Type,System.Func{System.Object})\" text=\"Throws(Type, Func&lt;object?&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws(System.Type,System.Func{System.Object})\" text=\"Throws(Type, Func&lt;object?&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Exception Throws(Type exceptionType, Func<object?> testCode)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function Throws(exceptionType As Type, testCode As Func(Of Object)) As Exception"
          }
        ],
        "parameters": [
          {
            "id": "exceptionType",
            "type": {
              "uid": "System.Type",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Type"
                },
                {
                  "lang": "vb",
                  "value": "Type"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Type"
                },
                {
                  "lang": "vb",
                  "value": "Type"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Type"
                },
                {
                  "lang": "vb",
                  "value": "System.Type"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Type\" text=\"Type\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Type\" text=\"Type\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          },
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Object}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of Object)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Exception",
            "name": [
              {
                "lang": "csharp",
                "value": "Exception"
              },
              {
                "lang": "vb",
                "value": "Exception"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Exception"
              },
              {
                "lang": "vb",
                "value": "Exception"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Exception"
              },
              {
                "lang": "vb",
                "value": "System.Exception"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "Throws",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 61,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.Throws*",
        "name": [
          {
            "lang": "csharp",
            "value": "Throws"
          },
          {
            "lang": "vb",
            "value": "Throws"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.Throws"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.Throws"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type).\nGenerally used to test property accessors.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ThrowsAnyAsync<T>(Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ThrowsAnyAsync(Of T)(Func(Of Task))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.ThrowsAnyAsync<T>(Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.ThrowsAnyAsync(Of T)(Func(Of Task))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.ThrowsAnyAsync<T>(System.Func<System.Threading.Tasks.Task>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.ThrowsAnyAsync(Of T)(System.Func(Of System.Threading.Tasks.Task))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAnyAsync&lt;T&gt;(Func&lt;Task&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAnyAsync&lt;T&gt;(Func&lt;Task&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Task<T> ThrowsAnyAsync<T>(Func<Task> testCode) where T : Exception"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ThrowsAnyAsync(Of T As Exception)(testCode As Func(Of Task)) As Task(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Threading.Tasks.Task}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<System.Threading.Tasks.Task>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of System.Threading.Tasks.Task)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the task to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.Task{{T}}",
            "definition": "System.Threading.Tasks.Task`1",
            "name": [
              {
                "lang": "csharp",
                "value": "Task<T>"
              },
              {
                "lang": "vb",
                "value": "Task(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Task<T>"
              },
              {
                "lang": "vb",
                "value": "Task(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.Task<T>"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.Task(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>(Of T)"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "ThrowsAnyAsync",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 241,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.ThrowsAnyAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "ThrowsAnyAsync"
          },
          {
            "lang": "vb",
            "value": "ThrowsAnyAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.ThrowsAnyAsync"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.ThrowsAnyAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.ThrowsAnyAsync"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.ThrowsAnyAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAnyAsync*\" text=\"ThrowsAnyAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAnyAsync*\" text=\"ThrowsAnyAsync\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception or a derived exception type is thrown.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.ThrowsAny``1(System.Action)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ThrowsAny<T>(Action)"
        },
        {
          "lang": "vb",
          "value": "ThrowsAny(Of T)(Action)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.ThrowsAny<T>(Action)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.ThrowsAny(Of T)(Action)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.ThrowsAny<T>(System.Action)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.ThrowsAny(Of T)(System.Action)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny``1(System.Action)\" text=\"ThrowsAny&lt;T&gt;(Action)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny``1(System.Action)\" text=\"ThrowsAny&lt;T&gt;(Action)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T ThrowsAny<T>(Action testCode) where T : Exception"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ThrowsAny(Of T As Exception)(testCode As Action) As T"
          }
        ],
        "parameters": [
          {
            "id": "testCode",
            "type": {
              "uid": "System.Action",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action"
                },
                {
                  "lang": "vb",
                  "value": "System.Action"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "ThrowsAny",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 207,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.ThrowsAny*",
        "name": [
          {
            "lang": "csharp",
            "value": "ThrowsAny"
          },
          {
            "lang": "vb",
            "value": "ThrowsAny"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.ThrowsAny"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.ThrowsAny"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.ThrowsAny"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.ThrowsAny"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny*\" text=\"ThrowsAny\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny*\" text=\"ThrowsAny\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception or a derived exception type is thrown.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.ThrowsAny``1(System.Func{System.Object})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ThrowsAny<T>(Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "ThrowsAny(Of T)(Func(Of Object))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.ThrowsAny<T>(Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.ThrowsAny(Of T)(Func(Of Object))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.ThrowsAny<T>(System.Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.ThrowsAny(Of T)(System.Func(Of Object))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny``1(System.Func{System.Object})\" text=\"ThrowsAny&lt;T&gt;(Func&lt;object?&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny``1(System.Func{System.Object})\" text=\"ThrowsAny&lt;T&gt;(Func&lt;object?&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T ThrowsAny<T>(Func<object?> testCode) where T : Exception"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ThrowsAny(Of T As Exception)(testCode As Func(Of Object)) As T"
          }
        ],
        "parameters": [
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Object}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of Object)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "ThrowsAny",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 219,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.ThrowsAny*",
        "name": [
          {
            "lang": "csharp",
            "value": "ThrowsAny"
          },
          {
            "lang": "vb",
            "value": "ThrowsAny"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.ThrowsAny"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.ThrowsAny"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.ThrowsAny"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.ThrowsAny"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny*\" text=\"ThrowsAny\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAny*\" text=\"ThrowsAny\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception or a derived exception type is thrown.\nGenerally used to test property accessors.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ThrowsAsync(Type, Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ThrowsAsync(Type, Func(Of Task))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.ThrowsAsync(Type, Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.ThrowsAsync(Type, Func(Of Task))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.ThrowsAsync(System.Type, System.Func<System.Threading.Tasks.Task>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.ThrowsAsync(System.Type, System.Func(Of System.Threading.Tasks.Task))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAsync(Type, Func&lt;Task&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAsync(Type, Func&lt;Task&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Task<Exception> ThrowsAsync(Type exceptionType, Func<Task> testCode)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ThrowsAsync(exceptionType As Type, testCode As Func(Of Task)) As Task(Of Exception)"
          }
        ],
        "parameters": [
          {
            "id": "exceptionType",
            "type": {
              "uid": "System.Type",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Type"
                },
                {
                  "lang": "vb",
                  "value": "Type"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Type"
                },
                {
                  "lang": "vb",
                  "value": "Type"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Type"
                },
                {
                  "lang": "vb",
                  "value": "System.Type"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Type\" text=\"Type\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Type\" text=\"Type\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          },
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Threading.Tasks.Task}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<System.Threading.Tasks.Task>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of System.Threading.Tasks.Task)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the task to be tested</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.Task{System.Exception}",
            "definition": "System.Threading.Tasks.Task`1",
            "name": [
              {
                "lang": "csharp",
                "value": "Task<Exception>"
              },
              {
                "lang": "vb",
                "value": "Task(Of Exception)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Task<Exception>"
              },
              {
                "lang": "vb",
                "value": "Task(Of Exception)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.Task<System.Exception>"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.Task(Of System.Exception)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception\">Exception</a>&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.exception\">Exception</a>)"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "ThrowsAsync",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 251,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.ThrowsAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "ThrowsAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.ThrowsAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.ThrowsAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync*\" text=\"ThrowsAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync*\" text=\"ThrowsAsync\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ThrowsAsync<T>(Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ThrowsAsync(Of T)(Func(Of Task))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.ThrowsAsync<T>(Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.ThrowsAsync(Of T)(Func(Of Task))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.ThrowsAsync<T>(System.Func<System.Threading.Tasks.Task>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.ThrowsAsync(Of T)(System.Func(Of System.Threading.Tasks.Task))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAsync&lt;T&gt;(Func&lt;Task&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAsync&lt;T&gt;(Func&lt;Task&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Task<T> ThrowsAsync<T>(Func<Task> testCode) where T : Exception"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ThrowsAsync(Of T As Exception)(testCode As Func(Of Task)) As Task(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Threading.Tasks.Task}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<System.Threading.Tasks.Task>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of System.Threading.Tasks.Task)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the task to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.Task{{T}}",
            "definition": "System.Threading.Tasks.Task`1",
            "name": [
              {
                "lang": "csharp",
                "value": "Task<T>"
              },
              {
                "lang": "vb",
                "value": "Task(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Task<T>"
              },
              {
                "lang": "vb",
                "value": "Task(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.Task<T>"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.Task(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>(Of T)"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "ThrowsAsync",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 262,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.ThrowsAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "ThrowsAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.ThrowsAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.ThrowsAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync*\" text=\"ThrowsAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync*\" text=\"ThrowsAsync\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ThrowsAsync<T>(string?, Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ThrowsAsync(Of T)(String, Func(Of Task))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.ThrowsAsync<T>(string?, Func<Task>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.ThrowsAsync(Of T)(String, Func(Of Task))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.ThrowsAsync<T>(string?, System.Func<System.Threading.Tasks.Task>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.ThrowsAsync(Of T)(String, System.Func(Of System.Threading.Tasks.Task))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAsync&lt;T&gt;(string?, Func&lt;Task&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})\" text=\"ThrowsAsync&lt;T&gt;(string?, Func&lt;Task&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static Task<T> ThrowsAsync<T>(string? paramName, Func<Task> testCode) where T : ArgumentException"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function ThrowsAsync(Of T As ArgumentException)(paramName As String, testCode As Func(Of Task)) As Task(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "paramName",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The parameter name that is expected to be in the exception</p>\n"
          },
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Threading.Tasks.Task}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<Task>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Task)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<System.Threading.Tasks.Task>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of System.Threading.Tasks.Task)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the task to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.Task{{T}}",
            "definition": "System.Threading.Tasks.Task`1",
            "name": [
              {
                "lang": "csharp",
                "value": "Task<T>"
              },
              {
                "lang": "vb",
                "value": "Task(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Task<T>"
              },
              {
                "lang": "vb",
                "value": "Task(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.Task<T>"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.Task(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a>(Of T)"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "ThrowsAsync",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 275,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.ThrowsAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "ThrowsAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.ThrowsAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.ThrowsAsync"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.ThrowsAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync*\" text=\"ThrowsAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.ThrowsAsync*\" text=\"ThrowsAsync\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type), where the exception\nderives from <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> and has the given parameter name.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.Throws``1(System.Action)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Throws<T>(Action)"
        },
        {
          "lang": "vb",
          "value": "Throws(Of T)(Action)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.Throws<T>(Action)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.Throws(Of T)(Action)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.Throws<T>(System.Action)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.Throws(Of T)(System.Action)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.Action)\" text=\"Throws&lt;T&gt;(Action)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.Action)\" text=\"Throws&lt;T&gt;(Action)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T Throws<T>(Action testCode) where T : Exception"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function Throws(Of T As Exception)(testCode As Action) As T"
          }
        ],
        "parameters": [
          {
            "id": "testCode",
            "type": {
              "uid": "System.Action",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action"
                },
                {
                  "lang": "vb",
                  "value": "System.Action"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "Throws",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 86,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.Throws*",
        "name": [
          {
            "lang": "csharp",
            "value": "Throws"
          },
          {
            "lang": "vb",
            "value": "Throws"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.Throws"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.Throws"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type).</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.Throws``1(System.Func{System.Object})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Throws<T>(Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "Throws(Of T)(Func(Of Object))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.Throws<T>(Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.Throws(Of T)(Func(Of Object))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.Throws<T>(System.Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.Throws(Of T)(System.Func(Of Object))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.Func{System.Object})\" text=\"Throws&lt;T&gt;(Func&lt;object?&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.Func{System.Object})\" text=\"Throws&lt;T&gt;(Func&lt;object?&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T Throws<T>(Func<object?> testCode) where T : Exception"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function Throws(Of T As Exception)(testCode As Func(Of Object)) As T"
          }
        ],
        "parameters": [
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Object}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of Object)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T",
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The type of the exception expected to be thrown</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "Throws",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 100,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.Throws*",
        "name": [
          {
            "lang": "csharp",
            "value": "Throws"
          },
          {
            "lang": "vb",
            "value": "Throws"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.Throws"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.Throws"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type).\nGenerally used to test property accessors.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.Throws``1(System.String,System.Action)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Throws<T>(string?, Action)"
        },
        {
          "lang": "vb",
          "value": "Throws(Of T)(String, Action)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.Throws<T>(string?, Action)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.Throws(Of T)(String, Action)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.Throws<T>(string?, System.Action)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.Throws(Of T)(String, System.Action)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.String,System.Action)\" text=\"Throws&lt;T&gt;(string?, Action)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.String,System.Action)\" text=\"Throws&lt;T&gt;(string?, Action)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T Throws<T>(string? paramName, Action testCode) where T : ArgumentException"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function Throws(Of T As ArgumentException)(paramName As String, testCode As Action) As T"
          }
        ],
        "parameters": [
          {
            "id": "paramName",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The parameter name that is expected to be in the exception</p>\n"
          },
          {
            "id": "testCode",
            "type": {
              "uid": "System.Action",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action"
                },
                {
                  "lang": "vb",
                  "value": "System.Action"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "Throws",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 125,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.Throws*",
        "name": [
          {
            "lang": "csharp",
            "value": "Throws"
          },
          {
            "lang": "vb",
            "value": "Throws"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.Throws"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.Throws"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type), where the exception\nderives from <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> and has the given parameter name.</p>\n",
      "platform": null
    },
    {
      "uid": "Asserts.ExceptionAsserts.Throws``1(System.String,System.Func{System.Object})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Asserts.ExceptionAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Throws<T>(string?, Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "Throws(Of T)(String, Func(Of Object))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAsserts.Throws<T>(string?, Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAsserts.Throws(Of T)(String, Func(Of Object))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Asserts.ExceptionAsserts.Throws<T>(string?, System.Func<object?>)"
        },
        {
          "lang": "vb",
          "value": "Asserts.ExceptionAsserts.Throws(Of T)(String, System.Func(Of Object))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.String,System.Func{System.Object})\" text=\"Throws&lt;T&gt;(string?, Func&lt;object?&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws``1(System.String,System.Func{System.Object})\" text=\"Throws&lt;T&gt;(string?, Func&lt;object?&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T Throws<T>(string? paramName, Func<object?> testCode) where T : ArgumentException"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function Throws(Of T As ArgumentException)(paramName As String, testCode As Func(Of Object)) As T"
          }
        ],
        "parameters": [
          {
            "id": "paramName",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The parameter name that is expected to be in the exception</p>\n"
          },
          {
            "id": "testCode",
            "type": {
              "uid": "System.Func{System.Object}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of Object)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<object>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of Object)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">A delegate to the code to be tested</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">The exception that was thrown, when successful</p>\n"
        }
      },
      "source": {
        "id": "Throws",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
        "startLine": 149,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Asserts",
      "example": [],
      "overload": {
        "uid": "Asserts.ExceptionAsserts.Throws*",
        "name": [
          {
            "lang": "csharp",
            "value": "Throws"
          },
          {
            "lang": "vb",
            "value": "Throws"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "ExceptionAsserts.Throws"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Asserts.ExceptionAsserts.Throws"
          },
          {
            "lang": "vb",
            "value": "Asserts.ExceptionAsserts.Throws"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Asserts.ExceptionAsserts.Throws*\" text=\"Throws\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Asserts.ExceptionAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that the exact exception is thrown (and not a derived exception type), where the exception\nderives from <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> and has the given parameter name.</p>\n",
      "platform": null
    }
  ],
  "langs": [
    "csharp",
    "vb"
  ],
  "name": [
    {
      "lang": "csharp",
      "value": "ExceptionAsserts"
    },
    {
      "lang": "vb",
      "value": "ExceptionAsserts"
    }
  ],
  "nameWithType": [
    {
      "lang": "csharp",
      "value": "ExceptionAsserts"
    },
    {
      "lang": "vb",
      "value": "ExceptionAsserts"
    }
  ],
  "fullName": [
    {
      "lang": "csharp",
      "value": "Asserts.ExceptionAsserts"
    },
    {
      "lang": "vb",
      "value": "Asserts.ExceptionAsserts"
    }
  ],
  "type": "class",
  "source": {
    "id": "ExceptionAsserts",
    "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\ExceptionAsserts.cs",
    "startLine": 20,
    "endLine": 0
  },
  "assemblies": [
    "xunit.v3.assert"
  ],
  "namespace": {
    "uid": "Asserts",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Asserts.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Asserts"
      },
      {
        "lang": "vb",
        "value": "Asserts"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Asserts\" text=\"Asserts\"/>"
      }
    ],
    "level": 0
  },
  "syntax": {
    "content": [
      {
        "lang": "csharp",
        "value": "public class ExceptionAsserts"
      },
      {
        "lang": "vb",
        "value": "Public Class ExceptionAsserts"
      }
    ]
  },
  "inheritance": [
    {
      "uid": "System.Object",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object",
      "name": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        }
      ],
      "level": 0,
      "index": 0
    }
  ],
  "level": 1,
  "inheritedMembers": [
    {
      "uid": "System.Object.Equals(System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetHashCode",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gethashcode",
      "name": [
        {
          "lang": "csharp",
          "value": "GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "GetHashCode()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetType",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gettype",
      "name": [
        {
          "lang": "csharp",
          "value": "GetType()"
        },
        {
          "lang": "vb",
          "value": "GetType()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.MemberwiseClone",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone",
      "name": [
        {
          "lang": "csharp",
          "value": "MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "MemberwiseClone()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ReferenceEquals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.referenceequals",
      "name": [
        {
          "lang": "csharp",
          "value": "ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "ReferenceEquals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ToString",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.tostring",
      "name": [
        {
          "lang": "csharp",
          "value": "ToString()"
        },
        {
          "lang": "vb",
          "value": "ToString()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        }
      ],
      "level": 0
    }
  ],
  "_appName": "xunit-proto",
  "_appTitle": "xunit-proto",
  "_enableSearch": true,
  "pdf": false,
  "_systemKeys": [
    "uid",
    "isEii",
    "isExtensionMethod",
    "parent",
    "children",
    "href",
    "langs",
    "name",
    "nameWithType",
    "fullName",
    "type",
    "source",
    "documentation",
    "assemblies",
    "namespace",
    "summary",
    "remarks",
    "example",
    "syntax",
    "overridden",
    "overload",
    "exceptions",
    "seealso",
    "see",
    "inheritance",
    "derivedClasses",
    "level",
    "implements",
    "inheritedMembers",
    "extensionMethods",
    "conceptual",
    "platform",
    "attributes",
    "additionalNotes"
  ],
  "_key": "v3-2.0.0/assert/Asserts.ExceptionAsserts.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../toc.html",
  "_path": "v3-2.0.0/assert/Asserts.ExceptionAsserts.html",
  "_rel": "../../",
  "_tocKey": "~/v3-2.0.0/assert/toc.yml",
  "_tocPath": "v3-2.0.0/assert/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}