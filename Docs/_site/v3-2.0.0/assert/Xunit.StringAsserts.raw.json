{
  "uid": "Xunit.StringAsserts",
  "isEii": false,
  "isExtensionMethod": false,
  "parent": {
    "uid": "Xunit",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit"
      },
      {
        "lang": "vb",
        "value": "Xunit"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit"
      },
      {
        "lang": "vb",
        "value": "Xunit"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit"
      },
      {
        "lang": "vb",
        "value": "Xunit"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Xunit\" text=\"Xunit\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Xunit\" text=\"Xunit\"/>"
      }
    ],
    "level": 0
  },
  "children": [
    {
      "uid": "Xunit.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Memory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Memory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char})\" text=\"Contains(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char})\" text=\"Contains(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 69,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Memory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"Contains(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"Contains(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 114,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Memory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Contains(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Contains(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 80,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"Contains(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"Contains(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 127,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 91,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 140,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 102,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 153,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Contains(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Contains(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 260,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 209,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"Contains(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"Contains(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 249,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"Contains(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 196,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Span<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Span(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Contains(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Contains(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 238,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"Contains(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"Contains(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 183,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Contains(Span(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Span(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Span<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Span(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char})\" text=\"Contains(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char})\" text=\"Contains(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Span<char> expectedSubstring, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 227,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(System.Span<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(System.Span(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"Contains(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"Contains(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 170,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(string, string?)"
        },
        {
          "lang": "vb",
          "value": "Contains(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(string, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(string, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.String,System.String)\" text=\"Contains(string, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.String,System.String)\" text=\"Contains(string, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(string expectedSubstring, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As String, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 32,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Contains(System.String,System.String,System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Contains(string, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Contains(String, String, StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Contains(string, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Contains(String, String, StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Contains(string, string?, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Contains(String, String, System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.String,System.String,System.StringComparison)\" text=\"Contains(string, string?, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Contains(System.String,System.String,System.StringComparison)\" text=\"Contains(string, string?, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Contains(string expectedSubstring, string? actualString, StringComparison comparisonType)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Contains(expectedSubstring As String, actualString As String, comparisonType As StringComparison)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "Contains",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 48,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Contains*",
        "name": [
          {
            "lang": "csharp",
            "value": "Contains"
          },
          {
            "lang": "vb",
            "value": "Contains"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Contains"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Contains"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Contains"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Contains*\" text=\"Contains\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is not present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string contains a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})\" text=\"DoesNotContain(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})\" text=\"DoesNotContain(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 312,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"DoesNotContain(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"DoesNotContain(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 357,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"DoesNotContain(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"DoesNotContain(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 323,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"DoesNotContain(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"DoesNotContain(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 370,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 334,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 383,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 345,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 396,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 501,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 452,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 490,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"DoesNotContain(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 439,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"DoesNotContain(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"DoesNotContain(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 479,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"DoesNotContain(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"DoesNotContain(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 426,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Span(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Span(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char})\" text=\"DoesNotContain(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char})\" text=\"DoesNotContain(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 468,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(System.Span(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"DoesNotContain(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"DoesNotContain(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 413,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(string, string?)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(string, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(string, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.String,System.String)\" text=\"DoesNotContain(string, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.String,System.String)\" text=\"DoesNotContain(string, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(string expectedSubstring, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As String, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 271,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotContain(System.String,System.String,System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotContain(string, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "DoesNotContain(String, String, StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotContain(string, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotContain(String, String, StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotContain(string, string?, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotContain(String, String, System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.String,System.String,System.StringComparison)\" text=\"DoesNotContain(string, string?, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain(System.String,System.String,System.StringComparison)\" text=\"DoesNotContain(string, string?, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotContain(string expectedSubstring, string? actualString, StringComparison comparisonType)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotContain(expectedSubstring As String, actualString As String, comparisonType As StringComparison)"
          }
        ],
        "parameters": [
          {
            "id": "expectedSubstring",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected not to be in the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotContain",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 287,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotContain*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "DoesNotContain"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotContain"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotContain"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotContain"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotContain*\" text=\"DoesNotContain\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotContainException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "DoesNotContainException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotContainException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotContainException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotContainException\" text=\"DoesNotContainException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the sub-string is present inside the string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not contain a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotMatch(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotMatch(string, string?)"
        },
        {
          "lang": "vb",
          "value": "DoesNotMatch(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotMatch(string, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotMatch(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotMatch(string, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotMatch(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch(System.String,System.String)\" text=\"DoesNotMatch(string, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch(System.String,System.String)\" text=\"DoesNotMatch(string, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotMatch(string expectedRegexPattern, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotMatch(expectedRegexPattern As String, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedRegexPattern",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The regex pattern expected not to match</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotMatch",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 512,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotMatch*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotMatch"
          },
          {
            "lang": "vb",
            "value": "DoesNotMatch"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotMatch"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotMatch"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotMatch"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotMatch"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch*\" text=\"DoesNotMatch\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch*\" text=\"DoesNotMatch\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotMatchException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotMatchException"
              },
              {
                "lang": "vb",
                "value": "DoesNotMatchException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotMatchException"
              },
              {
                "lang": "vb",
                "value": "DoesNotMatchException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotMatchException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotMatchException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotMatchException\" text=\"DoesNotMatchException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotMatchException\" text=\"DoesNotMatchException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string matches the regex pattern</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not match a regular expression.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "DoesNotMatch(Regex, string?)"
        },
        {
          "lang": "vb",
          "value": "DoesNotMatch(Regex, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.DoesNotMatch(Regex, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.DoesNotMatch(Regex, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)\" text=\"DoesNotMatch(Regex, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)\" text=\"DoesNotMatch(Regex, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void DoesNotMatch(Regex expectedRegex, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub DoesNotMatch(expectedRegex As Regex, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedRegex",
            "type": {
              "uid": "System.Text.RegularExpressions.Regex",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Regex"
                },
                {
                  "lang": "vb",
                  "value": "Regex"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Regex"
                },
                {
                  "lang": "vb",
                  "value": "Regex"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Text.RegularExpressions.Regex"
                },
                {
                  "lang": "vb",
                  "value": "System.Text.RegularExpressions.Regex"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Text.RegularExpressions.Regex\" text=\"Regex\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Text.RegularExpressions.Regex\" text=\"Regex\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The regex expected not to match</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "DoesNotMatch",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 542,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.DoesNotMatch*",
        "name": [
          {
            "lang": "csharp",
            "value": "DoesNotMatch"
          },
          {
            "lang": "vb",
            "value": "DoesNotMatch"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.DoesNotMatch"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.DoesNotMatch"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.DoesNotMatch"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.DoesNotMatch"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch*\" text=\"DoesNotMatch\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.DoesNotMatch*\" text=\"DoesNotMatch\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.DoesNotMatchException",
            "name": [
              {
                "lang": "csharp",
                "value": "DoesNotMatchException"
              },
              {
                "lang": "vb",
                "value": "DoesNotMatchException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "DoesNotMatchException"
              },
              {
                "lang": "vb",
                "value": "DoesNotMatchException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.DoesNotMatchException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.DoesNotMatchException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotMatchException\" text=\"DoesNotMatchException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.DoesNotMatchException\" text=\"DoesNotMatchException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string matches the regex</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string does not match a regular expression.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Empty(System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Empty(string)"
        },
        {
          "lang": "vb",
          "value": "Empty(String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Empty(string)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Empty(String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Empty(string)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Empty(String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Empty(System.String)\" text=\"Empty(string)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Empty(System.String)\" text=\"Empty(string)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Empty(string value)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Empty(value As String)"
          }
        ],
        "parameters": [
          {
            "id": "value",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string value to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Empty",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 571,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Empty*",
        "name": [
          {
            "lang": "csharp",
            "value": "Empty"
          },
          {
            "lang": "vb",
            "value": "Empty"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Empty"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Empty"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Empty"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Empty"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Empty*\" text=\"Empty\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Empty*\" text=\"Empty\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "System.ArgumentNullException",
            "name": [
              {
                "lang": "csharp",
                "value": "ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "ArgumentNullException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "ArgumentNullException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.ArgumentNullException"
              },
              {
                "lang": "vb",
                "value": "System.ArgumentNullException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.ArgumentNullException\" text=\"ArgumentNullException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.ArgumentNullException\" text=\"ArgumentNullException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is null</p>\n"
        },
        {
          "type": {
            "uid": "Xunit.Sdk.EmptyException",
            "name": [
              {
                "lang": "csharp",
                "value": "EmptyException"
              },
              {
                "lang": "vb",
                "value": "EmptyException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EmptyException"
              },
              {
                "lang": "vb",
                "value": "EmptyException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EmptyException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EmptyException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EmptyException\" text=\"EmptyException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EmptyException\" text=\"EmptyException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string is not empty</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string is empty.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char})\" text=\"EndsWith(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char})\" text=\"EndsWith(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 622,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"EndsWith(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"EndsWith(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 667,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"EndsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"EndsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 633,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"EndsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"EndsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 680,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 644,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 693,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 655,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 706,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 755,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 806,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 744,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"EndsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 793,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Span<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"EndsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"EndsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 733,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"EndsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"EndsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 780,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Span(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Span(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Span<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Span(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char})\" text=\"EndsWith(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char})\" text=\"EndsWith(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Span<char> expectedEndString, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 722,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(System.Span<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(System.Span(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"EndsWith(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"EndsWith(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(Span<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 767,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EndsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EndsWithException"
              },
              {
                "lang": "vb",
                "value": "EndsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EndsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EndsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EndsWithException\" text=\"EndsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.String,System.String)\" text=\"EndsWith(string?, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.String,System.String)\" text=\"EndsWith(string?, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(string? expectedEndString, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As String, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 585,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.EndsWith(System.String,System.String,System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "EndsWith(string?, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "EndsWith(String, String, StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.EndsWith(string?, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.EndsWith(String, String, StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.EndsWith(string?, string?, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.EndsWith(String, String, System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.String,System.String,System.StringComparison)\" text=\"EndsWith(string?, string?, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.EndsWith(System.String,System.String,System.StringComparison)\" text=\"EndsWith(string?, string?, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void EndsWith(string? expectedEndString, string? actualString, StringComparison comparisonType)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub EndsWith(expectedEndString As String, actualString As String, comparisonType As StringComparison)"
          }
        ],
        "parameters": [
          {
            "id": "expectedEndString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the end of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "EndsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 602,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.EndsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "EndsWith"
          },
          {
            "lang": "vb",
            "value": "EndsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.EndsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.EndsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.EndsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.EndsWith*\" text=\"EndsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not end with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string ends with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Memory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Memory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char})\" text=\"Equal(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char})\" text=\"Equal(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Memory<char> expected, Memory<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Memory(Of Char), actual As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 888,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Memory<char>, Memory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(Memory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Memory<char>, Memory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Memory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Memory<char>, System.Memory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Memory(Of Char), System.Memory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Memory&lt;char&gt;, Memory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Memory&lt;char&gt;, Memory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Memory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Memory(Of Char), actual As Memory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 963,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Memory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Equal(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Equal(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Memory(Of Char), actual As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 899,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Memory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(Memory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Memory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Memory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Memory<char>, System.ReadOnlyMemory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Memory(Of Char), actual As ReadOnlyMemory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1009,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 910,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlyMemory<char>, Memory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlyMemory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlyMemory<char>, Memory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlyMemory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.Memory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As Memory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1055,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 921,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As ReadOnlyMemory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1101,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Equal(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Equal(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1160,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As ReadOnlySpan(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 869,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"Equal(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"Equal(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlySpan<char> expected, Span<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1149,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(ReadOnlySpan<char>, Span<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(ReadOnlySpan(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(ReadOnlySpan<char>, Span<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(ReadOnlySpan(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan<char>, System.Span<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.Span(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(ReadOnlySpan<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As Span(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, removes all whitespaces and tabs before comparing.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1294,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Span<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Span(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Equal(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"Equal(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Span<char> expected, ReadOnlySpan<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Span(Of Char), actual As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1138,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Span<char>, ReadOnlySpan<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(Span(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Span<char>, ReadOnlySpan<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Span(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Span<char>, System.ReadOnlySpan<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Span(Of Char), System.ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Span<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Span(Of Char), actual As ReadOnlySpan(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores all white space differences during comparison.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1248,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Equal(Span(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Span(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Span<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Span(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char})\" text=\"Equal(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char})\" text=\"Equal(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Span<char> expected, Span<char> actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Span(Of Char), actual As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1127,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(Span<char>, Span<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(Span(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(Span<char>, Span<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(Span(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(System.Span<char>, System.Span<char>, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(System.Span(Of Char), System.Span(Of Char), Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Span&lt;char&gt;, Span&lt;char&gt;, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(Span&lt;char&gt;, Span&lt;char&gt;, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(Span<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As Span(Of Char), actual As Span(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores all white space differences during comparison.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1202,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "Equal(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.String,System.String)\" text=\"Equal(string?, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.String,System.String)\" text=\"Equal(string?, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(string? expected, string? actual)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As String, actual As String)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 821,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Equal(string?, string?, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Equal(String, String, Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Equal(string?, string?, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Equal(String, String, Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Equal(string?, string?, bool, bool, bool, bool)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Equal(String, String, Boolean, Boolean, Boolean, Boolean)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(string?, string?, bool, bool, bool, bool)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)\" text=\"Equal(string?, string?, bool, bool, bool, bool)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Equal(string? expected, string? actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Equal(expected As String, actual As String, ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)"
          }
        ],
        "parameters": [
          {
            "id": "expected",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The expected string value.</p>\n"
          },
          {
            "id": "actual",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The actual string value.</p>\n"
          },
          {
            "id": "ignoreCase",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, ignores cases differences. The invariant culture is used.</p>\n"
          },
          {
            "id": "ignoreLineEndingDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats \\r\\n, \\r, and \\n as equivalent.</p>\n"
          },
          {
            "id": "ignoreWhiteSpaceDifferences",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.</p>\n"
          },
          {
            "id": "ignoreAllWhiteSpace",
            "type": {
              "uid": "System.Boolean",
              "name": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "bool"
                },
                {
                  "lang": "vb",
                  "value": "Boolean"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.</p>\n"
          }
        ]
      },
      "source": {
        "id": "Equal",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1340,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "remarks": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The <code class=\"paramref\">ignoreWhiteSpaceDifferences</code> and <code class=\"paramref\">ignoreAllWhiteSpace</code> flags consider\nthe following characters to be white-space:\n<a href=\"https://unicode-explorer.com/c/0009\">Tab</a> (\\t),\n<a href=\"https://unicode-explorer.com/c/0020\">Space</a> (\\u0020),\n<a href=\"https://unicode-explorer.com/c/00A0\">No-Break Space</a> (\\u00A0),\n<a href=\"https://unicode-explorer.com/c/1680\">Ogham Space Mark</a> (\\u1680),\n<a href=\"https://unicode-explorer.com/c/180E\">Mongolian Vowel Separator</a> (\\u180E),\n<a href=\"https://unicode-explorer.com/c/2000\">En Quad</a> (\\u2000),\n<a href=\"https://unicode-explorer.com/c/2001\">Em Quad</a> (\\u2001),\n<a href=\"https://unicode-explorer.com/c/2002\">En Space</a> (\\u2002),\n<a href=\"https://unicode-explorer.com/c/2003\">Em Space</a> (\\u2003),\n<a href=\"https://unicode-explorer.com/c/2004\">Three-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2005\">Four-Per-Em Space</a> (\\u2004),\n<a href=\"https://unicode-explorer.com/c/2006\">Six-Per-Em Space</a> (\\u2006),\n<a href=\"https://unicode-explorer.com/c/2007\">Figure Space</a> (\\u2007),\n<a href=\"https://unicode-explorer.com/c/2008\">Punctuation Space</a> (\\u2008),\n<a href=\"https://unicode-explorer.com/c/2009\">Thin Space</a> (\\u2009),\n<a href=\"https://unicode-explorer.com/c/200A\">Hair Space</a> (\\u200A),\n<a href=\"https://unicode-explorer.com/c/200B\">Zero Width Space</a> (\\u200B),\n<a href=\"https://unicode-explorer.com/c/202F\">Narrow No-Break Space</a> (\\u202F),\n<a href=\"https://unicode-explorer.com/c/205F\">Medium Mathematical Space</a> (\\u205F),\n<a href=\"https://unicode-explorer.com/c/3000\">Ideographic Space</a> (\\u3000),\nand <a href=\"https://unicode-explorer.com/c/FEFF\">Zero Width No-Break Space</a> (\\uFEFF).\nIn particular, it does not include carriage return (\\r) or line feed (\\n), which are covered by\n<code class=\"paramref\">ignoreLineEndingDifferences</code>.</p>\n",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Equal*",
        "name": [
          {
            "lang": "csharp",
            "value": "Equal"
          },
          {
            "lang": "vb",
            "value": "Equal"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Equal"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Equal"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Equal"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Equal*\" text=\"Equal\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.EqualException",
            "name": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "EqualException"
              },
              {
                "lang": "vb",
                "value": "EqualException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.EqualException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.EqualException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.EqualException\" text=\"EqualException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the strings are not equivalent.</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that two strings are equivalent.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Matches(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Matches(string, string?)"
        },
        {
          "lang": "vb",
          "value": "Matches(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Matches(string, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Matches(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Matches(string, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Matches(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Matches(System.String,System.String)\" text=\"Matches(string, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Matches(System.String,System.String)\" text=\"Matches(string, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Matches(string expectedRegexPattern, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Matches(expectedRegexPattern As String, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedRegexPattern",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The regex pattern expected to match</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Matches",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1367,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Matches*",
        "name": [
          {
            "lang": "csharp",
            "value": "Matches"
          },
          {
            "lang": "vb",
            "value": "Matches"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Matches"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Matches"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Matches"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Matches"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Matches*\" text=\"Matches\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Matches*\" text=\"Matches\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.MatchesException",
            "name": [
              {
                "lang": "csharp",
                "value": "MatchesException"
              },
              {
                "lang": "vb",
                "value": "MatchesException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "MatchesException"
              },
              {
                "lang": "vb",
                "value": "MatchesException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.MatchesException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.MatchesException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.MatchesException\" text=\"MatchesException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.MatchesException\" text=\"MatchesException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not match the regex pattern</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string matches a regular expression.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.Matches(System.Text.RegularExpressions.Regex,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Matches(Regex, string?)"
        },
        {
          "lang": "vb",
          "value": "Matches(Regex, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.Matches(Regex, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.Matches(Regex, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.Matches(System.Text.RegularExpressions.Regex, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.Matches(System.Text.RegularExpressions.Regex, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.Matches(System.Text.RegularExpressions.Regex,System.String)\" text=\"Matches(Regex, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.Matches(System.Text.RegularExpressions.Regex,System.String)\" text=\"Matches(Regex, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void Matches(Regex expectedRegex, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub Matches(expectedRegex As Regex, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedRegex",
            "type": {
              "uid": "System.Text.RegularExpressions.Regex",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Regex"
                },
                {
                  "lang": "vb",
                  "value": "Regex"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Regex"
                },
                {
                  "lang": "vb",
                  "value": "Regex"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Text.RegularExpressions.Regex"
                },
                {
                  "lang": "vb",
                  "value": "System.Text.RegularExpressions.Regex"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Text.RegularExpressions.Regex\" text=\"Regex\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Text.RegularExpressions.Regex\" text=\"Regex\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The regex expected to match</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "Matches",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1388,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.Matches*",
        "name": [
          {
            "lang": "csharp",
            "value": "Matches"
          },
          {
            "lang": "vb",
            "value": "Matches"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.Matches"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.Matches"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.Matches"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.Matches"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.Matches*\" text=\"Matches\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.Matches*\" text=\"Matches\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.MatchesException",
            "name": [
              {
                "lang": "csharp",
                "value": "MatchesException"
              },
              {
                "lang": "vb",
                "value": "MatchesException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "MatchesException"
              },
              {
                "lang": "vb",
                "value": "MatchesException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.MatchesException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.MatchesException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.MatchesException\" text=\"MatchesException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.MatchesException\" text=\"MatchesException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not match the regex</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string matches a regular expression.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Memory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Memory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char})\" text=\"StartsWith(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char})\" text=\"StartsWith(Memory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1445,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Memory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Memory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"StartsWith(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"StartsWith(Memory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1490,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Memory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"StartsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"StartsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1456,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"StartsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"StartsWith(Memory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1503,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory<char>, Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.Memory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1467,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, Memory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Memory{System.Char}",
              "definition": "System.Memory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "Memory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Memory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Memory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.memory-1\">Memory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1516,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1478,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the default StringComparison.CurrentCulture comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlyMemory&lt;char&gt;, ReadOnlyMemory&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlyMemory{System.Char}",
              "definition": "System.ReadOnlyMemory`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlyMemory(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlyMemory<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlyMemory(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlymemory-1\">ReadOnlyMemory</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1529,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1578,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1629,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlySpan<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlySpan(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1567,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(ReadOnlySpan<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"StartsWith(ReadOnlySpan&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1616,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Span<char>, ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Span(Of Char), ReadOnlySpan(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Span<char>, System.ReadOnlySpan<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"StartsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})\" text=\"StartsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As ReadOnlySpan(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1556,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Span<char>, ReadOnlySpan<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"StartsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)\" text=\"StartsWith(Span&lt;char&gt;, ReadOnlySpan&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.ReadOnlySpan{System.Char}",
              "definition": "System.ReadOnlySpan`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "ReadOnlySpan(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.ReadOnlySpan<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.ReadOnlySpan(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.readonlyspan-1\">ReadOnlySpan</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1603,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Span(Of Char), Span(Of Char))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Span<char>, Span<char>)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Span(Of Char), Span(Of Char))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Span<char>, System.Span<char>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Span(Of Char), System.Span(Of Char))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char})\" text=\"StartsWith(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char})\" text=\"StartsWith(Span&lt;char&gt;, Span&lt;char&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Span<char> expectedStartString, Span<char> actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As Span(Of Char))"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1545,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(Span<char>, Span<char>, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(Span(Of Char), Span(Of Char), StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(System.Span<char>, System.Span<char>, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(System.Span(Of Char), System.Span(Of Char), System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"StartsWith(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)\" text=\"StartsWith(Span&lt;char&gt;, Span&lt;char&gt;, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(Span<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.Span{System.Char}",
              "definition": "System.Span`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "Span(Of Char)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Span<char>"
                },
                {
                  "lang": "vb",
                  "value": "System.Span(Of Char)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">char</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.span-1\">Span</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.char\">Char</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1590,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.StartsWithException",
            "name": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "StartsWithException"
              },
              {
                "lang": "vb",
                "value": "StartsWithException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.StartsWithException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.StartsWithException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.StartsWithException\" text=\"StartsWithException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.String,System.String)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(String, String)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(String, String)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(string?, string?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(String, String)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.String,System.String)\" text=\"StartsWith(string?, string?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.String,System.String)\" text=\"StartsWith(string?, string?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(string? expectedStartString, string? actualString)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As String, actualString As String)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1408,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given string, using the current culture.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.StringAsserts.StartsWith(System.String,System.String,System.StringComparison)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.StringAsserts",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "StartsWith(string?, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StartsWith(String, String, StringComparison)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "StringAsserts.StartsWith(string?, string?, StringComparison)"
        },
        {
          "lang": "vb",
          "value": "StringAsserts.StartsWith(String, String, StringComparison)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.StringAsserts.StartsWith(string?, string?, System.StringComparison)"
        },
        {
          "lang": "vb",
          "value": "Xunit.StringAsserts.StartsWith(String, String, System.StringComparison)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.String,System.String,System.StringComparison)\" text=\"StartsWith(string?, string?, StringComparison)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.StringAsserts.StartsWith(System.String,System.String,System.StringComparison)\" text=\"StartsWith(string?, string?, StringComparison)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void StartsWith(string? expectedStartString, string? actualString, StringComparison comparisonType)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub StartsWith(expectedStartString As String, actualString As String, comparisonType As StringComparison)"
          }
        ],
        "parameters": [
          {
            "id": "expectedStartString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The sub-string expected to be at the start of the string</p>\n"
          },
          {
            "id": "actualString",
            "type": {
              "uid": "System.String",
              "name": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "string"
                },
                {
                  "lang": "vb",
                  "value": "String"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.String\" text=\"string\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The string to be inspected</p>\n"
          },
          {
            "id": "comparisonType",
            "type": {
              "uid": "System.StringComparison",
              "name": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "StringComparison"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.StringComparison"
                },
                {
                  "lang": "vb",
                  "value": "System.StringComparison"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.StringComparison\" text=\"StringComparison\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">The type of string comparison to perform</p>\n"
          }
        ]
      },
      "source": {
        "id": "StartsWith",
        "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
        "startLine": 1425,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.assert"
      ],
      "namespace": "Xunit",
      "example": [],
      "overload": {
        "uid": "Xunit.StringAsserts.StartsWith*",
        "name": [
          {
            "lang": "csharp",
            "value": "StartsWith"
          },
          {
            "lang": "vb",
            "value": "StartsWith"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "StringAsserts.StartsWith"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.StringAsserts.StartsWith"
          },
          {
            "lang": "vb",
            "value": "Xunit.StringAsserts.StartsWith"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.StringAsserts.StartsWith*\" text=\"StartsWith\"/>"
          }
        ]
      },
      "exceptions": [
        {
          "type": {
            "uid": "Xunit.Sdk.ContainsException",
            "name": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ContainsException"
              },
              {
                "lang": "vb",
                "value": "ContainsException"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.Sdk.ContainsException"
              },
              {
                "lang": "vb",
                "value": "Xunit.Sdk.ContainsException"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.Sdk.ContainsException\" text=\"ContainsException\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Thrown when the string does not start with the expected sub-string</p>\n"
        }
      ],
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/assert/Xunit.StringAsserts.yml\" sourcestartlinenumber=\"1\">Verifies that a string starts with a given sub-string, using the given comparison type.</p>\n",
      "platform": null
    }
  ],
  "langs": [
    "csharp",
    "vb"
  ],
  "name": [
    {
      "lang": "csharp",
      "value": "StringAsserts"
    },
    {
      "lang": "vb",
      "value": "StringAsserts"
    }
  ],
  "nameWithType": [
    {
      "lang": "csharp",
      "value": "StringAsserts"
    },
    {
      "lang": "vb",
      "value": "StringAsserts"
    }
  ],
  "fullName": [
    {
      "lang": "csharp",
      "value": "Xunit.StringAsserts"
    },
    {
      "lang": "vb",
      "value": "Xunit.StringAsserts"
    }
  ],
  "type": "class",
  "source": {
    "id": "StringAsserts",
    "path": "C:\\Users\\dadaP\\source\\TestingRepos\\Xunit-Proto\\v3\\v3-2.0.0\\src\\xunit.v3.assert\\Asserts\\StringAsserts.cs",
    "startLine": 22,
    "endLine": 0
  },
  "assemblies": [
    "xunit.v3.assert"
  ],
  "namespace": {
    "uid": "Xunit",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit"
      },
      {
        "lang": "vb",
        "value": "Xunit"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit"
      },
      {
        "lang": "vb",
        "value": "Xunit"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit"
      },
      {
        "lang": "vb",
        "value": "Xunit"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<xref uid=\"Xunit\" text=\"Xunit\"/>"
      },
      {
        "lang": "vb",
        "value": "<xref uid=\"Xunit\" text=\"Xunit\"/>"
      }
    ],
    "level": 0
  },
  "syntax": {
    "content": [
      {
        "lang": "csharp",
        "value": "public class StringAsserts"
      },
      {
        "lang": "vb",
        "value": "Public Class StringAsserts"
      }
    ]
  },
  "inheritance": [
    {
      "uid": "System.Object",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object",
      "name": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        }
      ],
      "level": 0,
      "index": 0
    }
  ],
  "level": 1,
  "inheritedMembers": [
    {
      "uid": "System.Object.Equals(System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetHashCode",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gethashcode",
      "name": [
        {
          "lang": "csharp",
          "value": "GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "GetHashCode()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetType",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gettype",
      "name": [
        {
          "lang": "csharp",
          "value": "GetType()"
        },
        {
          "lang": "vb",
          "value": "GetType()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.MemberwiseClone",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone",
      "name": [
        {
          "lang": "csharp",
          "value": "MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "MemberwiseClone()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ReferenceEquals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.referenceequals",
      "name": [
        {
          "lang": "csharp",
          "value": "ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "ReferenceEquals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ToString",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.tostring",
      "name": [
        {
          "lang": "csharp",
          "value": "ToString()"
        },
        {
          "lang": "vb",
          "value": "ToString()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        }
      ],
      "level": 0
    }
  ],
  "_appName": "xunit-proto",
  "_appTitle": "xunit-proto",
  "_enableSearch": true,
  "pdf": false,
  "_systemKeys": [
    "uid",
    "isEii",
    "isExtensionMethod",
    "parent",
    "children",
    "href",
    "langs",
    "name",
    "nameWithType",
    "fullName",
    "type",
    "source",
    "documentation",
    "assemblies",
    "namespace",
    "summary",
    "remarks",
    "example",
    "syntax",
    "overridden",
    "overload",
    "exceptions",
    "seealso",
    "see",
    "inheritance",
    "derivedClasses",
    "level",
    "implements",
    "inheritedMembers",
    "extensionMethods",
    "conceptual",
    "platform",
    "attributes",
    "additionalNotes"
  ],
  "_key": "v3-2.0.0/assert/Xunit.StringAsserts.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../toc.html",
  "_path": "v3-2.0.0/assert/Xunit.StringAsserts.html",
  "_rel": "../../",
  "_tocKey": "~/v3-2.0.0/assert/toc.yml",
  "_tocPath": "v3-2.0.0/assert/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}