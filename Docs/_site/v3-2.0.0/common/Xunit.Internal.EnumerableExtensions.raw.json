{
  "uid": "Xunit.Internal.EnumerableExtensions",
  "isEii": false,
  "isExtensionMethod": false,
  "parent": {
    "uid": "Xunit.Internal",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit.Internal"
      },
      {
        "lang": "vb",
        "value": "Xunit.Internal"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit.Internal"
      },
      {
        "lang": "vb",
        "value": "Xunit.Internal"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit.Internal"
      },
      {
        "lang": "vb",
        "value": "Xunit.Internal"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Internal.html\">Internal</a>"
      },
      {
        "lang": "vb",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Internal.html\">Internal</a>"
      }
    ],
    "level": 0
  },
  "children": [
    {
      "uid": "Xunit.Internal.EnumerableExtensions.CastOrToArray``1(System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "CastOrToArray<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "CastOrToArray(Of T)(IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.CastOrToArray<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.CastOrToArray(Of T)(IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToArray<T>(System.Collections.Generic.IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToArray(Of T)(System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToArray``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToArray&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToArray``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToArray&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static T[]? CastOrToArray<T>(this IEnumerable<T>? source)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function CastOrToArray(Of T)(source As IEnumerable(Of T)) As T()"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            }
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}[]",
            "name": [
              {
                "lang": "csharp",
                "value": "T[]"
              },
              {
                "lang": "vb",
                "value": "T()"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T[]"
              },
              {
                "lang": "vb",
                "value": "T()"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T[]"
              },
              {
                "lang": "vb",
                "value": "T()"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "T[]"
              },
              {
                "lang": "vb",
                "value": "T()"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "CastOrToArray",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 18,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.CastOrToArray*",
        "name": [
          {
            "lang": "csharp",
            "value": "CastOrToArray"
          },
          {
            "lang": "vb",
            "value": "CastOrToArray"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.CastOrToArray"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.CastOrToArray"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToArray"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToArray"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToArray*\" text=\"CastOrToArray\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToArray*\" text=\"CastOrToArray\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Returns <code class=\"paramref\">source</code> as an array of <code class=\"typeparamref\">T</code>, using a cast when\navailable and <xref href=\"System.Linq.Enumerable.ToArray%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> when not.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Internal.EnumerableExtensions.CastOrToList``1(System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "CastOrToList<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "CastOrToList(Of T)(IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.CastOrToList<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.CastOrToList(Of T)(IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToList<T>(System.Collections.Generic.IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToList(Of T)(System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToList``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToList&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToList``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToList&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static List<T>? CastOrToList<T>(this IEnumerable<T>? source)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function CastOrToList(Of T)(source As IEnumerable(Of T)) As List(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            }
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Collections.Generic.List{{T}}",
            "definition": "System.Collections.Generic.List`1",
            "name": [
              {
                "lang": "csharp",
                "value": "List<T>"
              },
              {
                "lang": "vb",
                "value": "List(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "List<T>"
              },
              {
                "lang": "vb",
                "value": "List(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Collections.Generic.List<T>"
              },
              {
                "lang": "vb",
                "value": "System.Collections.Generic.List(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1\">List</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1\">List</a>(Of T)"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "CastOrToList",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 26,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.CastOrToList*",
        "name": [
          {
            "lang": "csharp",
            "value": "CastOrToList"
          },
          {
            "lang": "vb",
            "value": "CastOrToList"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.CastOrToList"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.CastOrToList"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToList"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToList"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToList*\" text=\"CastOrToList\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToList*\" text=\"CastOrToList\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Returns <code class=\"paramref\">source</code> as a <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref>, using a cast when\navailable and <xref href=\"System.Linq.Enumerable.ToList%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> when not.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "CastOrToReadOnlyCollection<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "CastOrToReadOnlyCollection(Of T)(IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.CastOrToReadOnlyCollection<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.CastOrToReadOnlyCollection(Of T)(IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection<T>(System.Collections.Generic.IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection(Of T)(System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToReadOnlyCollection&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToReadOnlyCollection&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static IReadOnlyCollection<T>? CastOrToReadOnlyCollection<T>(this IEnumerable<T>? source)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function CastOrToReadOnlyCollection(Of T)(source As IEnumerable(Of T)) As IReadOnlyCollection(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            }
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Collections.Generic.IReadOnlyCollection{{T}}",
            "definition": "System.Collections.Generic.IReadOnlyCollection`1",
            "name": [
              {
                "lang": "csharp",
                "value": "IReadOnlyCollection<T>"
              },
              {
                "lang": "vb",
                "value": "IReadOnlyCollection(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "IReadOnlyCollection<T>"
              },
              {
                "lang": "vb",
                "value": "IReadOnlyCollection(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Collections.Generic.IReadOnlyCollection<T>"
              },
              {
                "lang": "vb",
                "value": "System.Collections.Generic.IReadOnlyCollection(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1\">IReadOnlyCollection</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlycollection-1\">IReadOnlyCollection</a>(Of T)"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "CastOrToReadOnlyCollection",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 34,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection*",
        "name": [
          {
            "lang": "csharp",
            "value": "CastOrToReadOnlyCollection"
          },
          {
            "lang": "vb",
            "value": "CastOrToReadOnlyCollection"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.CastOrToReadOnlyCollection"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.CastOrToReadOnlyCollection"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection*\" text=\"CastOrToReadOnlyCollection\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyCollection*\" text=\"CastOrToReadOnlyCollection\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Returns <code class=\"paramref\">source</code> as an <xref href=\"System.Collections.Generic.IReadOnlyCollection%601\" data-throw-if-not-resolved=\"false\"></xref> of <code class=\"typeparamref\">T</code>,\nusing a cast when available and <xref href=\"System.Linq.Enumerable.ToArray%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> when not.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "CastOrToReadOnlyList<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "CastOrToReadOnlyList(Of T)(IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.CastOrToReadOnlyList<T>(IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.CastOrToReadOnlyList(Of T)(IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList<T>(System.Collections.Generic.IEnumerable<T>?)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList(Of T)(System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToReadOnlyList&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})\" text=\"CastOrToReadOnlyList&lt;T&gt;(IEnumerable&lt;T&gt;?)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static IReadOnlyList<T>? CastOrToReadOnlyList<T>(this IEnumerable<T>? source)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function CastOrToReadOnlyList(Of T)(source As IEnumerable(Of T)) As IReadOnlyList(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            }
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Collections.Generic.IReadOnlyList{{T}}",
            "definition": "System.Collections.Generic.IReadOnlyList`1",
            "name": [
              {
                "lang": "csharp",
                "value": "IReadOnlyList<T>"
              },
              {
                "lang": "vb",
                "value": "IReadOnlyList(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "IReadOnlyList<T>"
              },
              {
                "lang": "vb",
                "value": "IReadOnlyList(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Collections.Generic.IReadOnlyList<T>"
              },
              {
                "lang": "vb",
                "value": "System.Collections.Generic.IReadOnlyList(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1\">IReadOnlyList</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1\">IReadOnlyList</a>(Of T)"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "CastOrToReadOnlyList",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 42,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList*",
        "name": [
          {
            "lang": "csharp",
            "value": "CastOrToReadOnlyList"
          },
          {
            "lang": "vb",
            "value": "CastOrToReadOnlyList"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.CastOrToReadOnlyList"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.CastOrToReadOnlyList"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList*\" text=\"CastOrToReadOnlyList\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.CastOrToReadOnlyList*\" text=\"CastOrToReadOnlyList\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Returns <code class=\"paramref\">source</code> as an <xref href=\"System.Collections.Generic.IReadOnlyList%601\" data-throw-if-not-resolved=\"false\"></xref> of <code class=\"typeparamref\">T</code>,\nusing a cast when available and <xref href=\"System.Linq.Enumerable.ToArray%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> when not.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Internal.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ForEach<T>(IEnumerable<T>, Action<T>)"
        },
        {
          "lang": "vb",
          "value": "ForEach(Of T)(IEnumerable(Of T), Action(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.ForEach(Of T)(IEnumerable(Of T), Action(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\" text=\"ForEach&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\" text=\"ForEach&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static void ForEach<T>(this IEnumerable<T> source, Action<T> callback)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Sub ForEach(Of T)(source As IEnumerable(Of T), callback As Action(Of T))"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            }
          },
          {
            "id": "callback",
            "type": {
              "uid": "System.Action{{T}}",
              "definition": "System.Action`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action<T>"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action<T>"
                },
                {
                  "lang": "vb",
                  "value": "Action(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Action(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-1\">Action</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.action-1\">Action</a>(Of T)"
                }
              ]
            }
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ]
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "ForEach",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 49,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.ForEach*",
        "name": [
          {
            "lang": "csharp",
            "value": "ForEach"
          },
          {
            "lang": "vb",
            "value": "ForEach"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.ForEach"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.ForEach"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.ForEach"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.ForEach"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.ForEach*\" text=\"ForEach\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.ForEach*\" text=\"ForEach\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Enumerates all values in a collection, calling the callback for each.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace(System.Collections.Generic.IEnumerable{System.String})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "WhereNotNullOrWhitespace(IEnumerable<string?>)"
        },
        {
          "lang": "vb",
          "value": "WhereNotNullOrWhitespace(IEnumerable(Of String))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.WhereNotNullOrWhitespace(IEnumerable<string?>)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.WhereNotNullOrWhitespace(IEnumerable(Of String))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace(System.Collections.Generic.IEnumerable<string?>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace(System.Collections.Generic.IEnumerable(Of String))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace(System.Collections.Generic.IEnumerable{System.String})\" text=\"WhereNotNullOrWhitespace(IEnumerable&lt;string?&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace(System.Collections.Generic.IEnumerable{System.String})\" text=\"WhereNotNullOrWhitespace(IEnumerable&lt;string?&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static IEnumerable<string> WhereNotNullOrWhitespace(this IEnumerable<string?> source)"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function WhereNotNullOrWhitespace(source As IEnumerable(Of String)) As IEnumerable(Of String)"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{System.String}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<string>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of String)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<string>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of String)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<string>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of String)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.string\">string</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.string\">String</a>)"
                }
              ]
            }
          }
        ],
        "return": {
          "type": {
            "uid": "System.Collections.Generic.IEnumerable{System.String}",
            "definition": "System.Collections.Generic.IEnumerable`1",
            "name": [
              {
                "lang": "csharp",
                "value": "IEnumerable<string>"
              },
              {
                "lang": "vb",
                "value": "IEnumerable(Of String)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "IEnumerable<string>"
              },
              {
                "lang": "vb",
                "value": "IEnumerable(Of String)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Collections.Generic.IEnumerable<string>"
              },
              {
                "lang": "vb",
                "value": "System.Collections.Generic.IEnumerable(Of String)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.string\">string</a>&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.string\">String</a>)"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "WhereNotNullOrWhitespace",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 79,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace*",
        "name": [
          {
            "lang": "csharp",
            "value": "WhereNotNullOrWhitespace"
          },
          {
            "lang": "vb",
            "value": "WhereNotNullOrWhitespace"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.WhereNotNullOrWhitespace"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.WhereNotNullOrWhitespace"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace*\" text=\"WhereNotNullOrWhitespace\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNullOrWhitespace*\" text=\"WhereNotNullOrWhitespace\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Returns <code class=\"paramref\">source</code> with all the <code>null</code> or whitespace-only strings removed.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "WhereNotNull<T>(IEnumerable<T?>)"
        },
        {
          "lang": "vb",
          "value": "WhereNotNull(Of T)(IEnumerable(Of T?))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.WhereNotNull(Of T)(IEnumerable(Of T?))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull<T>(System.Collections.Generic.IEnumerable<T?>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull(Of T)(System.Collections.Generic.IEnumerable(Of T?))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})\" text=\"WhereNotNull&lt;T&gt;(IEnumerable&lt;T?&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})\" text=\"WhereNotNull&lt;T&gt;(IEnumerable&lt;T?&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static IEnumerable<T> WhereNotNull<T>(this IEnumerable<T?> source) where T : struct"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function WhereNotNull(Of T As Structure)(source As IEnumerable(Of T?)) As IEnumerable(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{System.Nullable{{T}}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T?>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T?)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T?>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T?)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T?>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T?)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T?&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T?)"
                }
              ]
            }
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Collections.Generic.IEnumerable{{T}}",
            "definition": "System.Collections.Generic.IEnumerable`1",
            "name": [
              {
                "lang": "csharp",
                "value": "IEnumerable<T>"
              },
              {
                "lang": "vb",
                "value": "IEnumerable(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "IEnumerable<T>"
              },
              {
                "lang": "vb",
                "value": "IEnumerable(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Collections.Generic.IEnumerable<T>"
              },
              {
                "lang": "vb",
                "value": "System.Collections.Generic.IEnumerable(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "WhereNotNull",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 72,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.WhereNotNull*",
        "name": [
          {
            "lang": "csharp",
            "value": "WhereNotNull"
          },
          {
            "lang": "vb",
            "value": "WhereNotNull"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.WhereNotNull"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.WhereNotNull"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull*\" text=\"WhereNotNull\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull*\" text=\"WhereNotNull\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Returns <code class=\"paramref\">source</code> as an enumerable of <code class=\"typeparamref\">T</code> with\nall the <code>null</code> items removed.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})",
      "isEii": false,
      "isExtensionMethod": true,
      "parent": "Xunit.Internal.EnumerableExtensions",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "WhereNotNull<T>(IEnumerable<T?>)"
        },
        {
          "lang": "vb",
          "value": "WhereNotNull(Of T)(IEnumerable(Of T))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "EnumerableExtensions.WhereNotNull<T>(IEnumerable<T?>)"
        },
        {
          "lang": "vb",
          "value": "EnumerableExtensions.WhereNotNull(Of T)(IEnumerable(Of T))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull<T>(System.Collections.Generic.IEnumerable<T?>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull(Of T)(System.Collections.Generic.IEnumerable(Of T))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})\" text=\"WhereNotNull&lt;T&gt;(IEnumerable&lt;T?&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})\" text=\"WhereNotNull&lt;T&gt;(IEnumerable&lt;T?&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static IEnumerable<T> WhereNotNull<T>(this IEnumerable<T?> source) where T : class"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function WhereNotNull(Of T As Class)(source As IEnumerable(Of T)) As IEnumerable(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "source",
            "type": {
              "uid": "System.Collections.Generic.IEnumerable{{T}}",
              "definition": "System.Collections.Generic.IEnumerable`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "IEnumerable(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Collections.Generic.IEnumerable<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Collections.Generic.IEnumerable(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
                }
              ]
            }
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Collections.Generic.IEnumerable{{T}}",
            "definition": "System.Collections.Generic.IEnumerable`1",
            "name": [
              {
                "lang": "csharp",
                "value": "IEnumerable<T>"
              },
              {
                "lang": "vb",
                "value": "IEnumerable(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "IEnumerable<T>"
              },
              {
                "lang": "vb",
                "value": "IEnumerable(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Collections.Generic.IEnumerable<T>"
              },
              {
                "lang": "vb",
                "value": "System.Collections.Generic.IEnumerable(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable</a>(Of T)"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "WhereNotNull",
        "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
        "startLine": 64,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.common"
      ],
      "namespace": "Xunit.Internal",
      "example": [],
      "overload": {
        "uid": "Xunit.Internal.EnumerableExtensions.WhereNotNull*",
        "name": [
          {
            "lang": "csharp",
            "value": "WhereNotNull"
          },
          {
            "lang": "vb",
            "value": "WhereNotNull"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "EnumerableExtensions.WhereNotNull"
          },
          {
            "lang": "vb",
            "value": "EnumerableExtensions.WhereNotNull"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull"
          },
          {
            "lang": "vb",
            "value": "Xunit.Internal.EnumerableExtensions.WhereNotNull"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull*\" text=\"WhereNotNull\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.Internal.EnumerableExtensions.WhereNotNull*\" text=\"WhereNotNull\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">Returns <code class=\"paramref\">source</code> as an enumerable of <code class=\"typeparamref\">T</code> with\nall the <code>null</code> items removed.</p>\n",
      "platform": null
    }
  ],
  "langs": [
    "csharp",
    "vb"
  ],
  "name": [
    {
      "lang": "csharp",
      "value": "EnumerableExtensions"
    },
    {
      "lang": "vb",
      "value": "EnumerableExtensions"
    }
  ],
  "nameWithType": [
    {
      "lang": "csharp",
      "value": "EnumerableExtensions"
    },
    {
      "lang": "vb",
      "value": "EnumerableExtensions"
    }
  ],
  "fullName": [
    {
      "lang": "csharp",
      "value": "Xunit.Internal.EnumerableExtensions"
    },
    {
      "lang": "vb",
      "value": "Xunit.Internal.EnumerableExtensions"
    }
  ],
  "type": "class",
  "source": {
    "remote": {
      "path": "src/xunit.v3.common/Internal/EnumerableExtensions.cs",
      "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
      "repo": "https://github.com/xunit/xunit.git"
    },
    "id": "EnumerableExtensions",
    "path": "../v3/v3-2.0.0/src/xunit.v3.common/Internal/EnumerableExtensions.cs",
    "startLine": 10,
    "endLine": 0
  },
  "assemblies": [
    "xunit.v3.common"
  ],
  "namespace": {
    "uid": "Xunit.Internal",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit.Internal"
      },
      {
        "lang": "vb",
        "value": "Xunit.Internal"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit.Internal"
      },
      {
        "lang": "vb",
        "value": "Xunit.Internal"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit.Internal"
      },
      {
        "lang": "vb",
        "value": "Xunit.Internal"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Internal.html\">Internal</a>"
      },
      {
        "lang": "vb",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.Internal.html\">Internal</a>"
      }
    ],
    "level": 0
  },
  "summary": "<p sourcefile=\"v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml\" sourcestartlinenumber=\"1\">INTERNAL CLASS. DO NOT USE.</p>\n",
  "example": [],
  "syntax": {
    "content": [
      {
        "lang": "csharp",
        "value": "public static class EnumerableExtensions"
      },
      {
        "lang": "vb",
        "value": "Public Module EnumerableExtensions"
      }
    ]
  },
  "inheritance": [
    {
      "uid": "System.Object",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object",
      "name": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object"
        },
        {
          "lang": "vb",
          "value": "Object"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"System.Object\" text=\"object\"/>"
        }
      ],
      "level": 0,
      "index": 0
    }
  ],
  "level": 1,
  "inheritedMembers": [
    {
      "uid": "System.Object.Equals(System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetHashCode",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gethashcode",
      "name": [
        {
          "lang": "csharp",
          "value": "GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "GetHashCode()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "Object.GetHashCode()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gethashcode\">GetHashCode</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetType",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gettype",
      "name": [
        {
          "lang": "csharp",
          "value": "GetType()"
        },
        {
          "lang": "vb",
          "value": "GetType()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.MemberwiseClone",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone",
      "name": [
        {
          "lang": "csharp",
          "value": "MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "MemberwiseClone()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.MemberwiseClone()"
        },
        {
          "lang": "vb",
          "value": "Object.MemberwiseClone()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone\">MemberwiseClone</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ReferenceEquals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.referenceequals",
      "name": [
        {
          "lang": "csharp",
          "value": "ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "ReferenceEquals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ToString",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.tostring",
      "name": [
        {
          "lang": "csharp",
          "value": "ToString()"
        },
        {
          "lang": "vb",
          "value": "ToString()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ToString()"
        },
        {
          "lang": "vb",
          "value": "Object.ToString()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.tostring\">ToString</a>()"
        }
      ],
      "level": 0
    }
  ],
  "_appName": "xunit-proto",
  "_appTitle": "xunit-proto",
  "_enableSearch": true,
  "pdf": false,
  "_systemKeys": [
    "uid",
    "isEii",
    "isExtensionMethod",
    "parent",
    "children",
    "href",
    "langs",
    "name",
    "nameWithType",
    "fullName",
    "type",
    "source",
    "documentation",
    "assemblies",
    "namespace",
    "summary",
    "remarks",
    "example",
    "syntax",
    "overridden",
    "overload",
    "exceptions",
    "seealso",
    "see",
    "inheritance",
    "derivedClasses",
    "level",
    "implements",
    "inheritedMembers",
    "extensionMethods",
    "conceptual",
    "platform",
    "attributes",
    "additionalNotes"
  ],
  "_key": "v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../toc.html",
  "_path": "v3-2.0.0/common/Xunit.Internal.EnumerableExtensions.html",
  "_rel": "../../",
  "_tocKey": "~/v3-2.0.0/common/toc.yml",
  "_tocPath": "v3-2.0.0/common/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}