{
  "uid": "Xunit.v3.ExceptionAggregator",
  "isEii": false,
  "isExtensionMethod": false,
  "parent": {
    "uid": "Xunit.v3",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit.v3"
      },
      {
        "lang": "vb",
        "value": "Xunit.v3"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit.v3"
      },
      {
        "lang": "vb",
        "value": "Xunit.v3"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit.v3"
      },
      {
        "lang": "vb",
        "value": "Xunit.v3"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.v3.html\">v3</a>"
      },
      {
        "lang": "vb",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.v3.html\">v3</a>"
      }
    ],
    "level": 0
  },
  "children": [
    {
      "uid": "Xunit.v3.ExceptionAggregator.#ctor",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator()"
        },
        {
          "lang": "vb",
          "value": "New()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.ExceptionAggregator()"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.New()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.ExceptionAggregator()"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.New()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.#ctor\" text=\"ExceptionAggregator()\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.#ctor\" text=\"ExceptionAggregator()\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public ExceptionAggregator()"
          },
          {
            "lang": "vb",
            "value": "Public Sub New()"
          }
        ]
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": ".ctor",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 23,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.#ctor*",
        "name": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator"
          },
          {
            "lang": "vb",
            "value": "New"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.ExceptionAggregator"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.New"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.ExceptionAggregator"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.New"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.#ctor*\" text=\"ExceptionAggregator\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.#ctor*\" text=\"ExceptionAggregator\"/>"
          }
        ]
      },
      "level": 0,
      "type": "constructor",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Initializes a new instance of the <xref href=\"Xunit.v3.ExceptionAggregator\" data-throw-if-not-resolved=\"false\"></xref> value type.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.Add(System.Exception)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Add(Exception)"
        },
        {
          "lang": "vb",
          "value": "Add(Exception)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.Add(Exception)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.Add(Exception)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.Add(System.Exception)"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.Add(System.Exception)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Add(System.Exception)\" text=\"Add(Exception)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Add(System.Exception)\" text=\"Add(Exception)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public void Add(Exception ex)"
          },
          {
            "lang": "vb",
            "value": "Public Sub Add(ex As Exception)"
          }
        ],
        "parameters": [
          {
            "id": "ex",
            "type": {
              "uid": "System.Exception",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Exception"
                },
                {
                  "lang": "vb",
                  "value": "Exception"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Exception"
                },
                {
                  "lang": "vb",
                  "value": "Exception"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Exception"
                },
                {
                  "lang": "vb",
                  "value": "System.Exception"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The exception to be added.</p>\n"
          }
        ]
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "Add",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 39,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.Add*",
        "name": [
          {
            "lang": "csharp",
            "value": "Add"
          },
          {
            "lang": "vb",
            "value": "Add"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.Add"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.Add"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.Add"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.Add"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Add*\" text=\"Add\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Add*\" text=\"Add\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Adds an exception to the aggregator.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.Aggregate(Xunit.v3.ExceptionAggregator)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Aggregate(ExceptionAggregator)"
        },
        {
          "lang": "vb",
          "value": "Aggregate(ExceptionAggregator)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.Aggregate(ExceptionAggregator)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.Aggregate(ExceptionAggregator)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.Aggregate(Xunit.v3.ExceptionAggregator)"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.Aggregate(Xunit.v3.ExceptionAggregator)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Aggregate(Xunit.v3.ExceptionAggregator)\" text=\"Aggregate(ExceptionAggregator)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Aggregate(Xunit.v3.ExceptionAggregator)\" text=\"Aggregate(ExceptionAggregator)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public void Aggregate(ExceptionAggregator aggregator)"
          },
          {
            "lang": "vb",
            "value": "Public Sub Aggregate(aggregator As ExceptionAggregator)"
          }
        ],
        "parameters": [
          {
            "id": "aggregator",
            "type": {
              "uid": "Xunit.v3.ExceptionAggregator",
              "name": [
                {
                  "lang": "csharp",
                  "value": "ExceptionAggregator"
                },
                {
                  "lang": "vb",
                  "value": "ExceptionAggregator"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "ExceptionAggregator"
                },
                {
                  "lang": "vb",
                  "value": "ExceptionAggregator"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "Xunit.v3.ExceptionAggregator"
                },
                {
                  "lang": "vb",
                  "value": "Xunit.v3.ExceptionAggregator"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"Xunit.v3.ExceptionAggregator\" text=\"ExceptionAggregator\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"Xunit.v3.ExceptionAggregator\" text=\"ExceptionAggregator\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The aggregator whose exceptions should be copied.</p>\n"
          }
        ]
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "Aggregate",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 46,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.Aggregate*",
        "name": [
          {
            "lang": "csharp",
            "value": "Aggregate"
          },
          {
            "lang": "vb",
            "value": "Aggregate"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.Aggregate"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.Aggregate"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.Aggregate"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.Aggregate"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Aggregate*\" text=\"Aggregate\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Aggregate*\" text=\"Aggregate\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Adds exceptions from another aggregator into this aggregator.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.Clear",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Clear()"
        },
        {
          "lang": "vb",
          "value": "Clear()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.Clear()"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.Clear()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.Clear()"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.Clear()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clear\" text=\"Clear()\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clear\" text=\"Clear()\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public void Clear()"
          },
          {
            "lang": "vb",
            "value": "Public Sub Clear()"
          }
        ]
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "Clear",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 52,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.Clear*",
        "name": [
          {
            "lang": "csharp",
            "value": "Clear"
          },
          {
            "lang": "vb",
            "value": "Clear"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.Clear"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.Clear"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.Clear"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.Clear"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clear*\" text=\"Clear\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clear*\" text=\"Clear\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Clears the aggregator.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.Clone",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Clone()"
        },
        {
          "lang": "vb",
          "value": "Clone()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.Clone()"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.Clone()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.Clone()"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.Clone()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clone\" text=\"Clone()\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clone\" text=\"Clone()\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public ExceptionAggregator Clone()"
          },
          {
            "lang": "vb",
            "value": "Public Function Clone() As ExceptionAggregator"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.v3.ExceptionAggregator",
            "name": [
              {
                "lang": "csharp",
                "value": "ExceptionAggregator"
              },
              {
                "lang": "vb",
                "value": "ExceptionAggregator"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ExceptionAggregator"
              },
              {
                "lang": "vb",
                "value": "ExceptionAggregator"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.v3.ExceptionAggregator"
              },
              {
                "lang": "vb",
                "value": "Xunit.v3.ExceptionAggregator"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.v3.ExceptionAggregator\" text=\"ExceptionAggregator\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.v3.ExceptionAggregator\" text=\"ExceptionAggregator\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "Clone",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 58,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.Clone*",
        "name": [
          {
            "lang": "csharp",
            "value": "Clone"
          },
          {
            "lang": "vb",
            "value": "Clone"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.Clone"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.Clone"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.Clone"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.Clone"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clone*\" text=\"Clone\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Clone*\" text=\"Clone\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Clones the aggregator with a copy of the existing exceptions.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.Create",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Create()"
        },
        {
          "lang": "vb",
          "value": "Create()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.Create()"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.Create()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.Create()"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.Create()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Create\" text=\"Create()\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Create\" text=\"Create()\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public static ExceptionAggregator Create()"
          },
          {
            "lang": "vb",
            "value": "Public Shared Function Create() As ExceptionAggregator"
          }
        ],
        "return": {
          "type": {
            "uid": "Xunit.v3.ExceptionAggregator",
            "name": [
              {
                "lang": "csharp",
                "value": "ExceptionAggregator"
              },
              {
                "lang": "vb",
                "value": "ExceptionAggregator"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ExceptionAggregator"
              },
              {
                "lang": "vb",
                "value": "ExceptionAggregator"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "Xunit.v3.ExceptionAggregator"
              },
              {
                "lang": "vb",
                "value": "Xunit.v3.ExceptionAggregator"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"Xunit.v3.ExceptionAggregator\" text=\"ExceptionAggregator\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"Xunit.v3.ExceptionAggregator\" text=\"ExceptionAggregator\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "Create",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 64,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.Create*",
        "name": [
          {
            "lang": "csharp",
            "value": "Create"
          },
          {
            "lang": "vb",
            "value": "Create"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.Create"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.Create"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.Create"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.Create"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Create*\" text=\"Create\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Create*\" text=\"Create\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Creates an empty aggregator.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.HasExceptions",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "HasExceptions"
        },
        {
          "lang": "vb",
          "value": "HasExceptions"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.HasExceptions"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.HasExceptions"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.HasExceptions"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.HasExceptions"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.HasExceptions\" text=\"HasExceptions\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.HasExceptions\" text=\"HasExceptions\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public bool HasExceptions { get; }"
          },
          {
            "lang": "vb",
            "value": "Public ReadOnly Property HasExceptions As Boolean"
          }
        ],
        "parameters": [],
        "return": {
          "type": {
            "uid": "System.Boolean",
            "name": [
              {
                "lang": "csharp",
                "value": "bool"
              },
              {
                "lang": "vb",
                "value": "Boolean"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "bool"
              },
              {
                "lang": "vb",
                "value": "Boolean"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "bool"
              },
              {
                "lang": "vb",
                "value": "Boolean"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Boolean\" text=\"bool\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "HasExceptions",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 32,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.HasExceptions*",
        "name": [
          {
            "lang": "csharp",
            "value": "HasExceptions"
          },
          {
            "lang": "vb",
            "value": "HasExceptions"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.HasExceptions"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.HasExceptions"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.HasExceptions"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.HasExceptions"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.HasExceptions*\" text=\"HasExceptions\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.HasExceptions*\" text=\"HasExceptions\"/>"
          }
        ]
      },
      "level": 0,
      "type": "property",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Returns <code>true</code> if the aggregator has at least one exception inside it.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.Run(System.Action)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Run(Action)"
        },
        {
          "lang": "vb",
          "value": "Run(Action)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.Run(Action)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.Run(Action)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.Run(System.Action)"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.Run(System.Action)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run(System.Action)\" text=\"Run(Action)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run(System.Action)\" text=\"Run(Action)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public void Run(Action code)"
          },
          {
            "lang": "vb",
            "value": "Public Sub Run(code As Action)"
          }
        ],
        "parameters": [
          {
            "id": "code",
            "type": {
              "uid": "System.Action",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Action"
                },
                {
                  "lang": "vb",
                  "value": "Action"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Action"
                },
                {
                  "lang": "vb",
                  "value": "System.Action"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"System.Action\" text=\"Action\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The code to be run.</p>\n"
          }
        ]
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "Run",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 75,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.Run*",
        "name": [
          {
            "lang": "csharp",
            "value": "Run"
          },
          {
            "lang": "vb",
            "value": "Run"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.Run"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.Run"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.Run"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.Run"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run*\" text=\"Run\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run*\" text=\"Run\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Runs the code, catching the exception that is thrown and adding it to\nthe aggregate.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.RunAsync(System.Func{System.Threading.Tasks.ValueTask})",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "RunAsync(Func<ValueTask>)"
        },
        {
          "lang": "vb",
          "value": "RunAsync(Func(Of ValueTask))"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.RunAsync(Func<ValueTask>)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.RunAsync(Func(Of ValueTask))"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.RunAsync(System.Func<System.Threading.Tasks.ValueTask>)"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.RunAsync(System.Func(Of System.Threading.Tasks.ValueTask))"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync(System.Func{System.Threading.Tasks.ValueTask})\" text=\"RunAsync(Func&lt;ValueTask&gt;)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync(System.Func{System.Threading.Tasks.ValueTask})\" text=\"RunAsync(Func&lt;ValueTask&gt;)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public ValueTask RunAsync(Func<ValueTask> code)"
          },
          {
            "lang": "vb",
            "value": "Public Function RunAsync(code As Func(Of ValueTask)) As ValueTask"
          }
        ],
        "parameters": [
          {
            "id": "code",
            "type": {
              "uid": "System.Func{System.Threading.Tasks.ValueTask}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<ValueTask>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of ValueTask)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<ValueTask>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of ValueTask)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<System.Threading.Tasks.ValueTask>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of System.Threading.Tasks.ValueTask)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask\">ValueTask</a>&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask\">ValueTask</a>)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The code to be run.</p>\n"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.ValueTask",
            "name": [
              {
                "lang": "csharp",
                "value": "ValueTask"
              },
              {
                "lang": "vb",
                "value": "ValueTask"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ValueTask"
              },
              {
                "lang": "vb",
                "value": "ValueTask"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.ValueTask"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.ValueTask"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Threading.Tasks.ValueTask\" text=\"ValueTask\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Threading.Tasks.ValueTask\" text=\"ValueTask\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "RunAsync",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 117,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.RunAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "RunAsync"
          },
          {
            "lang": "vb",
            "value": "RunAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.RunAsync"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.RunAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.RunAsync"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.RunAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync*\" text=\"RunAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync*\" text=\"RunAsync\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Runs the code, catching the exception that is thrown and adding it to\nthe aggregate.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.RunAsync``1(System.Func{System.Threading.Tasks.ValueTask{``0}},``0)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "RunAsync<T>(Func<ValueTask<T>>, T)"
        },
        {
          "lang": "vb",
          "value": "RunAsync(Of T)(Func(Of ValueTask(Of T)), T)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.RunAsync<T>(Func<ValueTask<T>>, T)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.RunAsync(Of T)(Func(Of ValueTask(Of T)), T)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.RunAsync<T>(System.Func<System.Threading.Tasks.ValueTask<T>>, T)"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.RunAsync(Of T)(System.Func(Of System.Threading.Tasks.ValueTask(Of T)), T)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync``1(System.Func{System.Threading.Tasks.ValueTask{``0}},``0)\" text=\"RunAsync&lt;T&gt;(Func&lt;ValueTask&lt;T&gt;&gt;, T)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync``1(System.Func{System.Threading.Tasks.ValueTask{``0}},``0)\" text=\"RunAsync&lt;T&gt;(Func&lt;ValueTask&lt;T&gt;&gt;, T)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public ValueTask<T> RunAsync<T>(Func<ValueTask<T>> code, T defaultValue)"
          },
          {
            "lang": "vb",
            "value": "Public Function RunAsync(Of T)(code As Func(Of ValueTask(Of T)), defaultValue As T) As ValueTask(Of T)"
          }
        ],
        "parameters": [
          {
            "id": "code",
            "type": {
              "uid": "System.Func{System.Threading.Tasks.ValueTask{{T}}}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<ValueTask<T>>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of ValueTask(Of T))"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<ValueTask<T>>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of ValueTask(Of T))"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<System.Threading.Tasks.ValueTask<T>>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of System.Threading.Tasks.ValueTask(Of T))"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\">ValueTask</a>&lt;T&gt;&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\">ValueTask</a>(Of T))"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The code to be run.</p>\n"
          },
          {
            "id": "defaultValue",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The default value to return if the lambda throws an exception</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Threading.Tasks.ValueTask{{T}}",
            "definition": "System.Threading.Tasks.ValueTask`1",
            "name": [
              {
                "lang": "csharp",
                "value": "ValueTask<T>"
              },
              {
                "lang": "vb",
                "value": "ValueTask(Of T)"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "ValueTask<T>"
              },
              {
                "lang": "vb",
                "value": "ValueTask(Of T)"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Threading.Tasks.ValueTask<T>"
              },
              {
                "lang": "vb",
                "value": "System.Threading.Tasks.ValueTask(Of T)"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\">ValueTask</a>&lt;T&gt;"
              },
              {
                "lang": "vb",
                "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1\">ValueTask</a>(Of T)"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "RunAsync",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 137,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.RunAsync*",
        "name": [
          {
            "lang": "csharp",
            "value": "RunAsync"
          },
          {
            "lang": "vb",
            "value": "RunAsync"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.RunAsync"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.RunAsync"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.RunAsync"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.RunAsync"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync*\" text=\"RunAsync\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.RunAsync*\" text=\"RunAsync\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Runs the code, catching the exception that is thrown and adding it to\nthe aggregate.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.Run``1(System.Func{``0},``0)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "Run<T>(Func<T>, T)"
        },
        {
          "lang": "vb",
          "value": "Run(Of T)(Func(Of T), T)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.Run<T>(Func<T>, T)"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.Run(Of T)(Func(Of T), T)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.Run<T>(System.Func<T>, T)"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.Run(Of T)(System.Func(Of T), T)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run``1(System.Func{``0},``0)\" text=\"Run&lt;T&gt;(Func&lt;T&gt;, T)\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run``1(System.Func{``0},``0)\" text=\"Run&lt;T&gt;(Func&lt;T&gt;, T)\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public T Run<T>(Func<T> code, T defaultValue)"
          },
          {
            "lang": "vb",
            "value": "Public Function Run(Of T)(code As Func(Of T), defaultValue As T) As T"
          }
        ],
        "parameters": [
          {
            "id": "code",
            "type": {
              "uid": "System.Func{{T}}",
              "definition": "System.Func`1",
              "name": [
                {
                  "lang": "csharp",
                  "value": "Func<T>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T)"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "Func<T>"
                },
                {
                  "lang": "vb",
                  "value": "Func(Of T)"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "System.Func<T>"
                },
                {
                  "lang": "vb",
                  "value": "System.Func(Of T)"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>&lt;T&gt;"
                },
                {
                  "lang": "vb",
                  "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.func-1\">Func</a>(Of T)"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The code to be run.</p>\n"
          },
          {
            "id": "defaultValue",
            "type": {
              "uid": "{T}",
              "definition": "T",
              "name": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "nameWithType": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "fullName": [
                {
                  "lang": "csharp",
                  "value": "T"
                },
                {
                  "lang": "vb",
                  "value": "T"
                }
              ],
              "specName": [
                {
                  "lang": "csharp",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                },
                {
                  "lang": "vb",
                  "value": "<xref uid=\"{T}\" text=\"T\"/>"
                }
              ]
            },
            "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">The default value to return if the lambda throws an exception</p>\n"
          }
        ],
        "typeParameters": [
          {
            "id": "T"
          }
        ],
        "return": {
          "type": {
            "uid": "{T}",
            "definition": "T",
            "name": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "T"
              },
              {
                "lang": "vb",
                "value": "T"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"{T}\" text=\"T\"/>"
              }
            ]
          }
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "Run",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 95,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.Run*",
        "name": [
          {
            "lang": "csharp",
            "value": "Run"
          },
          {
            "lang": "vb",
            "value": "Run"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.Run"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.Run"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.Run"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.Run"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run*\" text=\"Run\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.Run*\" text=\"Run\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Runs the code, catching the exception that is thrown and adding it to\nthe aggregate.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.ThrowIfFaulted",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ThrowIfFaulted()"
        },
        {
          "lang": "vb",
          "value": "ThrowIfFaulted()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.ThrowIfFaulted()"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.ThrowIfFaulted()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.ThrowIfFaulted()"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.ThrowIfFaulted()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ThrowIfFaulted\" text=\"ThrowIfFaulted()\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ThrowIfFaulted\" text=\"ThrowIfFaulted()\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public void ThrowIfFaulted()"
          },
          {
            "lang": "vb",
            "value": "Public Sub ThrowIfFaulted()"
          }
        ]
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "ThrowIfFaulted",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 160,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.ThrowIfFaulted*",
        "name": [
          {
            "lang": "csharp",
            "value": "ThrowIfFaulted"
          },
          {
            "lang": "vb",
            "value": "ThrowIfFaulted"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.ThrowIfFaulted"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.ThrowIfFaulted"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.ThrowIfFaulted"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.ThrowIfFaulted"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ThrowIfFaulted*\" text=\"ThrowIfFaulted\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ThrowIfFaulted*\" text=\"ThrowIfFaulted\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Throws an exception if the aggregator contains any exceptions. If the aggregator contains\na single exception, it will be re-thrown without losing the original stack trace; if\nthe aggregator contains more than one exception, then the original exceptions will be\nwrapped up into an instance of <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n",
      "platform": null
    },
    {
      "uid": "Xunit.v3.ExceptionAggregator.ToException",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "Xunit.v3.ExceptionAggregator",
      "isExternal": false,
      "name": [
        {
          "lang": "csharp",
          "value": "ToException()"
        },
        {
          "lang": "vb",
          "value": "ToException()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ExceptionAggregator.ToException()"
        },
        {
          "lang": "vb",
          "value": "ExceptionAggregator.ToException()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "Xunit.v3.ExceptionAggregator.ToException()"
        },
        {
          "lang": "vb",
          "value": "Xunit.v3.ExceptionAggregator.ToException()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ToException\" text=\"ToException()\"/>"
        },
        {
          "lang": "vb",
          "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ToException\" text=\"ToException()\"/>"
        }
      ],
      "syntax": {
        "content": [
          {
            "lang": "csharp",
            "value": "public Exception? ToException()"
          },
          {
            "lang": "vb",
            "value": "Public Function ToException() As Exception"
          }
        ],
        "return": {
          "type": {
            "uid": "System.Exception",
            "name": [
              {
                "lang": "csharp",
                "value": "Exception"
              },
              {
                "lang": "vb",
                "value": "Exception"
              }
            ],
            "nameWithType": [
              {
                "lang": "csharp",
                "value": "Exception"
              },
              {
                "lang": "vb",
                "value": "Exception"
              }
            ],
            "fullName": [
              {
                "lang": "csharp",
                "value": "System.Exception"
              },
              {
                "lang": "vb",
                "value": "System.Exception"
              }
            ],
            "specName": [
              {
                "lang": "csharp",
                "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
              },
              {
                "lang": "vb",
                "value": "<xref uid=\"System.Exception\" text=\"Exception\"/>"
              }
            ]
          },
          "description": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Returns <code>null</code> if no exceptions were thrown; returns the\nexact exception if a single exception was thrown; returns <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>\nif more than one exception was thrown.</p>\n"
        }
      },
      "source": {
        "remote": {
          "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
          "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
          "repo": "https://github.com/xunit/xunit.git"
        },
        "id": "ToException",
        "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
        "startLine": 176,
        "endLine": 0
      },
      "assemblies": [
        "xunit.v3.core"
      ],
      "namespace": "Xunit.v3",
      "example": [],
      "overload": {
        "uid": "Xunit.v3.ExceptionAggregator.ToException*",
        "name": [
          {
            "lang": "csharp",
            "value": "ToException"
          },
          {
            "lang": "vb",
            "value": "ToException"
          }
        ],
        "nameWithType": [
          {
            "lang": "csharp",
            "value": "ExceptionAggregator.ToException"
          },
          {
            "lang": "vb",
            "value": "ExceptionAggregator.ToException"
          }
        ],
        "fullName": [
          {
            "lang": "csharp",
            "value": "Xunit.v3.ExceptionAggregator.ToException"
          },
          {
            "lang": "vb",
            "value": "Xunit.v3.ExceptionAggregator.ToException"
          }
        ],
        "specName": [
          {
            "lang": "csharp",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ToException*\" text=\"ToException\"/>"
          },
          {
            "lang": "vb",
            "value": "<xref uid=\"Xunit.v3.ExceptionAggregator.ToException*\" text=\"ToException\"/>"
          }
        ]
      },
      "level": 0,
      "type": "method",
      "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Returns an exception that represents the exceptions thrown by the code\npassed to the <xref href=\"Xunit.v3.ExceptionAggregator.Run(System.Action)\" data-throw-if-not-resolved=\"false\"></xref> or RunAsync methods.</p>\n",
      "platform": null
    }
  ],
  "langs": [
    "csharp",
    "vb"
  ],
  "name": [
    {
      "lang": "csharp",
      "value": "ExceptionAggregator"
    },
    {
      "lang": "vb",
      "value": "ExceptionAggregator"
    }
  ],
  "nameWithType": [
    {
      "lang": "csharp",
      "value": "ExceptionAggregator"
    },
    {
      "lang": "vb",
      "value": "ExceptionAggregator"
    }
  ],
  "fullName": [
    {
      "lang": "csharp",
      "value": "Xunit.v3.ExceptionAggregator"
    },
    {
      "lang": "vb",
      "value": "Xunit.v3.ExceptionAggregator"
    }
  ],
  "type": "struct",
  "source": {
    "remote": {
      "path": "src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
      "branch": "229879b7653ec0573f36ca4759ccfc915be11a21",
      "repo": "https://github.com/xunit/xunit.git"
    },
    "id": "ExceptionAggregator",
    "path": "../v3/v3-2.0.0/src/xunit.v3.core/Exceptions/ExceptionAggregator.cs",
    "startLine": 16,
    "endLine": 0
  },
  "assemblies": [
    "xunit.v3.core"
  ],
  "namespace": {
    "uid": "Xunit.v3",
    "isEii": false,
    "isExtensionMethod": false,
    "href": "Xunit.html",
    "name": [
      {
        "lang": "csharp",
        "value": "Xunit.v3"
      },
      {
        "lang": "vb",
        "value": "Xunit.v3"
      }
    ],
    "nameWithType": [
      {
        "lang": "csharp",
        "value": "Xunit.v3"
      },
      {
        "lang": "vb",
        "value": "Xunit.v3"
      }
    ],
    "fullName": [
      {
        "lang": "csharp",
        "value": "Xunit.v3"
      },
      {
        "lang": "vb",
        "value": "Xunit.v3"
      }
    ],
    "specName": [
      {
        "lang": "csharp",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.v3.html\">v3</a>"
      },
      {
        "lang": "vb",
        "value": "<a class=\"xref\" href=\"Xunit.html\">Xunit</a>.<a class=\"xref\" href=\"Xunit.v3.html\">v3</a>"
      }
    ],
    "level": 0
  },
  "summary": "<p sourcefile=\"v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml\" sourcestartlinenumber=\"1\">Aggregates exceptions. Intended to run one or more code blocks, and collect the\nexceptions thrown by those code blocks.</p>\n",
  "example": [],
  "syntax": {
    "content": [
      {
        "lang": "csharp",
        "value": "public struct ExceptionAggregator"
      },
      {
        "lang": "vb",
        "value": "Public Structure ExceptionAggregator"
      }
    ]
  },
  "level": 0,
  "inheritedMembers": [
    {
      "uid": "System.ValueType.Equals(System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.ValueType",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.valuetype.equals",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ValueType.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "ValueType.Equals(Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.ValueType.Equals(object)"
        },
        {
          "lang": "vb",
          "value": "System.ValueType.Equals(Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.valuetype.equals\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.valuetype.equals\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.ValueType.GetHashCode",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.ValueType",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode",
      "name": [
        {
          "lang": "csharp",
          "value": "GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "GetHashCode()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ValueType.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "ValueType.GetHashCode()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.ValueType.GetHashCode()"
        },
        {
          "lang": "vb",
          "value": "System.ValueType.GetHashCode()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode\">GetHashCode</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode\">GetHashCode</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.ValueType.ToString",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.ValueType",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.valuetype.tostring",
      "name": [
        {
          "lang": "csharp",
          "value": "ToString()"
        },
        {
          "lang": "vb",
          "value": "ToString()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "ValueType.ToString()"
        },
        {
          "lang": "vb",
          "value": "ValueType.ToString()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "System.ValueType.ToString()"
        },
        {
          "lang": "vb",
          "value": "System.ValueType.ToString()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.valuetype.tostring\">ToString</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.valuetype.tostring\">ToString</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.Equals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)",
      "name": [
        {
          "lang": "csharp",
          "value": "Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Equals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.Equals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.Equals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)\">Equals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.GetType",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.gettype",
      "name": [
        {
          "lang": "csharp",
          "value": "GetType()"
        },
        {
          "lang": "vb",
          "value": "GetType()"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.GetType()"
        },
        {
          "lang": "vb",
          "value": "Object.GetType()"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.gettype\">GetType</a>()"
        }
      ],
      "level": 0
    },
    {
      "uid": "System.Object.ReferenceEquals(System.Object,System.Object)",
      "isEii": false,
      "isExtensionMethod": false,
      "parent": "System.Object",
      "isExternal": true,
      "href": "https://learn.microsoft.com/dotnet/api/system.object.referenceequals",
      "name": [
        {
          "lang": "csharp",
          "value": "ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "ReferenceEquals(Object, Object)"
        }
      ],
      "nameWithType": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "fullName": [
        {
          "lang": "csharp",
          "value": "object.ReferenceEquals(object, object)"
        },
        {
          "lang": "vb",
          "value": "Object.ReferenceEquals(Object, Object)"
        }
      ],
      "specName": [
        {
          "lang": "csharp",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">object</a>)"
        },
        {
          "lang": "vb",
          "value": "<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object.referenceequals\">ReferenceEquals</a>(<a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>, <a class=\"xref\" href=\"https://learn.microsoft.com/dotnet/api/system.object\">Object</a>)"
        }
      ],
      "level": 0
    }
  ],
  "_appName": "xunit-proto",
  "_appTitle": "xunit-proto",
  "_enableSearch": true,
  "pdf": false,
  "_systemKeys": [
    "uid",
    "isEii",
    "isExtensionMethod",
    "parent",
    "children",
    "href",
    "langs",
    "name",
    "nameWithType",
    "fullName",
    "type",
    "source",
    "documentation",
    "assemblies",
    "namespace",
    "summary",
    "remarks",
    "example",
    "syntax",
    "overridden",
    "overload",
    "exceptions",
    "seealso",
    "see",
    "inheritance",
    "derivedClasses",
    "level",
    "implements",
    "inheritedMembers",
    "extensionMethods",
    "conceptual",
    "platform",
    "attributes",
    "additionalNotes"
  ],
  "_key": "v3-2.0.0/core/Xunit.v3.ExceptionAggregator.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../../toc.html",
  "_path": "v3-2.0.0/core/Xunit.v3.ExceptionAggregator.html",
  "_rel": "../../",
  "_tocKey": "~/v3-2.0.0/core/toc.yml",
  "_tocPath": "v3-2.0.0/core/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}