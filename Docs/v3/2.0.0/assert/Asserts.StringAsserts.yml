### YamlMime:ManagedReference
items:
- uid: Asserts.StringAsserts
  commentId: T:Asserts.StringAsserts
  id: StringAsserts
  parent: Asserts
  children:
  - Asserts.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.Contains(System.String,System.String)
  - Asserts.StringAsserts.Contains(System.String,System.String,System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.DoesNotContain(System.String,System.String)
  - Asserts.StringAsserts.DoesNotContain(System.String,System.String,System.StringComparison)
  - Asserts.StringAsserts.DoesNotMatch(System.String,System.String)
  - Asserts.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  - Asserts.StringAsserts.Empty(System.String)
  - Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.EndsWith(System.String,System.String)
  - Asserts.StringAsserts.EndsWith(System.String,System.String,System.StringComparison)
  - Asserts.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Equal(System.String,System.String)
  - Asserts.StringAsserts.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Asserts.StringAsserts.Matches(System.String,System.String)
  - Asserts.StringAsserts.Matches(System.Text.RegularExpressions.Regex,System.String)
  - Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  - Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  - Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  - Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char})
  - Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  - Asserts.StringAsserts.StartsWith(System.String,System.String)
  - Asserts.StringAsserts.StartsWith(System.String,System.String,System.StringComparison)
  langs:
  - csharp
  - vb
  name: StringAsserts
  nameWithType: StringAsserts
  fullName: Asserts.StringAsserts
  type: Class
  source:
    id: StringAsserts
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 22
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  syntax:
    content: public class StringAsserts
    content.vb: Public Class StringAsserts
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Asserts.StringAsserts.Contains(System.String,System.String)
  commentId: M:Asserts.StringAsserts.Contains(System.String,System.String)
  id: Contains(System.String,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(string, string?)
  nameWithType: StringAsserts.Contains(string, string?)
  fullName: Asserts.StringAsserts.Contains(string, string?)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 38
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(string expectedSubstring, string? actualString)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As String, actualString As String)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(String, String)
  fullName.vb: Asserts.StringAsserts.Contains(String, String)
  name.vb: Contains(String, String)
- uid: Asserts.StringAsserts.Contains(System.String,System.String,System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.String,System.String,System.StringComparison)
  id: Contains(System.String,System.String,System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(string, string?, StringComparison)
  nameWithType: StringAsserts.Contains(string, string?, StringComparison)
  fullName: Asserts.StringAsserts.Contains(string, string?, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 60
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(string expectedSubstring, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As String, actualString As String, comparisonType As StringComparison)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(String, String, StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(String, String, System.StringComparison)
  name.vb: Contains(String, String, StringComparison)
- uid: Asserts.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char})
  id: Contains(System.Memory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, Memory<char>)
  nameWithType: StringAsserts.Contains(Memory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.Contains(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 87
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Memory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: Contains(Memory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.Contains(Memory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.Contains(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 104
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Contains(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: StringAsserts.Contains(ReadOnlyMemory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 121
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: Contains(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 138
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: Contains(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.Contains(Memory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 156
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: Contains(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: Contains(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.Contains(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 175
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: Contains(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.Contains(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 194
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.Contains(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 213
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: Contains(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.Contains(Span<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 236
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: Contains(Span(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.Contains(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 255
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: Contains(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.Contains(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 274
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.Contains(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 293
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.Span{System.Char},System.Span{System.Char})
  id: Contains(System.Span{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, Span<char>)
  nameWithType: StringAsserts.Contains(Span<char>, Span<char>)
  fullName: Asserts.StringAsserts.Contains(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 317
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Span(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.Span(Of Char), System.Span(Of Char))
  name.vb: Contains(Span(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: Contains(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(Span<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.Contains(Span<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.Contains(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 334
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(Span<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Contains(Span(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: Contains(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, Span<char>)
  nameWithType: StringAsserts.Contains(ReadOnlySpan<char>, Span<char>)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 351
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: Contains(ReadOnlySpan(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Contains(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.Contains(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.Contains(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 368
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string contains a given string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Contains(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The string expected to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub Contains(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string is not present inside the string
  nameWithType.vb: StringAsserts.Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.Contains(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Contains(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.String,System.String)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.String,System.String)
  id: DoesNotContain(System.String,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(string, string?)
  nameWithType: StringAsserts.DoesNotContain(string, string?)
  fullName: Asserts.StringAsserts.DoesNotContain(string, string?)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 385
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(string expectedSubstring, string? actualString)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As String, actualString As String)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(String, String)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(String, String)
  name.vb: DoesNotContain(String, String)
- uid: Asserts.StringAsserts.DoesNotContain(System.String,System.String,System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.String,System.String,System.StringComparison)
  id: DoesNotContain(System.String,System.String,System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(string, string?, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(string, string?, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(string, string?, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 407
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(string expectedSubstring, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedSubstring
      type: System.String
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As String, actualString As String, comparisonType As StringComparison)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(String, String, StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(String, String, System.StringComparison)
  name.vb: DoesNotContain(String, String, StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  id: DoesNotContain(System.Memory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, Memory<char>)
  nameWithType: StringAsserts.DoesNotContain(Memory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 438
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Memory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: DoesNotContain(Memory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.DoesNotContain(Memory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 455
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlyMemory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 472
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 489
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: DoesNotContain(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(Memory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 507
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: DoesNotContain(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 526
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Memory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Memory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 545
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 564
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlyMemory<char> expectedSubstring, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: DoesNotContain(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(Span<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 587
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Span(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 606
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 625
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 644
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  id: DoesNotContain(System.Span{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, Span<char>)
  nameWithType: StringAsserts.DoesNotContain(Span<char>, Span<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 666
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Span(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Span(Of Char), System.Span(Of Char))
  name.vb: DoesNotContain(Span(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: DoesNotContain(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(Span<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.DoesNotContain(Span<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 683
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(Span<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.Span{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: DoesNotContain(Span(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, Span<char>)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlySpan<char>, Span<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 700
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, Span<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: DoesNotContain(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.DoesNotContain(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 717
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not contain a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotContain(ReadOnlySpan<char> expectedSubstring, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedSubstring
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected not to be in the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotContain(expectedSubstring As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-string is present inside the string
  nameWithType.vb: StringAsserts.DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.DoesNotContain(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: DoesNotContain(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.DoesNotMatch(System.String,System.String)
  commentId: M:Asserts.StringAsserts.DoesNotMatch(System.String,System.String)
  id: DoesNotMatch(System.String,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotMatch(string, string?)
  nameWithType: StringAsserts.DoesNotMatch(string, string?)
  fullName: Asserts.StringAsserts.DoesNotMatch(string, string?)
  type: Method
  source:
    id: DoesNotMatch
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 734
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not match a regular expression.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotMatch(string expectedRegexPattern, string? actualString)
    parameters:
    - id: expectedRegexPattern
      type: System.String
      description: The regex pattern expected not to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotMatch(expectedRegexPattern As String, actualString As String)
  overload: Asserts.StringAsserts.DoesNotMatch*
  exceptions:
  - type: Xunit.Sdk.DoesNotMatchException
    commentId: T:Xunit.Sdk.DoesNotMatchException
    description: Thrown when the string matches the regex pattern
  nameWithType.vb: StringAsserts.DoesNotMatch(String, String)
  fullName.vb: Asserts.StringAsserts.DoesNotMatch(String, String)
  name.vb: DoesNotMatch(String, String)
- uid: Asserts.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  commentId: M:Asserts.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  id: DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: DoesNotMatch(Regex, string?)
  nameWithType: StringAsserts.DoesNotMatch(Regex, string?)
  fullName: Asserts.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex, string?)
  type: Method
  source:
    id: DoesNotMatch
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 770
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string does not match a regular expression.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void DoesNotMatch(Regex expectedRegex, string? actualString)
    parameters:
    - id: expectedRegex
      type: System.Text.RegularExpressions.Regex
      description: The regex expected not to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub DoesNotMatch(expectedRegex As Regex, actualString As String)
  overload: Asserts.StringAsserts.DoesNotMatch*
  exceptions:
  - type: Xunit.Sdk.DoesNotMatchException
    commentId: T:Xunit.Sdk.DoesNotMatchException
    description: Thrown when the string matches the regex
  nameWithType.vb: StringAsserts.DoesNotMatch(Regex, String)
  fullName.vb: Asserts.StringAsserts.DoesNotMatch(System.Text.RegularExpressions.Regex, String)
  name.vb: DoesNotMatch(Regex, String)
- uid: Asserts.StringAsserts.Empty(System.String)
  commentId: M:Asserts.StringAsserts.Empty(System.String)
  id: Empty(System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Empty(string)
  nameWithType: StringAsserts.Empty(string)
  fullName: Asserts.StringAsserts.Empty(string)
  type: Method
  source:
    id: Empty
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 805
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string is empty.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Empty(string value)
    parameters:
    - id: value
      type: System.String
      description: The string value to be inspected
    content.vb: Public Shared Sub Empty(value As String)
  overload: Asserts.StringAsserts.Empty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the string is null
  - type: Xunit.Sdk.EmptyException
    commentId: T:Xunit.Sdk.EmptyException
    description: Thrown when the string is not empty
  nameWithType.vb: StringAsserts.Empty(String)
  fullName.vb: Asserts.StringAsserts.Empty(String)
  name.vb: Empty(String)
- uid: Asserts.StringAsserts.EndsWith(System.String,System.String)
  commentId: M:Asserts.StringAsserts.EndsWith(System.String,System.String)
  id: EndsWith(System.String,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(string?, string?)
  nameWithType: StringAsserts.EndsWith(string?, string?)
  fullName: Asserts.StringAsserts.EndsWith(string?, string?)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 825
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(string? expectedEndString, string? actualString)
    parameters:
    - id: expectedEndString
      type: System.String
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As String, actualString As String)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(String, String)
  fullName.vb: Asserts.StringAsserts.EndsWith(String, String)
  name.vb: EndsWith(String, String)
- uid: Asserts.StringAsserts.EndsWith(System.String,System.String,System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.String,System.String,System.StringComparison)
  id: EndsWith(System.String,System.String,System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(string?, string?, StringComparison)
  nameWithType: StringAsserts.EndsWith(string?, string?, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(string?, string?, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 848
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(string? expectedEndString, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedEndString
      type: System.String
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As String, actualString As String, comparisonType As StringComparison)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(String, String, StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(String, String, System.StringComparison)
  name.vb: EndsWith(String, String, StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  id: EndsWith(System.Memory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, Memory<char>)
  nameWithType: StringAsserts.EndsWith(Memory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 874
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Memory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: EndsWith(Memory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.EndsWith(Memory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 891
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: StringAsserts.EndsWith(ReadOnlyMemory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 908
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 925
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: EndsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(Memory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 943
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: EndsWith(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: EndsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 962
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Memory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: EndsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 981
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1000
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlyMemory<char> expectedEndString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char})
  id: EndsWith(System.Span{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, Span<char>)
  nameWithType: StringAsserts.EndsWith(Span<char>, Span<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1022
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, Span<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Span(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Span(Of Char), System.Span(Of Char))
  name.vb: EndsWith(Span(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.EndsWith(Span<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1039
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: EndsWith(Span(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, Span<char>)
  nameWithType: StringAsserts.EndsWith(ReadOnlySpan<char>, Span<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1056
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: EndsWith(ReadOnlySpan(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1073
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: EndsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(Span<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1091
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: EndsWith(Span(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: EndsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1110
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(Span<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: EndsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1129
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.EndsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: EndsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1148
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string ends with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void EndsWith(ReadOnlySpan<char> expectedEndString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedEndString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the end of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub EndsWith(expectedEndString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.EndsWith*
  exceptions:
  - type: Xunit.Sdk.EndsWithException
    commentId: T:Xunit.Sdk.EndsWithException
    description: Thrown when the string does not end with the expected sub-string
  nameWithType.vb: StringAsserts.EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.EndsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: EndsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: Asserts.StringAsserts.Equal(System.String,System.String)
  commentId: M:Asserts.StringAsserts.Equal(System.String,System.String)
  id: Equal(System.String,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(string?, string?)
  nameWithType: StringAsserts.Equal(string?, string?)
  fullName: Asserts.StringAsserts.Equal(string?, string?)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1169
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(string? expected, string? actual)
    parameters:
    - id: expected
      type: System.String
      description: The expected string value.
    - id: actual
      type: System.String
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As String, actual As String)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(String, String)
  fullName.vb: Asserts.StringAsserts.Equal(String, String)
  name.vb: Equal(String, String)
- uid: Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(ReadOnlySpan<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1223
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As ReadOnlySpan(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char})
  id: Equal(System.Memory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, Memory<char>)
  nameWithType: StringAsserts.Equal(Memory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.Equal(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1248
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Memory<char> expected, Memory<char> actual)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As Memory(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Memory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: Equal(Memory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.Equal(Memory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.Equal(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1265
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Equal(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: StringAsserts.Equal(ReadOnlyMemory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1282
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As Memory(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: Equal(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1299
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Memory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, Memory<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(Memory<char>, Memory<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.Memory<char>, System.Memory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1347
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Memory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As Memory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Memory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.Memory(Of Char), System.Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Memory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Memory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(Memory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.Memory<char>, System.ReadOnlyMemory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1399
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Memory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Memory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As Memory(Of Char), actual As ReadOnlyMemory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Memory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Memory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, Memory<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(ReadOnlyMemory<char>, Memory<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.Memory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1451
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, Memory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Memory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As Memory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlyMemory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlyMemory(Of Char), Memory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(ReadOnlyMemory<char>, ReadOnlyMemory<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1503
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlyMemory<char> expected, ReadOnlyMemory<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlyMemory{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlyMemory{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As ReadOnlyMemory(Of Char), actual As ReadOnlyMemory(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char})
  id: Equal(System.Span{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, Span<char>)
  nameWithType: StringAsserts.Equal(Span<char>, Span<char>)
  fullName: Asserts.StringAsserts.Equal(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1535
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Span<char> expected, Span<char> actual)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As Span(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Span(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.Span(Of Char), System.Span(Of Char))
  name.vb: Equal(Span(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.Equal(Span<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.Equal(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1552
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Span<char> expected, ReadOnlySpan<char> actual)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Equal(Span(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, Span<char>)
  nameWithType: StringAsserts.Equal(ReadOnlySpan<char>, Span<char>)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1569
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, Span<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As Span(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: Equal(ReadOnlySpan(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: Equal(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.Equal(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1586
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, ReadOnlySpan<char> actual)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: Equal(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Span{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, Span<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(Span<char>, Span<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.Span<char>, System.Span<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1634
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Span<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, ignores all white space differences during comparison.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As Span(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Span(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.Span(Of Char), System.Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Span(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(Span<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(Span<char>, ReadOnlySpan<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.Span<char>, System.ReadOnlySpan<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1686
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(Span<char> expected, ReadOnlySpan<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.Span{System.Char}
      description: The expected string value.
    - id: actual
      type: System.ReadOnlySpan{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, ignores all white space differences during comparison.
    content.vb: Public Shared Sub Equal(expected As Span(Of Char), actual As ReadOnlySpan(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(Span(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.Span(Of Char), System.ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(Span(Of Char), ReadOnlySpan(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(ReadOnlySpan<char>, Span<char>, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(ReadOnlySpan<char>, Span<char>, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(System.ReadOnlySpan<char>, System.Span<char>, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1738
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(ReadOnlySpan<char> expected, Span<char> actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.ReadOnlySpan{System.Char}
      description: The expected string value.
    - id: actual
      type: System.Span{System.Char}
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats spaces and tabs (in any non-zero quantity) as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, removes all whitespaces and tabs before comparing.
    content.vb: Public Shared Sub Equal(expected As ReadOnlySpan(Of Char), actual As Span(Of Char), ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(ReadOnlySpan(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(System.ReadOnlySpan(Of Char), System.Span(Of Char), Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(ReadOnlySpan(Of Char), Span(Of Char), Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Asserts.StringAsserts.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Equal(string?, string?, bool, bool, bool, bool)
  nameWithType: StringAsserts.Equal(string?, string?, bool, bool, bool, bool)
  fullName: Asserts.StringAsserts.Equal(string?, string?, bool, bool, bool, bool)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1790
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two strings are equivalent.
  remarks: >-
    The <code class="paramref">ignoreWhiteSpaceDifferences</code> and <code class="paramref">ignoreAllWhiteSpace</code> flags consider

    the following characters to be white-space:

    <a href="https://unicode-explorer.com/c/0009">Tab</a> (\t),

    <a href="https://unicode-explorer.com/c/0020">Space</a> (\u0020),

    <a href="https://unicode-explorer.com/c/00A0">No-Break Space</a> (\u00A0),

    <a href="https://unicode-explorer.com/c/1680">Ogham Space Mark</a> (\u1680),

    <a href="https://unicode-explorer.com/c/180E">Mongolian Vowel Separator</a> (\u180E),

    <a href="https://unicode-explorer.com/c/2000">En Quad</a> (\u2000),

    <a href="https://unicode-explorer.com/c/2001">Em Quad</a> (\u2001),

    <a href="https://unicode-explorer.com/c/2002">En Space</a> (\u2002),

    <a href="https://unicode-explorer.com/c/2003">Em Space</a> (\u2003),

    <a href="https://unicode-explorer.com/c/2004">Three-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2005">Four-Per-Em Space</a> (\u2004),

    <a href="https://unicode-explorer.com/c/2006">Six-Per-Em Space</a> (\u2006),

    <a href="https://unicode-explorer.com/c/2007">Figure Space</a> (\u2007),

    <a href="https://unicode-explorer.com/c/2008">Punctuation Space</a> (\u2008),

    <a href="https://unicode-explorer.com/c/2009">Thin Space</a> (\u2009),

    <a href="https://unicode-explorer.com/c/200A">Hair Space</a> (\u200A),

    <a href="https://unicode-explorer.com/c/200B">Zero Width Space</a> (\u200B),

    <a href="https://unicode-explorer.com/c/202F">Narrow No-Break Space</a> (\u202F),

    <a href="https://unicode-explorer.com/c/205F">Medium Mathematical Space</a> (\u205F),

    <a href="https://unicode-explorer.com/c/3000">Ideographic Space</a> (\u3000),

    and <a href="https://unicode-explorer.com/c/FEFF">Zero Width No-Break Space</a> (\uFEFF).

    In particular, it does not include carriage return (\r) or line feed (\n), which are covered by

    <code class="paramref">ignoreLineEndingDifferences</code>.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Equal(string? expected, string? actual, bool ignoreCase = false, bool ignoreLineEndingDifferences = false, bool ignoreWhiteSpaceDifferences = false, bool ignoreAllWhiteSpace = false)
    parameters:
    - id: expected
      type: System.String
      description: The expected string value.
    - id: actual
      type: System.String
      description: The actual string value.
    - id: ignoreCase
      type: System.Boolean
      description: If set to <code>true</code>, ignores cases differences. The invariant culture is used.
    - id: ignoreLineEndingDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats \r\n, \r, and \n as equivalent.
    - id: ignoreWhiteSpaceDifferences
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks) in any non-zero quantity as equivalent.
    - id: ignoreAllWhiteSpace
      type: System.Boolean
      description: If set to <code>true</code>, treats horizontal white-space (i.e. spaces, tabs, and others; see remarks), including zero quantities, as equivalent.
    content.vb: Public Shared Sub Equal(expected As String, actual As String, ignoreCase As Boolean = False, ignoreLineEndingDifferences As Boolean = False, ignoreWhiteSpaceDifferences As Boolean = False, ignoreAllWhiteSpace As Boolean = False)
  overload: Asserts.StringAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the strings are not equivalent.
  nameWithType.vb: StringAsserts.Equal(String, String, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: Asserts.StringAsserts.Equal(String, String, Boolean, Boolean, Boolean, Boolean)
  name.vb: Equal(String, String, Boolean, Boolean, Boolean, Boolean)
- uid: Asserts.StringAsserts.Matches(System.String,System.String)
  commentId: M:Asserts.StringAsserts.Matches(System.String,System.String)
  id: Matches(System.String,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Matches(string, string?)
  nameWithType: StringAsserts.Matches(string, string?)
  fullName: Asserts.StringAsserts.Matches(string, string?)
  type: Method
  source:
    id: Matches
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1823
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string matches a regular expression.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Matches(string expectedRegexPattern, string? actualString)
    parameters:
    - id: expectedRegexPattern
      type: System.String
      description: The regex pattern expected to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub Matches(expectedRegexPattern As String, actualString As String)
  overload: Asserts.StringAsserts.Matches*
  exceptions:
  - type: Xunit.Sdk.MatchesException
    commentId: T:Xunit.Sdk.MatchesException
    description: Thrown when the string does not match the regex pattern
  nameWithType.vb: StringAsserts.Matches(String, String)
  fullName.vb: Asserts.StringAsserts.Matches(String, String)
  name.vb: Matches(String, String)
- uid: Asserts.StringAsserts.Matches(System.Text.RegularExpressions.Regex,System.String)
  commentId: M:Asserts.StringAsserts.Matches(System.Text.RegularExpressions.Regex,System.String)
  id: Matches(System.Text.RegularExpressions.Regex,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: Matches(Regex, string?)
  nameWithType: StringAsserts.Matches(Regex, string?)
  fullName: Asserts.StringAsserts.Matches(System.Text.RegularExpressions.Regex, string?)
  type: Method
  source:
    id: Matches
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1850
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string matches a regular expression.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void Matches(Regex expectedRegex, string? actualString)
    parameters:
    - id: expectedRegex
      type: System.Text.RegularExpressions.Regex
      description: The regex expected to match
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub Matches(expectedRegex As Regex, actualString As String)
  overload: Asserts.StringAsserts.Matches*
  exceptions:
  - type: Xunit.Sdk.MatchesException
    commentId: T:Xunit.Sdk.MatchesException
    description: Thrown when the string does not match the regex
  nameWithType.vb: StringAsserts.Matches(Regex, String)
  fullName.vb: Asserts.StringAsserts.Matches(System.Text.RegularExpressions.Regex, String)
  name.vb: Matches(Regex, String)
- uid: Asserts.StringAsserts.StartsWith(System.String,System.String)
  commentId: M:Asserts.StringAsserts.StartsWith(System.String,System.String)
  id: StartsWith(System.String,System.String)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(string?, string?)
  nameWithType: StringAsserts.StartsWith(string?, string?)
  fullName: Asserts.StringAsserts.StartsWith(string?, string?)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1876
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(string? expectedStartString, string? actualString)
    parameters:
    - id: expectedStartString
      type: System.String
      description: The string expected to be at the start of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As String, actualString As String)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(String, String)
  fullName.vb: Asserts.StringAsserts.StartsWith(String, String)
  name.vb: StartsWith(String, String)
- uid: Asserts.StringAsserts.StartsWith(System.String,System.String,System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.String,System.String,System.StringComparison)
  id: StartsWith(System.String,System.String,System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(string?, string?, StringComparison)
  nameWithType: StringAsserts.StartsWith(string?, string?, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(string?, string?, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1899
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(string? expectedStartString, string? actualString, StringComparison comparisonType)
    parameters:
    - id: expectedStartString
      type: System.String
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.String
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As String, actualString As String, comparisonType As StringComparison)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(String, String, StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(String, String, System.StringComparison)
  name.vb: StartsWith(String, String, StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  id: StartsWith(System.Memory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, Memory<char>)
  nameWithType: StringAsserts.StartsWith(Memory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.Memory<char>, System.Memory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1925
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Memory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Memory(Of Char), System.Memory(Of Char))
  name.vb: StartsWith(Memory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  id: StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.StartsWith(Memory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.Memory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1942
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, Memory<char>)
  nameWithType: StringAsserts.StartsWith(ReadOnlyMemory<char>, Memory<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.Memory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1959
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char))
  name.vb: StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  nameWithType: StringAsserts.StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1976
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the default StringComparison.CurrentCulture comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char))
  name.vb: StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: StartsWith(System.Memory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(Memory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.Memory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 1994
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Memory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Memory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: StartsWith(Memory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: StartsWith(System.Memory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(Memory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.Memory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2013
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Memory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Memory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Memory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Memory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: StartsWith(Memory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.Memory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(ReadOnlyMemory<char>, Memory<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.Memory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2032
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, Memory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Memory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As Memory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.Memory(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlyMemory(Of Char), Memory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(ReadOnlyMemory<char>, ReadOnlyMemory<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory<char>, System.ReadOnlyMemory<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2051
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlyMemory<char> expectedStartString, ReadOnlyMemory<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlyMemory{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlyMemory{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlyMemory(Of Char), actualString As ReadOnlyMemory(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlyMemory(Of Char), System.ReadOnlyMemory(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlyMemory(Of Char), ReadOnlyMemory(Of Char), StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char})
  id: StartsWith(System.Span{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, Span<char>)
  nameWithType: StringAsserts.StartsWith(Span<char>, Span<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.Span<char>, System.Span<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2073
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, Span<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Span(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Span(Of Char), System.Span(Of Char))
  name.vb: StartsWith(Span(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  id: StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.StartsWith(Span<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.Span<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2090
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Span(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: StartsWith(Span(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  id: StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, Span<char>)
  nameWithType: StringAsserts.StartsWith(ReadOnlySpan<char>, Span<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.Span<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2107
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As Span(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlySpan(Of Char), Span(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char))
  name.vb: StartsWith(ReadOnlySpan(Of Char), Span(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  id: StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  nameWithType: StringAsserts.StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2124
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the current culture.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char))
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char))
  name.vb: StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char))
- uid: Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  id: StartsWith(System.Span{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(Span<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.Span<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2142
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Span(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Span(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: StartsWith(Span(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: StartsWith(System.Span{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(Span<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.Span<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2161
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(Span<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.Span{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As Span(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.Span(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: StartsWith(Span(Of Char), ReadOnlySpan(Of Char), StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(ReadOnlySpan<char>, Span<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.Span<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2180
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, Span<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.Span{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As Span(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.Span(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlySpan(Of Char), Span(Of Char), StringComparison)
- uid: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  commentId: M:Asserts.StringAsserts.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  id: StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)
  parent: Asserts.StringAsserts
  langs:
  - csharp
  - vb
  name: StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  nameWithType: StringAsserts.StartsWith(ReadOnlySpan<char>, ReadOnlySpan<char>, StringComparison)
  fullName: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan<char>, System.ReadOnlySpan<char>, System.StringComparison)
  type: Method
  source:
    id: StartsWith
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\StringAsserts.cs
    startLine: 2199
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a string starts with a given sub-string, using the given comparison type.
  example:
  - >-
    <pre><code class="lang-csharp">Add an example for this method ?</code></pre>

    Contribution <a href="https://media.giphy.com/media/gVoBC0SuaHStq/giphy.gif">guide</a>.
  syntax:
    content: public static void StartsWith(ReadOnlySpan<char> expectedStartString, ReadOnlySpan<char> actualString, StringComparison comparisonType = StringComparison.CurrentCulture)
    parameters:
    - id: expectedStartString
      type: System.ReadOnlySpan{System.Char}
      description: The sub-string expected to be at the start of the string
    - id: actualString
      type: System.ReadOnlySpan{System.Char}
      description: The string to be inspected
    - id: comparisonType
      type: System.StringComparison
      description: The type of string comparison to perform
    content.vb: Public Shared Sub StartsWith(expectedStartString As ReadOnlySpan(Of Char), actualString As ReadOnlySpan(Of Char), comparisonType As StringComparison = StringComparison.CurrentCulture)
  overload: Asserts.StringAsserts.StartsWith*
  exceptions:
  - type: Xunit.Sdk.StartsWithException
    commentId: T:Xunit.Sdk.StartsWithException
    description: Thrown when the string does not start with the expected sub-string
  nameWithType.vb: StringAsserts.StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
  fullName.vb: Asserts.StringAsserts.StartsWith(System.ReadOnlySpan(Of Char), System.ReadOnlySpan(Of Char), System.StringComparison)
  name.vb: StartsWith(ReadOnlySpan(Of Char), ReadOnlySpan(Of Char), StringComparison)
references:
- uid: Asserts
  commentId: N:Asserts
  href: Asserts.html
  name: Asserts
  nameWithType: Asserts
  fullName: Asserts
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.Sdk.ContainsException
  commentId: T:Xunit.Sdk.ContainsException
  parent: Xunit.Sdk
  href: Xunit.Sdk.ContainsException.html
  name: ContainsException
  nameWithType: ContainsException
  fullName: Xunit.Sdk.ContainsException
- uid: Asserts.StringAsserts.Contains*
  commentId: Overload:Asserts.StringAsserts.Contains
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_Contains_System_String_System_String_
  name: Contains
  nameWithType: StringAsserts.Contains
  fullName: Asserts.StringAsserts.Contains
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Xunit.Sdk
  commentId: N:Xunit.Sdk
  href: Xunit.html
  name: Xunit.Sdk
  nameWithType: Xunit.Sdk
  fullName: Xunit.Sdk
  spec.csharp:
  - uid: Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
  spec.vb:
  - uid: Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.stringcomparison
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.Memory{System.Char}
  commentId: T:System.Memory{System.Char}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<char>
  nameWithType: Memory<char>
  fullName: System.Memory<char>
  nameWithType.vb: Memory(Of Char)
  fullName.vb: System.Memory(Of Char)
  name.vb: Memory(Of Char)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Memory`1
  commentId: T:System.Memory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlyMemory{System.Char}
  commentId: T:System.ReadOnlyMemory{System.Char}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<char>
  nameWithType: ReadOnlyMemory<char>
  fullName: System.ReadOnlyMemory<char>
  nameWithType.vb: ReadOnlyMemory(Of Char)
  fullName.vb: System.ReadOnlyMemory(Of Char)
  name.vb: ReadOnlyMemory(Of Char)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Span{System.Char}
  commentId: T:System.Span{System.Char}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<char>
  nameWithType: Span<char>
  fullName: System.Span<char>
  nameWithType.vb: Span(Of Char)
  fullName.vb: System.Span(Of Char)
  name.vb: Span(Of Char)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlySpan{System.Char}
  commentId: T:System.ReadOnlySpan{System.Char}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<char>
  nameWithType: ReadOnlySpan<char>
  fullName: System.ReadOnlySpan<char>
  nameWithType.vb: ReadOnlySpan(Of Char)
  fullName.vb: System.ReadOnlySpan(Of Char)
  name.vb: ReadOnlySpan(Of Char)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Xunit.Sdk.DoesNotContainException
  commentId: T:Xunit.Sdk.DoesNotContainException
  parent: Xunit.Sdk
  href: Xunit.Sdk.DoesNotContainException.html
  name: DoesNotContainException
  nameWithType: DoesNotContainException
  fullName: Xunit.Sdk.DoesNotContainException
- uid: Asserts.StringAsserts.DoesNotContain*
  commentId: Overload:Asserts.StringAsserts.DoesNotContain
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_DoesNotContain_System_String_System_String_
  name: DoesNotContain
  nameWithType: StringAsserts.DoesNotContain
  fullName: Asserts.StringAsserts.DoesNotContain
- uid: Xunit.Sdk.DoesNotMatchException
  commentId: T:Xunit.Sdk.DoesNotMatchException
  parent: Xunit.Sdk
  href: Xunit.Sdk.DoesNotMatchException.html
  name: DoesNotMatchException
  nameWithType: DoesNotMatchException
  fullName: Xunit.Sdk.DoesNotMatchException
- uid: Asserts.StringAsserts.DoesNotMatch*
  commentId: Overload:Asserts.StringAsserts.DoesNotMatch
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_DoesNotMatch_System_String_System_String_
  name: DoesNotMatch
  nameWithType: StringAsserts.DoesNotMatch
  fullName: Asserts.StringAsserts.DoesNotMatch
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regex
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Xunit.Sdk.EmptyException
  commentId: T:Xunit.Sdk.EmptyException
  parent: Xunit.Sdk
  href: Xunit.Sdk.EmptyException.html
  name: EmptyException
  nameWithType: EmptyException
  fullName: Xunit.Sdk.EmptyException
- uid: Asserts.StringAsserts.Empty*
  commentId: Overload:Asserts.StringAsserts.Empty
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_Empty_System_String_
  name: Empty
  nameWithType: StringAsserts.Empty
  fullName: Asserts.StringAsserts.Empty
- uid: Asserts.StringAsserts.EndsWith*
  commentId: Overload:Asserts.StringAsserts.EndsWith
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_EndsWith_System_String_System_String_
  name: EndsWith
  nameWithType: StringAsserts.EndsWith
  fullName: Asserts.StringAsserts.EndsWith
- uid: Xunit.Sdk.EndsWithException
  commentId: T:Xunit.Sdk.EndsWithException
  parent: Xunit.Sdk
  href: Xunit.Sdk.EndsWithException.html
  name: EndsWithException
  nameWithType: EndsWithException
  fullName: Xunit.Sdk.EndsWithException
- uid: Xunit.Sdk.EqualException
  commentId: T:Xunit.Sdk.EqualException
  parent: Xunit.Sdk
  href: Xunit.Sdk.EqualException.html
  name: EqualException
  nameWithType: EqualException
  fullName: Xunit.Sdk.EqualException
- uid: Asserts.StringAsserts.Equal*
  commentId: Overload:Asserts.StringAsserts.Equal
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_Equal_System_String_System_String_
  name: Equal
  nameWithType: StringAsserts.Equal
  fullName: Asserts.StringAsserts.Equal
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Xunit.Sdk.MatchesException
  commentId: T:Xunit.Sdk.MatchesException
  parent: Xunit.Sdk
  href: Xunit.Sdk.MatchesException.html
  name: MatchesException
  nameWithType: MatchesException
  fullName: Xunit.Sdk.MatchesException
- uid: Asserts.StringAsserts.Matches*
  commentId: Overload:Asserts.StringAsserts.Matches
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_Matches_System_String_System_String_
  name: Matches
  nameWithType: StringAsserts.Matches
  fullName: Asserts.StringAsserts.Matches
- uid: Asserts.StringAsserts.StartsWith*
  commentId: Overload:Asserts.StringAsserts.StartsWith
  href: Asserts.StringAsserts.html#Asserts_StringAsserts_StartsWith_System_String_System_String_
  name: StartsWith
  nameWithType: StringAsserts.StartsWith
  fullName: Asserts.StringAsserts.StartsWith
- uid: Xunit.Sdk.StartsWithException
  commentId: T:Xunit.Sdk.StartsWithException
  parent: Xunit.Sdk
  href: Xunit.Sdk.StartsWithException.html
  name: StartsWithException
  nameWithType: StartsWithException
  fullName: Xunit.Sdk.StartsWithException
