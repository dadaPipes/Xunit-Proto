### YamlMime:ManagedReference
items:
- uid: Asserts.CollectionAsserts
  commentId: T:Asserts.CollectionAsserts
  id: CollectionAsserts
  parent: Asserts
  children:
  - Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  - Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  - Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  - Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - Asserts.CollectionAsserts.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  - Asserts.CollectionAsserts.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  - Asserts.CollectionAsserts.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  - Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - Asserts.CollectionAsserts.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  - Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)
  - Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)
  - Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)
  - Asserts.CollectionAsserts.Single(System.Collections.IEnumerable,System.Object)
  - Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0})
  - Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  langs:
  - csharp
  - vb
  name: CollectionAsserts
  nameWithType: CollectionAsserts
  fullName: Asserts.CollectionAsserts
  type: Class
  source:
    id: CollectionAsserts
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 29
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  syntax:
    content: public class CollectionAsserts
    content.vb: Public Class CollectionAsserts
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: All<T>(IEnumerable<T>, Action<T>)
  nameWithType: CollectionAsserts.All<T>(IEnumerable<T>, Action<T>)
  fullName: Asserts.CollectionAsserts.All<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T>)
  type: Method
  source:
    id: All
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 41
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that all items in the collection pass when executed against

    action.
  example: []
  syntax:
    content: public static void All<T>(IEnumerable<T> collection, Action<T> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Action{{T}}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub All(Of T)(collection As IEnumerable(Of T), action As Action(Of T))
  overload: Asserts.CollectionAsserts.All*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: CollectionAsserts.All(Of T)(IEnumerable(Of T), Action(Of T))
  fullName.vb: Asserts.CollectionAsserts.All(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T))
  name.vb: All(Of T)(IEnumerable(Of T), Action(Of T))
- uid: Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  commentId: M:Asserts.CollectionAsserts.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: All<T>(IEnumerable<T>, Action<T, int>)
  nameWithType: CollectionAsserts.All<T>(IEnumerable<T>, Action<T, int>)
  fullName: Asserts.CollectionAsserts.All<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, int>)
  type: Method
  source:
    id: All
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 59
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that all items in the collection pass when executed against

    action. The item index is provided to the action, in addition to the item.
  example: []
  syntax:
    content: public static void All<T>(IEnumerable<T> collection, Action<T, int> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Action{{T},System.Int32}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub All(Of T)(collection As IEnumerable(Of T), action As Action(Of T, Integer))
  overload: Asserts.CollectionAsserts.All*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: CollectionAsserts.All(Of T)(IEnumerable(Of T), Action(Of T, Integer))
  fullName.vb: Asserts.CollectionAsserts.All(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, Integer))
  name.vb: All(Of T)(IEnumerable(Of T), Action(Of T, Integer))
- uid: Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  commentId: M:Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  id: AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: AllAsync<T>(IEnumerable<T>, Func<T, Task>)
  nameWithType: CollectionAsserts.AllAsync<T>(IEnumerable<T>, Func<T, Task>)
  fullName: Asserts.CollectionAsserts.AllAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Threading.Tasks.Task>)
  type: Method
  source:
    id: AllAsync
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 95
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that all items in the collection pass when executed against

    action.
  example: []
  syntax:
    content: public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, Task> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Func{{T},System.Threading.Tasks.Task}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function AllAsync(Of T)(collection As IEnumerable(Of T), action As Func(Of T, Task)) As Task
  overload: Asserts.CollectionAsserts.AllAsync*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: CollectionAsserts.AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))
  fullName.vb: Asserts.CollectionAsserts.AllAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Task))
- uid: Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  commentId: M:Asserts.CollectionAsserts.AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  id: AllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: AllAsync<T>(IEnumerable<T>, Func<T, int, Task>)
  nameWithType: CollectionAsserts.AllAsync<T>(IEnumerable<T>, Func<T, int, Task>)
  fullName: Asserts.CollectionAsserts.AllAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, int, System.Threading.Tasks.Task>)
  type: Method
  source:
    id: AllAsync
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 113
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that all items in the collection pass when executed against

    action. The item index is provided to the action, in addition to the item.
  example: []
  syntax:
    content: public static Task AllAsync<T>(IEnumerable<T> collection, Func<T, int, Task> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection
    - id: action
      type: System.Func{{T},System.Int32,System.Threading.Tasks.Task}
      description: The action to test each item against
    typeParameters:
    - id: T
      description: The type of the object to be verified
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function AllAsync(Of T)(collection As IEnumerable(Of T), action As Func(Of T, Integer, Task)) As Task
  overload: Asserts.CollectionAsserts.AllAsync*
  exceptions:
  - type: Xunit.Sdk.AllException
    commentId: T:Xunit.Sdk.AllException
    description: Thrown when the collection contains at least one non-matching element
  nameWithType.vb: CollectionAsserts.AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))
  fullName.vb: Asserts.CollectionAsserts.AllAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Integer, System.Threading.Tasks.Task))
  name.vb: AllAsync(Of T)(IEnumerable(Of T), Func(Of T, Integer, Task))
- uid: Asserts.CollectionAsserts.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  commentId: M:Asserts.CollectionAsserts.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  id: Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Collection<T>(IEnumerable<T>, params Action<T>[])
  nameWithType: CollectionAsserts.Collection<T>(IEnumerable<T>, params Action<T>[])
  fullName: Asserts.CollectionAsserts.Collection<T>(System.Collections.Generic.IEnumerable<T>, params System.Action<T>[])
  type: Method
  source:
    id: Collection
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 149
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that a collection contains exactly a given number of elements, which meet

    the criteria provided by the element inspectors.
  example: []
  syntax:
    content: public static void Collection<T>(IEnumerable<T> collection, params Action<T>[] elementInspectors)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: elementInspectors
      type: System.Action{{T}}[]
      description: >-
        The element inspectors, which inspect each element in turn. The
            total number of element inspectors must exactly match the number of elements in the collection.
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Collection(Of T)(collection As IEnumerable(Of T), ParamArray elementInspectors As Action(Of T)())
  overload: Asserts.CollectionAsserts.Collection*
  nameWithType.vb: CollectionAsserts.Collection(Of T)(IEnumerable(Of T), ParamArray Action(Of T)())
  fullName.vb: Asserts.CollectionAsserts.Collection(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray System.Action(Of T)())
  name.vb: Collection(Of T)(IEnumerable(Of T), ParamArray Action(Of T)())
- uid: Asserts.CollectionAsserts.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  commentId: M:Asserts.CollectionAsserts.CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  id: CollectionAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task}[])
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: CollectionAsync<T>(IEnumerable<T>, params Func<T, Task>[])
  nameWithType: CollectionAsserts.CollectionAsync<T>(IEnumerable<T>, params Func<T, Task>[])
  fullName: Asserts.CollectionAsserts.CollectionAsync<T>(System.Collections.Generic.IEnumerable<T>, params System.Func<T, System.Threading.Tasks.Task>[])
  type: Method
  source:
    id: CollectionAsync
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 189
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that a collection contains exactly a given number of elements, which meet

    the criteria provided by the element inspectors.
  example: []
  syntax:
    content: public static Task CollectionAsync<T>(IEnumerable<T> collection, params Func<T, Task>[] elementInspectors)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: elementInspectors
      type: System.Func{{T},System.Threading.Tasks.Task}[]
      description: >-
        The element inspectors, which inspect each element in turn. The
            total number of element inspectors must exactly match the number of elements in the collection.
    typeParameters:
    - id: T
      description: The type of the object to be verified
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function CollectionAsync(Of T)(collection As IEnumerable(Of T), ParamArray elementInspectors As Func(Of T, Task)()) As Task
  overload: Asserts.CollectionAsserts.CollectionAsync*
  nameWithType.vb: CollectionAsserts.CollectionAsync(Of T)(IEnumerable(Of T), ParamArray Func(Of T, Task)())
  fullName.vb: Asserts.CollectionAsserts.CollectionAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), ParamArray System.Func(Of T, System.Threading.Tasks.Task)())
  name.vb: CollectionAsync(Of T)(IEnumerable(Of T), ParamArray Func(Of T, Task)())
- uid: Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  id: Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Contains<T>(T, IEnumerable<T>)
  nameWithType: CollectionAsserts.Contains<T>(T, IEnumerable<T>)
  fullName: Asserts.CollectionAsserts.Contains<T>(T, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 228
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection contains a given object.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, IEnumerable<T> collection)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, collection As IEnumerable(Of T))
  overload: Asserts.CollectionAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: CollectionAsserts.Contains(Of T)(T, IEnumerable(Of T))
  fullName.vb: Asserts.CollectionAsserts.Contains(Of T)(T, System.Collections.Generic.IEnumerable(Of T))
  name.vb: Contains(Of T)(T, IEnumerable(Of T))
- uid: Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Asserts.CollectionAsserts.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Contains<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: CollectionAsserts.Contains<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  fullName: Asserts.CollectionAsserts.Contains<T>(T, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 261
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection contains a given object, using an equality comparer.
  example: []
  syntax:
    content: public static void Contains<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The object expected to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to equate objects in the collection with the expected object
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(expected As T, collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Asserts.CollectionAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: CollectionAsserts.Contains(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Asserts.CollectionAsserts.Contains(Of T)(T, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Contains(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Asserts.CollectionAsserts.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:Asserts.CollectionAsserts.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Contains<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: CollectionAsserts.Contains<T>(IEnumerable<T>, Predicate<T>)
  fullName: Asserts.CollectionAsserts.Contains<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 281
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection contains a given object.
  example: []
  syntax:
    content: public static void Contains<T>(IEnumerable<T> collection, Predicate<T> filter)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: filter
      type: System.Predicate{{T}}
      description: The filter used to find the item you're ensuring the collection contains
    typeParameters:
    - id: T
      description: The type of the object to be verified
    content.vb: Public Shared Sub Contains(Of T)(collection As IEnumerable(Of T), filter As Predicate(Of T))
  overload: Asserts.CollectionAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: CollectionAsserts.Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
  fullName.vb: Asserts.CollectionAsserts.Contains(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: Contains(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Distinct<T>(IEnumerable<T>)
  nameWithType: CollectionAsserts.Distinct<T>(IEnumerable<T>)
  fullName: Asserts.CollectionAsserts.Distinct<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: Distinct
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 304
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection contains each object only once.
  example: []
  syntax:
    content: public static void Distinct<T>(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub Distinct(Of T)(collection As IEnumerable(Of T))
  overload: Asserts.CollectionAsserts.Distinct*
  exceptions:
  - type: Xunit.Sdk.DistinctException
    commentId: T:Xunit.Sdk.DistinctException
    description: Thrown when an object is present inside the collection more than once
  nameWithType.vb: CollectionAsserts.Distinct(Of T)(IEnumerable(Of T))
  fullName.vb: Asserts.CollectionAsserts.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Distinct(Of T)(IEnumerable(Of T))
- uid: Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Asserts.CollectionAsserts.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Distinct<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: CollectionAsserts.Distinct<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: Asserts.CollectionAsserts.Distinct<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: Distinct
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 314
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection contains each object only once.
  example: []
  syntax:
    content: public static void Distinct<T>(IEnumerable<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to equate objects in the collection with the expected object
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub Distinct(Of T)(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Asserts.CollectionAsserts.Distinct*
  exceptions:
  - type: Xunit.Sdk.DistinctException
    commentId: T:Xunit.Sdk.DistinctException
    description: Thrown when an object is present inside the collection more than once
  nameWithType.vb: CollectionAsserts.Distinct(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Asserts.CollectionAsserts.Distinct(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Distinct(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  id: DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, IEnumerable<T>)
  nameWithType: CollectionAsserts.DoesNotContain<T>(T, IEnumerable<T>)
  fullName: Asserts.CollectionAsserts.DoesNotContain<T>(T, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 338
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection does not contain a given object.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, IEnumerable<T> collection)
    parameters:
    - id: expected
      type: '{T}'
      description: The object that is expected not to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, collection As IEnumerable(Of T))
  overload: Asserts.CollectionAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present inside the collection
  nameWithType.vb: CollectionAsserts.DoesNotContain(Of T)(T, IEnumerable(Of T))
  fullName.vb: Asserts.CollectionAsserts.DoesNotContain(Of T)(T, System.Collections.Generic.IEnumerable(Of T))
  name.vb: DoesNotContain(Of T)(T, IEnumerable(Of T))
- uid: Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Asserts.CollectionAsserts.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: CollectionAsserts.DoesNotContain<T>(T, IEnumerable<T>, IEqualityComparer<T>)
  fullName: Asserts.CollectionAsserts.DoesNotContain<T>(T, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 371
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection does not contain a given object, using an equality comparer.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(T expected, IEnumerable<T> collection, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: '{T}'
      description: The object that is expected not to be in the collection
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to equate objects in the collection with the expected object
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub DoesNotContain(Of T)(expected As T, collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Asserts.CollectionAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present inside the collection
  nameWithType.vb: CollectionAsserts.DoesNotContain(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Asserts.CollectionAsserts.DoesNotContain(Of T)(T, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: DoesNotContain(Of T)(T, IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Asserts.CollectionAsserts.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:Asserts.CollectionAsserts.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: CollectionAsserts.DoesNotContain<T>(IEnumerable<T>, Predicate<T>)
  fullName: Asserts.CollectionAsserts.DoesNotContain<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 409
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection does not contain a given object.
  example: []
  syntax:
    content: public static void DoesNotContain<T>(IEnumerable<T> collection, Predicate<T> filter)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be inspected
    - id: filter
      type: System.Predicate{{T}}
      description: The filter used to find the item you're ensuring the collection does not contain
    typeParameters:
    - id: T
      description: The type of the object to be compared
    content.vb: Public Shared Sub DoesNotContain(Of T)(collection As IEnumerable(Of T), filter As Predicate(Of T))
  overload: Asserts.CollectionAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present inside the collection
  nameWithType.vb: CollectionAsserts.DoesNotContain(Of T)(IEnumerable(Of T), Predicate(Of T))
  fullName.vb: Asserts.CollectionAsserts.DoesNotContain(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: DoesNotContain(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)
  commentId: M:Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)
  id: Empty(System.Collections.IEnumerable)
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Empty(IEnumerable)
  nameWithType: CollectionAsserts.Empty(IEnumerable)
  fullName: Asserts.CollectionAsserts.Empty(System.Collections.IEnumerable)
  type: Method
  source:
    id: Empty
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 444
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection is empty.
  example: []
  syntax:
    content: public static void Empty(IEnumerable collection)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection to be inspected
    content.vb: Public Shared Sub Empty(collection As IEnumerable)
  overload: Asserts.CollectionAsserts.Empty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the collection is null
  - type: Xunit.Sdk.EmptyException
    commentId: T:Xunit.Sdk.EmptyException
    description: Thrown when the collection is not empty
- uid: Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Equal<T>(IEnumerable<T>?, IEnumerable<T>?)
  nameWithType: CollectionAsserts.Equal<T>(IEnumerable<T>?, IEnumerable<T>?)
  fullName: Asserts.CollectionAsserts.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 463
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two sequences are equivalent, using a default comparer.
  example: []
  syntax:
    content: public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T))
  overload: Asserts.CollectionAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the objects are not equal
  nameWithType.vb: CollectionAsserts.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: Asserts.CollectionAsserts.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  nameWithType: CollectionAsserts.Equal<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  fullName: Asserts.CollectionAsserts.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 481
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two sequences are equivalent, using a custom equatable comparer.
  example: []
  syntax:
    content: public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to compare the two objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Asserts.CollectionAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the objects are not equal
  nameWithType.vb: CollectionAsserts.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Asserts.CollectionAsserts.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:Asserts.CollectionAsserts.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Equal<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  nameWithType: CollectionAsserts.Equal<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  fullName: Asserts.CollectionAsserts.Equal<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Func<T, T, bool>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 500
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that two collections are equal, using a comparer function against

    items in the two collections.
  example: []
  syntax:
    content: public static void Equal<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    - id: comparer
      type: System.Func{{T},{T},System.Boolean}
      description: The function to compare two items for equality
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub Equal(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As Func(Of T, T, Boolean))
  overload: Asserts.CollectionAsserts.Equal*
  nameWithType.vb: CollectionAsserts.Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: Asserts.CollectionAsserts.Equal(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))
  name.vb: Equal(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)
  commentId: M:Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)
  id: NotEmpty(System.Collections.IEnumerable)
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: NotEmpty(IEnumerable)
  nameWithType: CollectionAsserts.NotEmpty(IEnumerable)
  fullName: Asserts.CollectionAsserts.NotEmpty(System.Collections.IEnumerable)
  type: Method
  source:
    id: NotEmpty
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 517
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that a collection is not empty.
  example: []
  syntax:
    content: public static void NotEmpty(IEnumerable collection)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection to be inspected
    content.vb: Public Shared Sub NotEmpty(collection As IEnumerable)
  overload: Asserts.CollectionAsserts.NotEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when a null collection is passed
  - type: Xunit.Sdk.NotEmptyException
    commentId: T:Xunit.Sdk.NotEmptyException
    description: Thrown when the collection is empty
- uid: Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?)
  nameWithType: CollectionAsserts.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?)
  fullName: Asserts.CollectionAsserts.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?)
  type: Method
  source:
    id: NotEqual
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 540
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two sequences are not equivalent, using a default comparer.
  example: []
  syntax:
    content: public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected object
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The actual object
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T))
  overload: Asserts.CollectionAsserts.NotEqual*
  exceptions:
  - type: Xunit.Sdk.NotEqualException
    commentId: T:Xunit.Sdk.NotEqualException
    description: Thrown when the objects are equal
  nameWithType.vb: CollectionAsserts.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: Asserts.CollectionAsserts.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  nameWithType: CollectionAsserts.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, IEqualityComparer<T>)
  fullName: Asserts.CollectionAsserts.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    id: NotEqual
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 558
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: Verifies that two sequences are not equivalent, using a custom equality comparer.
  example: []
  syntax:
    content: public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, IEqualityComparer<T> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected object
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The actual object
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer used to compare the two objects
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
  overload: Asserts.CollectionAsserts.NotEqual*
  exceptions:
  - type: Xunit.Sdk.NotEqualException
    commentId: T:Xunit.Sdk.NotEqualException
    description: Thrown when the objects are equal
  nameWithType.vb: CollectionAsserts.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: Asserts.CollectionAsserts.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:Asserts.CollectionAsserts.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  nameWithType: CollectionAsserts.NotEqual<T>(IEnumerable<T>?, IEnumerable<T>?, Func<T, T, bool>)
  fullName: Asserts.CollectionAsserts.NotEqual<T>(System.Collections.Generic.IEnumerable<T>?, System.Collections.Generic.IEnumerable<T>?, System.Func<T, T, bool>)
  type: Method
  source:
    id: NotEqual
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 577
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that two collections are not equal, using a comparer function against

    items in the two collections.
  example: []
  syntax:
    content: public static void NotEqual<T>(IEnumerable<T>? expected, IEnumerable<T>? actual, Func<T, T, bool> comparer)
    parameters:
    - id: expected
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The expected value
    - id: actual
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The value to be compared against
    - id: comparer
      type: System.Func{{T},{T},System.Boolean}
      description: The function to compare two items for equality
    typeParameters:
    - id: T
      description: The type of the objects to be compared
    content.vb: Public Shared Sub NotEqual(Of T)(expected As IEnumerable(Of T), actual As IEnumerable(Of T), comparer As Func(Of T, T, Boolean))
  overload: Asserts.CollectionAsserts.NotEqual*
  nameWithType.vb: CollectionAsserts.NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: Asserts.CollectionAsserts.NotEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, Boolean))
  name.vb: NotEqual(Of T)(IEnumerable(Of T), IEnumerable(Of T), Func(Of T, T, Boolean))
- uid: Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)
  commentId: M:Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)
  id: Single(System.Collections.IEnumerable)
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Single(IEnumerable)
  nameWithType: CollectionAsserts.Single(IEnumerable)
  fullName: Asserts.CollectionAsserts.Single(System.Collections.IEnumerable)
  type: Method
  source:
    id: Single
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 597
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that the given collection contains only a single

    element of the given type.
  example: []
  syntax:
    content: public static object? Single(IEnumerable collection)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection.
    return:
      type: System.Object
      description: The single item in the collection.
    content.vb: Public Shared Function [Single](collection As IEnumerable) As Object
  overload: Asserts.CollectionAsserts.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the collection does not contain
          exactly one element.
- uid: Asserts.CollectionAsserts.Single(System.Collections.IEnumerable,System.Object)
  commentId: M:Asserts.CollectionAsserts.Single(System.Collections.IEnumerable,System.Object)
  id: Single(System.Collections.IEnumerable,System.Object)
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Single(IEnumerable, object?)
  nameWithType: CollectionAsserts.Single(IEnumerable, object?)
  fullName: Asserts.CollectionAsserts.Single(System.Collections.IEnumerable, object?)
  type: Method
  source:
    id: Single
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 617
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that the given collection contains only a single

    element of the given value. The collection may or may not

    contain other values.
  example: []
  syntax:
    content: public static void Single(IEnumerable collection, object? expected)
    parameters:
    - id: collection
      type: System.Collections.IEnumerable
      description: The collection.
    - id: expected
      type: System.Object
      description: The value to find in the collection.
    content.vb: Public Shared Sub [Single](collection As IEnumerable, expected As Object)
  overload: Asserts.CollectionAsserts.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the collection does not contain
          exactly one element.
  nameWithType.vb: CollectionAsserts.Single(IEnumerable, Object)
  fullName.vb: Asserts.CollectionAsserts.Single(System.Collections.IEnumerable, Object)
  name.vb: Single(IEnumerable, Object)
- uid: Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0})
  id: Single``1(System.Collections.Generic.IEnumerable{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Single<T>(IEnumerable<T>)
  nameWithType: CollectionAsserts.Single<T>(IEnumerable<T>)
  fullName: Asserts.CollectionAsserts.Single<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    id: Single
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 639
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that the given collection contains only a single

    element of the given type.
  example: []
  syntax:
    content: public static T Single<T>(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection.
    typeParameters:
    - id: T
      description: The collection type.
    return:
      type: '{T}'
      description: The single item in the collection.
    content.vb: Public Shared Function [Single](Of T)(collection As IEnumerable(Of T)) As T
  overload: Asserts.CollectionAsserts.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the collection does not contain
          exactly one element.
  nameWithType.vb: CollectionAsserts.Single(Of T)(IEnumerable(Of T))
  fullName.vb: Asserts.CollectionAsserts.Single(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Single(Of T)(IEnumerable(Of T))
- uid: Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:Asserts.CollectionAsserts.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: Asserts.CollectionAsserts
  langs:
  - csharp
  - vb
  name: Single<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: CollectionAsserts.Single<T>(IEnumerable<T>, Predicate<T>)
  fullName: Asserts.CollectionAsserts.Single<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    id: Single
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\CollectionAsserts.cs
    startLine: 658
  assemblies:
  - xunit.v3.assert
  namespace: Asserts
  summary: >-
    Verifies that the given collection contains only a single

    element of the given type which matches the given predicate. The

    collection may or may not contain other values which do not

    match the given predicate.
  example: []
  syntax:
    content: public static T Single<T>(IEnumerable<T> collection, Predicate<T> predicate)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection.
    - id: predicate
      type: System.Predicate{{T}}
      description: The item matching predicate.
    typeParameters:
    - id: T
      description: The collection type.
    return:
      type: '{T}'
      description: The single item in the filtered collection.
    content.vb: Public Shared Function [Single](Of T)(collection As IEnumerable(Of T), predicate As Predicate(Of T)) As T
  overload: Asserts.CollectionAsserts.Single*
  exceptions:
  - type: Xunit.Sdk.SingleException
    commentId: T:Xunit.Sdk.SingleException
    description: >-
      Thrown when the filtered collection does
          not contain exactly one element.
  nameWithType.vb: CollectionAsserts.Single(Of T)(IEnumerable(Of T), Predicate(Of T))
  fullName.vb: Asserts.CollectionAsserts.Single(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: Single(Of T)(IEnumerable(Of T), Predicate(Of T))
references:
- uid: Asserts
  commentId: N:Asserts
  href: Asserts.html
  name: Asserts
  nameWithType: Asserts
  fullName: Asserts
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.Sdk.AllException
  commentId: T:Xunit.Sdk.AllException
  name: AllException
  nameWithType: AllException
  fullName: Xunit.Sdk.AllException
- uid: Asserts.CollectionAsserts.All*
  commentId: Overload:Asserts.CollectionAsserts.All
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_All__1_System_Collections_Generic_IEnumerable___0__System_Action___0__
  name: All
  nameWithType: CollectionAsserts.All
  fullName: Asserts.CollectionAsserts.All
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{{T},System.Int32}
  commentId: T:System.Action{``0,System.Int32}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T, int>
  nameWithType: Action<T, int>
  fullName: System.Action<T, int>
  nameWithType.vb: Action(Of T, Integer)
  fullName.vb: System.Action(Of T, Integer)
  name.vb: Action(Of T, Integer)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Asserts.CollectionAsserts.AllAsync*
  commentId: Overload:Asserts.CollectionAsserts.AllAsync
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_AllAsync__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Threading_Tasks_Task__
  name: AllAsync
  nameWithType: CollectionAsserts.AllAsync
  fullName: Asserts.CollectionAsserts.AllAsync
- uid: System.Func{{T},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, Task>
  nameWithType: Func<T, Task>
  fullName: System.Func<T, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Task)
  fullName.vb: System.Func(Of T, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Func{{T},System.Int32,System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Int32,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T, int, Task>
  nameWithType: Func<T, int, Task>
  fullName: System.Func<T, int, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Integer, Task)
  fullName.vb: System.Func(Of T, Integer, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Integer, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Asserts.CollectionAsserts.Collection*
  commentId: Overload:Asserts.CollectionAsserts.Collection
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_Collection__1_System_Collections_Generic_IEnumerable___0__System_Action___0____
  name: Collection
  nameWithType: CollectionAsserts.Collection
  fullName: Asserts.CollectionAsserts.Collection
- uid: System.Action{{T}}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>[]
  nameWithType: Action<T>[]
  fullName: System.Action<T>[]
  nameWithType.vb: Action(Of T)()
  fullName.vb: System.Action(Of T)()
  name.vb: Action(Of T)()
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: Asserts.CollectionAsserts.CollectionAsync*
  commentId: Overload:Asserts.CollectionAsserts.CollectionAsync
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_CollectionAsync__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Threading_Tasks_Task____
  name: CollectionAsync
  nameWithType: CollectionAsserts.CollectionAsync
  fullName: Asserts.CollectionAsserts.CollectionAsync
- uid: System.Func{{T},System.Threading.Tasks.Task}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, Task>[]
  nameWithType: Func<T, Task>[]
  fullName: System.Func<T, System.Threading.Tasks.Task>[]
  nameWithType.vb: Func(Of T, Task)()
  fullName.vb: System.Func(Of T, System.Threading.Tasks.Task)()
  name.vb: Func(Of T, Task)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  - name: )
  - name: (
  - name: )
- uid: Xunit.Sdk.ContainsException
  commentId: T:Xunit.Sdk.ContainsException
  name: ContainsException
  nameWithType: ContainsException
  fullName: Xunit.Sdk.ContainsException
- uid: Asserts.CollectionAsserts.Contains*
  commentId: Overload:Asserts.CollectionAsserts.Contains
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_Contains__1___0_System_Collections_Generic_IEnumerable___0__
  name: Contains
  nameWithType: CollectionAsserts.Contains
  fullName: Asserts.CollectionAsserts.Contains
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Xunit.Sdk.DistinctException
  commentId: T:Xunit.Sdk.DistinctException
  name: DistinctException
  nameWithType: DistinctException
  fullName: Xunit.Sdk.DistinctException
- uid: Asserts.CollectionAsserts.Distinct*
  commentId: Overload:Asserts.CollectionAsserts.Distinct
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_Distinct__1_System_Collections_Generic_IEnumerable___0__
  name: Distinct
  nameWithType: CollectionAsserts.Distinct
  fullName: Asserts.CollectionAsserts.Distinct
- uid: Xunit.Sdk.DoesNotContainException
  commentId: T:Xunit.Sdk.DoesNotContainException
  name: DoesNotContainException
  nameWithType: DoesNotContainException
  fullName: Xunit.Sdk.DoesNotContainException
- uid: Asserts.CollectionAsserts.DoesNotContain*
  commentId: Overload:Asserts.CollectionAsserts.DoesNotContain
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_DoesNotContain__1___0_System_Collections_Generic_IEnumerable___0__
  name: DoesNotContain
  nameWithType: CollectionAsserts.DoesNotContain
  fullName: Asserts.CollectionAsserts.DoesNotContain
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: Xunit.Sdk.EmptyException
  commentId: T:Xunit.Sdk.EmptyException
  name: EmptyException
  nameWithType: EmptyException
  fullName: Xunit.Sdk.EmptyException
- uid: Asserts.CollectionAsserts.Empty*
  commentId: Overload:Asserts.CollectionAsserts.Empty
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_Empty_System_Collections_IEnumerable_
  name: Empty
  nameWithType: CollectionAsserts.Empty
  fullName: Asserts.CollectionAsserts.Empty
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: Xunit.Sdk.EqualException
  commentId: T:Xunit.Sdk.EqualException
  name: EqualException
  nameWithType: EqualException
  fullName: Xunit.Sdk.EqualException
- uid: Asserts.CollectionAsserts.Equal*
  commentId: Overload:Asserts.CollectionAsserts.Equal
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_Equal__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  name: Equal
  nameWithType: CollectionAsserts.Equal
  fullName: Asserts.CollectionAsserts.Equal
- uid: System.Func{{T},{T},System.Boolean}
  commentId: T:System.Func{``0,``0,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T, T, bool>
  nameWithType: Func<T, T, bool>
  fullName: System.Func<T, T, bool>
  nameWithType.vb: Func(Of T, T, Boolean)
  fullName.vb: System.Func(Of T, T, Boolean)
  name.vb: Func(Of T, T, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Xunit.Sdk.NotEmptyException
  commentId: T:Xunit.Sdk.NotEmptyException
  name: NotEmptyException
  nameWithType: NotEmptyException
  fullName: Xunit.Sdk.NotEmptyException
- uid: Asserts.CollectionAsserts.NotEmpty*
  commentId: Overload:Asserts.CollectionAsserts.NotEmpty
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_NotEmpty_System_Collections_IEnumerable_
  name: NotEmpty
  nameWithType: CollectionAsserts.NotEmpty
  fullName: Asserts.CollectionAsserts.NotEmpty
- uid: Xunit.Sdk.NotEqualException
  commentId: T:Xunit.Sdk.NotEqualException
  name: NotEqualException
  nameWithType: NotEqualException
  fullName: Xunit.Sdk.NotEqualException
- uid: Asserts.CollectionAsserts.NotEqual*
  commentId: Overload:Asserts.CollectionAsserts.NotEqual
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_NotEqual__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  name: NotEqual
  nameWithType: CollectionAsserts.NotEqual
  fullName: Asserts.CollectionAsserts.NotEqual
- uid: Xunit.Sdk.SingleException
  commentId: T:Xunit.Sdk.SingleException
  name: SingleException
  nameWithType: SingleException
  fullName: Xunit.Sdk.SingleException
- uid: Asserts.CollectionAsserts.Single*
  commentId: Overload:Asserts.CollectionAsserts.Single
  href: Asserts.CollectionAsserts.html#Asserts_CollectionAsserts_Single_System_Collections_IEnumerable_
  name: Single
  nameWithType: CollectionAsserts.Single
  fullName: Asserts.CollectionAsserts.Single
