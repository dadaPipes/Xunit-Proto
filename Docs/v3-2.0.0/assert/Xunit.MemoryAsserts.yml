### YamlMime:ManagedReference
items:
- uid: Xunit.MemoryAsserts
  commentId: T:Xunit.MemoryAsserts
  id: MemoryAsserts
  parent: Xunit
  children:
  - Xunit.MemoryAsserts.Contains``1(System.Memory{``0},System.Memory{``0})
  - Xunit.MemoryAsserts.Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  - Xunit.MemoryAsserts.Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  - Xunit.MemoryAsserts.Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  - Xunit.MemoryAsserts.DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  - Xunit.MemoryAsserts.DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  - Xunit.MemoryAsserts.DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  - Xunit.MemoryAsserts.DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  - Xunit.MemoryAsserts.Equal``1(System.Memory{``0},System.Memory{``0})
  - Xunit.MemoryAsserts.Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  - Xunit.MemoryAsserts.Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  - Xunit.MemoryAsserts.Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  langs:
  - csharp
  - vb
  name: MemoryAsserts
  nameWithType: MemoryAsserts
  fullName: Xunit.MemoryAsserts
  type: Class
  source:
    id: MemoryAsserts
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 14
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  syntax:
    content: public class MemoryAsserts
    content.vb: Public Class MemoryAsserts
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Xunit.MemoryAsserts.Contains``1(System.Memory{``0},System.Memory{``0})
  commentId: M:Xunit.MemoryAsserts.Contains``1(System.Memory{``0},System.Memory{``0})
  id: Contains``1(System.Memory{``0},System.Memory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Contains<T>(Memory<T>, Memory<T>)
  nameWithType: MemoryAsserts.Contains<T>(Memory<T>, Memory<T>)
  fullName: Xunit.MemoryAsserts.Contains<T>(System.Memory<T>, System.Memory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 31
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(Memory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As Memory(Of T))
  overload: Xunit.MemoryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: MemoryAsserts.Contains(Of T)(Memory(Of T), Memory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Contains(Of T)(System.Memory(Of T), System.Memory(Of T))
  name.vb: Contains(Of T)(Memory(Of T), Memory(Of T))
- uid: Xunit.MemoryAsserts.Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.MemoryAsserts.Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  id: Contains``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Contains<T>(Memory<T>, ReadOnlyMemory<T>)
  nameWithType: MemoryAsserts.Contains<T>(Memory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.MemoryAsserts.Contains<T>(System.Memory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 43
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(Memory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: Xunit.MemoryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: MemoryAsserts.Contains(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Contains(Of T)(System.Memory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Contains(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
- uid: Xunit.MemoryAsserts.Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  commentId: M:Xunit.MemoryAsserts.Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  id: Contains``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Contains<T>(ReadOnlyMemory<T>, Memory<T>)
  nameWithType: MemoryAsserts.Contains<T>(ReadOnlyMemory<T>, Memory<T>)
  fullName: Xunit.MemoryAsserts.Contains<T>(System.ReadOnlyMemory<T>, System.Memory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 55
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(ReadOnlyMemory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As Memory(Of T))
  overload: Xunit.MemoryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: MemoryAsserts.Contains(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Contains(Of T)(System.ReadOnlyMemory(Of T), System.Memory(Of T))
  name.vb: Contains(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
- uid: Xunit.MemoryAsserts.Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.MemoryAsserts.Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  id: Contains``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Contains<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  nameWithType: MemoryAsserts.Contains<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.MemoryAsserts.Contains<T>(System.ReadOnlyMemory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 67
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory contains a given sub-Memory
  example: []
  syntax:
    content: 'public static void Contains<T>(ReadOnlyMemory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Contains(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: Xunit.MemoryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the sub-Memory is not present inside the Memory
  nameWithType.vb: MemoryAsserts.Contains(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Contains(Of T)(System.ReadOnlyMemory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Contains(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
- uid: Xunit.MemoryAsserts.DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  commentId: M:Xunit.MemoryAsserts.DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  id: DoesNotContain``1(System.Memory{``0},System.Memory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(Memory<T>, Memory<T>)
  nameWithType: MemoryAsserts.DoesNotContain<T>(Memory<T>, Memory<T>)
  fullName: Xunit.MemoryAsserts.DoesNotContain<T>(System.Memory<T>, System.Memory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 87
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(Memory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As Memory(Of T))
  overload: Xunit.MemoryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: MemoryAsserts.DoesNotContain(Of T)(Memory(Of T), Memory(Of T))
  fullName.vb: Xunit.MemoryAsserts.DoesNotContain(Of T)(System.Memory(Of T), System.Memory(Of T))
  name.vb: DoesNotContain(Of T)(Memory(Of T), Memory(Of T))
- uid: Xunit.MemoryAsserts.DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.MemoryAsserts.DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  id: DoesNotContain``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(Memory<T>, ReadOnlyMemory<T>)
  nameWithType: MemoryAsserts.DoesNotContain<T>(Memory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.MemoryAsserts.DoesNotContain<T>(System.Memory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 99
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(Memory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.Memory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As Memory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: Xunit.MemoryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: MemoryAsserts.DoesNotContain(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.MemoryAsserts.DoesNotContain(Of T)(System.Memory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: DoesNotContain(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
- uid: Xunit.MemoryAsserts.DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  commentId: M:Xunit.MemoryAsserts.DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  id: DoesNotContain``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(ReadOnlyMemory<T>, Memory<T>)
  nameWithType: MemoryAsserts.DoesNotContain<T>(ReadOnlyMemory<T>, Memory<T>)
  fullName: Xunit.MemoryAsserts.DoesNotContain<T>(System.ReadOnlyMemory<T>, System.Memory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 111
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(ReadOnlyMemory<T> expectedSubMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.Memory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As Memory(Of T))
  overload: Xunit.MemoryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: MemoryAsserts.DoesNotContain(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
  fullName.vb: Xunit.MemoryAsserts.DoesNotContain(Of T)(System.ReadOnlyMemory(Of T), System.Memory(Of T))
  name.vb: DoesNotContain(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
- uid: Xunit.MemoryAsserts.DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.MemoryAsserts.DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  id: DoesNotContain``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  nameWithType: MemoryAsserts.DoesNotContain<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.MemoryAsserts.DoesNotContain<T>(System.ReadOnlyMemory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 123
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a Memory does not contain a given sub-Memory
  example: []
  syntax:
    content: 'public static void DoesNotContain<T>(ReadOnlyMemory<T> expectedSubMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedSubMemory
      type: System.ReadOnlyMemory{{T}}
      description: The sub-Memory expected not to be in the Memory
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The Memory to be inspected
    typeParameters:
    - id: T
    content.vb: Public Shared Sub DoesNotContain(Of T As IEquatable(Of T))(expectedSubMemory As ReadOnlyMemory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: Xunit.MemoryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the sub-Memory is present inside the Memory
  nameWithType.vb: MemoryAsserts.DoesNotContain(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.MemoryAsserts.DoesNotContain(Of T)(System.ReadOnlyMemory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: DoesNotContain(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
- uid: Xunit.MemoryAsserts.Equal``1(System.Memory{``0},System.Memory{``0})
  commentId: M:Xunit.MemoryAsserts.Equal``1(System.Memory{``0},System.Memory{``0})
  id: Equal``1(System.Memory{``0},System.Memory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Equal<T>(Memory<T>, Memory<T>)
  nameWithType: MemoryAsserts.Equal<T>(Memory<T>, Memory<T>)
  fullName: Xunit.MemoryAsserts.Equal<T>(System.Memory<T>, System.Memory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 149
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(Memory<T> expectedMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.Memory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.Memory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As Memory(Of T), actualMemory As Memory(Of T))
  overload: Xunit.MemoryAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: MemoryAsserts.Equal(Of T)(Memory(Of T), Memory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Equal(Of T)(System.Memory(Of T), System.Memory(Of T))
  name.vb: Equal(Of T)(Memory(Of T), Memory(Of T))
- uid: Xunit.MemoryAsserts.Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.MemoryAsserts.Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  id: Equal``1(System.Memory{``0},System.ReadOnlyMemory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Equal<T>(Memory<T>, ReadOnlyMemory<T>)
  nameWithType: MemoryAsserts.Equal<T>(Memory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.MemoryAsserts.Equal<T>(System.Memory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 161
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(Memory<T> expectedMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.Memory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As Memory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: Xunit.MemoryAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: MemoryAsserts.Equal(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Equal(Of T)(System.Memory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Equal(Of T)(Memory(Of T), ReadOnlyMemory(Of T))
- uid: Xunit.MemoryAsserts.Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  commentId: M:Xunit.MemoryAsserts.Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  id: Equal``1(System.ReadOnlyMemory{``0},System.Memory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Equal<T>(ReadOnlyMemory<T>, Memory<T>)
  nameWithType: MemoryAsserts.Equal<T>(ReadOnlyMemory<T>, Memory<T>)
  fullName: Xunit.MemoryAsserts.Equal<T>(System.ReadOnlyMemory<T>, System.Memory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 173
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(ReadOnlyMemory<T> expectedMemory, Memory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.ReadOnlyMemory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.Memory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As ReadOnlyMemory(Of T), actualMemory As Memory(Of T))
  overload: Xunit.MemoryAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: MemoryAsserts.Equal(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Equal(Of T)(System.ReadOnlyMemory(Of T), System.Memory(Of T))
  name.vb: Equal(Of T)(ReadOnlyMemory(Of T), Memory(Of T))
- uid: Xunit.MemoryAsserts.Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  commentId: M:Xunit.MemoryAsserts.Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  id: Equal``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})
  parent: Xunit.MemoryAsserts
  langs:
  - csharp
  - vb
  name: Equal<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  nameWithType: MemoryAsserts.Equal<T>(ReadOnlyMemory<T>, ReadOnlyMemory<T>)
  fullName: Xunit.MemoryAsserts.Equal<T>(System.ReadOnlyMemory<T>, System.ReadOnlyMemory<T>)
  type: Method
  source:
    id: Equal
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\MemoryAsserts.cs
    startLine: 185
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that two Memory values are equivalent.
  example: []
  syntax:
    content: 'public static void Equal<T>(ReadOnlyMemory<T> expectedMemory, ReadOnlyMemory<T> actualMemory) where T : IEquatable<T>'
    parameters:
    - id: expectedMemory
      type: System.ReadOnlyMemory{{T}}
      description: The expected Memory value.
    - id: actualMemory
      type: System.ReadOnlyMemory{{T}}
      description: The actual Memory value.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Equal(Of T As IEquatable(Of T))(expectedMemory As ReadOnlyMemory(Of T), actualMemory As ReadOnlyMemory(Of T))
  overload: Xunit.MemoryAsserts.Equal*
  exceptions:
  - type: Xunit.Sdk.EqualException
    commentId: T:Xunit.Sdk.EqualException
    description: Thrown when the Memory values are not equivalent.
  nameWithType.vb: MemoryAsserts.Equal(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
  fullName.vb: Xunit.MemoryAsserts.Equal(Of T)(System.ReadOnlyMemory(Of T), System.ReadOnlyMemory(Of T))
  name.vb: Equal(Of T)(ReadOnlyMemory(Of T), ReadOnlyMemory(Of T))
references:
- uid: Xunit
  commentId: N:Xunit
  href: Xunit.html
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.Sdk.ContainsException
  commentId: T:Xunit.Sdk.ContainsException
  parent: Xunit.Sdk
  href: Xunit.Sdk.ContainsException.html
  name: ContainsException
  nameWithType: ContainsException
  fullName: Xunit.Sdk.ContainsException
- uid: Xunit.MemoryAsserts.Contains*
  commentId: Overload:Xunit.MemoryAsserts.Contains
  href: Xunit.MemoryAsserts.html#Xunit_MemoryAsserts_Contains__1_System_Memory___0__System_Memory___0__
  name: Contains
  nameWithType: MemoryAsserts.Contains
  fullName: Xunit.MemoryAsserts.Contains
- uid: System.Memory{{T}}
  commentId: T:System.Memory{``0}
  parent: System
  definition: System.Memory`1
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Xunit.Sdk
  commentId: N:Xunit.Sdk
  href: Xunit.html
  name: Xunit.Sdk
  nameWithType: Xunit.Sdk
  fullName: Xunit.Sdk
  spec.csharp:
  - uid: Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
  spec.vb:
  - uid: Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
- uid: System.Memory`1
  commentId: T:System.Memory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.memory-1
  name: Memory<T>
  nameWithType: Memory<T>
  fullName: System.Memory<T>
  nameWithType.vb: Memory(Of T)
  fullName.vb: System.Memory(Of T)
  name.vb: Memory(Of T)
  spec.csharp:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Memory`1
    name: Memory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.memory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlyMemory{{T}}
  commentId: T:System.ReadOnlyMemory{``0}
  parent: System
  definition: System.ReadOnlyMemory`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ReadOnlyMemory`1
  commentId: T:System.ReadOnlyMemory`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  name: ReadOnlyMemory<T>
  nameWithType: ReadOnlyMemory<T>
  fullName: System.ReadOnlyMemory<T>
  nameWithType.vb: ReadOnlyMemory(Of T)
  fullName.vb: System.ReadOnlyMemory(Of T)
  name.vb: ReadOnlyMemory(Of T)
  spec.csharp:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlyMemory`1
    name: ReadOnlyMemory
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlymemory-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Xunit.Sdk.DoesNotContainException
  commentId: T:Xunit.Sdk.DoesNotContainException
  parent: Xunit.Sdk
  href: Xunit.Sdk.DoesNotContainException.html
  name: DoesNotContainException
  nameWithType: DoesNotContainException
  fullName: Xunit.Sdk.DoesNotContainException
- uid: Xunit.MemoryAsserts.DoesNotContain*
  commentId: Overload:Xunit.MemoryAsserts.DoesNotContain
  href: Xunit.MemoryAsserts.html#Xunit_MemoryAsserts_DoesNotContain__1_System_Memory___0__System_Memory___0__
  name: DoesNotContain
  nameWithType: MemoryAsserts.DoesNotContain
  fullName: Xunit.MemoryAsserts.DoesNotContain
- uid: Xunit.Sdk.EqualException
  commentId: T:Xunit.Sdk.EqualException
  parent: Xunit.Sdk
  href: Xunit.Sdk.EqualException.html
  name: EqualException
  nameWithType: EqualException
  fullName: Xunit.Sdk.EqualException
- uid: Xunit.MemoryAsserts.Equal*
  commentId: Overload:Xunit.MemoryAsserts.Equal
  href: Xunit.MemoryAsserts.html#Xunit_MemoryAsserts_Equal__1_System_Memory___0__System_Memory___0__
  name: Equal
  nameWithType: MemoryAsserts.Equal
  fullName: Xunit.MemoryAsserts.Equal
