### YamlMime:ManagedReference
items:
- uid: Xunit.DictionaryAsserts
  commentId: T:Xunit.DictionaryAsserts
  id: DictionaryAsserts
  parent: Xunit
  children:
  - Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  - Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  - Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  - Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  - Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  - Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  - Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  - Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  - Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  - Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  - Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  - Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  langs:
  - csharp
  - vb
  name: DictionaryAsserts
  nameWithType: DictionaryAsserts
  fullName: Xunit.DictionaryAsserts
  type: Class
  source:
    id: DictionaryAsserts
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 21
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  syntax:
    content: public class DictionaryAsserts
    content.vb: Public Class DictionaryAsserts
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.Contains<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.Contains<TKey, TValue>(TKey, System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 34
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, IDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As IDictionary(Of TKey, TValue)) As TValue
  overload: Xunit.DictionaryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: DictionaryAsserts.Contains(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.Contains(Of TKey, TValue)(TKey, System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.Contains<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.Contains<TKey, TValue>(TKey, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 62
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a read-only dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, IReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As IReadOnlyDictionary(Of TKey, TValue)) As TValue
  overload: Xunit.DictionaryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: DictionaryAsserts.Contains(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.Contains(Of TKey, TValue)(TKey, System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.Contains<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.Contains<TKey, TValue>(TKey, System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 90
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, ConcurrentDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As ConcurrentDictionary(Of TKey, TValue)) As TValue
  overload: Xunit.DictionaryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: DictionaryAsserts.Contains(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.Contains(Of TKey, TValue)(TKey, System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.Contains<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.Contains<TKey, TValue>(TKey, System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 107
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, Dictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As Dictionary(Of TKey, TValue)) As TValue
  overload: Xunit.DictionaryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: DictionaryAsserts.Contains(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.Contains(Of TKey, TValue)(TKey, System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.Contains<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.Contains<TKey, TValue>(TKey, System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 124
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, ReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.ObjectModel.ReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As ReadOnlyDictionary(Of TKey, TValue)) As TValue
  overload: Xunit.DictionaryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: DictionaryAsserts.Contains(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.Contains(Of TKey, TValue)(TKey, System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  id: Contains``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: Contains<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.Contains<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.Contains<TKey, TValue>(TKey, System.Collections.Immutable.ImmutableDictionary<TKey, TValue>)
  type: Method
  source:
    id: Contains
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 141
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary contains a given key.
  example: []
  syntax:
    content: 'public static TValue Contains<TKey, TValue>(TKey expected, ImmutableDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Immutable.ImmutableDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    return:
      type: '{TValue}'
      description: The value associated with <code class="paramref">expected</code>.
    content.vb: Public Shared Function Contains(Of TKey, TValue)(expected As TKey, collection As ImmutableDictionary(Of TKey, TValue)) As TValue
  overload: Xunit.DictionaryAsserts.Contains*
  exceptions:
  - type: Xunit.Sdk.ContainsException
    commentId: T:Xunit.Sdk.ContainsException
    description: Thrown when the object is not present in the collection
  nameWithType.vb: DictionaryAsserts.Contains(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.Contains(Of TKey, TValue)(TKey, System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue))
  name.vb: Contains(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Generic.IDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, IDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 157
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, IDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As IDictionary(Of TKey, TValue))
  overload: Xunit.DictionaryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, IDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, IReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 183
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, IReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As IReadOnlyDictionary(Of TKey, TValue))
  overload: Xunit.DictionaryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, IReadOnlyDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, ConcurrentDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 209
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, ConcurrentDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As ConcurrentDictionary(Of TKey, TValue))
  overload: Xunit.DictionaryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, ConcurrentDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Generic.Dictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, Dictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 225
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, Dictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As Dictionary(Of TKey, TValue))
  overload: Xunit.DictionaryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, Dictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, ReadOnlyDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 241
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, ReadOnlyDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.ObjectModel.ReadOnlyDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As ReadOnlyDictionary(Of TKey, TValue))
  overload: Xunit.DictionaryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, ReadOnlyDictionary(Of TKey, TValue))
- uid: Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  commentId: M:Xunit.DictionaryAsserts.DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  id: DoesNotContain``2(``0,System.Collections.Immutable.ImmutableDictionary{``0,``1})
  parent: Xunit.DictionaryAsserts
  langs:
  - csharp
  - vb
  name: DoesNotContain<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  nameWithType: DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, ImmutableDictionary<TKey, TValue>)
  fullName: Xunit.DictionaryAsserts.DoesNotContain<TKey, TValue>(TKey, System.Collections.Immutable.ImmutableDictionary<TKey, TValue>)
  type: Method
  source:
    id: DoesNotContain
    path: C:\Users\dadaP\source\TestingRepos\Xunit-Proto\v3\v3-2.0.0\src\xunit.v3.assert\Asserts\DictionaryAsserts.cs
    startLine: 257
  assemblies:
  - xunit.v3.assert
  namespace: Xunit
  summary: Verifies that a dictionary does not contain a given key.
  example: []
  syntax:
    content: 'public static void DoesNotContain<TKey, TValue>(TKey expected, ImmutableDictionary<TKey, TValue> collection) where TKey : notnull'
    parameters:
    - id: expected
      type: '{TKey}'
      description: The object expected to be in the collection.
    - id: collection
      type: System.Collections.Immutable.ImmutableDictionary{{TKey},{TValue}}
      description: The collection to be inspected.
    typeParameters:
    - id: TKey
      description: The type of the keys of the object to be verified.
    - id: TValue
      description: The type of the values of the object to be verified.
    content.vb: Public Shared Sub DoesNotContain(Of TKey, TValue)(expected As TKey, collection As ImmutableDictionary(Of TKey, TValue))
  overload: Xunit.DictionaryAsserts.DoesNotContain*
  exceptions:
  - type: Xunit.Sdk.DoesNotContainException
    commentId: T:Xunit.Sdk.DoesNotContainException
    description: Thrown when the object is present in the collection
  nameWithType.vb: DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
  fullName.vb: Xunit.DictionaryAsserts.DoesNotContain(Of TKey, TValue)(TKey, System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue))
  name.vb: DoesNotContain(Of TKey, TValue)(TKey, ImmutableDictionary(Of TKey, TValue))
references:
- uid: Xunit
  commentId: N:Xunit
  href: Xunit.html
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.Sdk.ContainsException
  commentId: T:Xunit.Sdk.ContainsException
  parent: Xunit.Sdk
  href: Xunit.Sdk.ContainsException.html
  name: ContainsException
  nameWithType: ContainsException
  fullName: Xunit.Sdk.ContainsException
- uid: Xunit.DictionaryAsserts.Contains*
  commentId: Overload:Xunit.DictionaryAsserts.Contains
  href: Xunit.DictionaryAsserts.html#Xunit_DictionaryAsserts_Contains__2___0_System_Collections_Generic_IDictionary___0___1__
  name: Contains
  nameWithType: DictionaryAsserts.Contains
  fullName: Xunit.DictionaryAsserts.Contains
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Xunit.Sdk
  commentId: N:Xunit.Sdk
  href: Xunit.html
  name: Xunit.Sdk
  nameWithType: Xunit.Sdk
  fullName: Xunit.Sdk
  spec.csharp:
  - uid: Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
  spec.vb:
  - uid: Xunit
    name: Xunit
    href: Xunit.html
  - name: .
  - uid: Xunit.Sdk
    name: Sdk
    href: Xunit.Sdk.html
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{``0,``1}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent.concurrentdictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Concurrent
    name: Concurrent
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Concurrent
    name: Concurrent
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.concurrent
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.Collections.Immutable.ImmutableDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Immutable.ImmutableDictionary{``0,``1}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.ImmutableDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  name: ImmutableDictionary<TKey, TValue>
  nameWithType: ImmutableDictionary<TKey, TValue>
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>
  nameWithType.vb: ImmutableDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue)
  name.vb: ImmutableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Immutable.ImmutableDictionary`2
  commentId: T:System.Collections.Immutable.ImmutableDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  name: ImmutableDictionary<TKey, TValue>
  nameWithType: ImmutableDictionary<TKey, TValue>
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey, TValue>
  nameWithType.vb: ImmutableDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Immutable.ImmutableDictionary(Of TKey, TValue)
  name.vb: ImmutableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Immutable.ImmutableDictionary`2
    name: ImmutableDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable.immutabledictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Immutable
    name: Immutable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.immutable
- uid: Xunit.Sdk.DoesNotContainException
  commentId: T:Xunit.Sdk.DoesNotContainException
  parent: Xunit.Sdk
  href: Xunit.Sdk.DoesNotContainException.html
  name: DoesNotContainException
  nameWithType: DoesNotContainException
  fullName: Xunit.Sdk.DoesNotContainException
- uid: Xunit.DictionaryAsserts.DoesNotContain*
  commentId: Overload:Xunit.DictionaryAsserts.DoesNotContain
  href: Xunit.DictionaryAsserts.html#Xunit_DictionaryAsserts_DoesNotContain__2___0_System_Collections_Generic_IDictionary___0___1__
  name: DoesNotContain
  nameWithType: DictionaryAsserts.DoesNotContain
  fullName: Xunit.DictionaryAsserts.DoesNotContain
